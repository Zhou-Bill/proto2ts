syntax = "proto3";

package ceres.merchandise;

option java_multiple_files = true;
option go_package = "code.guanmai.cn/back_end/ceres/app/merchandise/api/model;model";



service MerchandiseService {
    // 系统自动添加，请勿删除
    rpc DeletePackUnit(DeletePackUnitRequest) returns (DeletePackUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeletePackUnit"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdatePackUnit(UpdatePackUnitRequest) returns (UpdatePackUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdatePackUnit"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreatePackUnit(CreatePackUnitRequest) returns (CreatePackUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreatePackUnit"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryPackUnit(QueryPackUnitRequest) returns (QueryPackUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryPackUnit"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetPackUnit(GetPackUnitRequest) returns (GetPackUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetPackUnit"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteSkuAcceptanceCriteria(DeleteSkuAcceptanceCriteriaRequest) returns (DeleteSkuAcceptanceCriteriaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSkuAcceptanceCriteria"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateSkuAcceptanceCriteria(UpdateSkuAcceptanceCriteriaRequest) returns (UpdateSkuAcceptanceCriteriaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSkuAcceptanceCriteria"
        };
    };

    // 保存商品验收标准
    rpc SaveSkuAcceptanceCriteria(SaveSkuAcceptanceCriteriaRequest) returns (SaveSkuAcceptanceCriteriaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SaveSkuAcceptanceCriteria"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateSkuAcceptanceCriteria(CreateSkuAcceptanceCriteriaRequest) returns (CreateSkuAcceptanceCriteriaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSkuAcceptanceCriteria"
        };
    };

    // 系统自动添加，请勿删除
    rpc QuerySkuAcceptanceCriteria(QuerySkuAcceptanceCriteriaRequest) returns (QuerySkuAcceptanceCriteriaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QuerySkuAcceptanceCriteria"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListSkuAcceptanceCriteria(ListSkuAcceptanceCriteriaRequest) returns (ListSkuAcceptanceCriteriaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuAcceptanceCriteria"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetSkuAcceptanceCriteria(GetSkuAcceptanceCriteriaRequest) returns (GetSkuAcceptanceCriteriaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuAcceptanceCriteria"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteMarketData(DeleteMarketDataRequest) returns (DeleteMarketDataResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteMarketData"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateMarketData(UpdateMarketDataRequest) returns (UpdateMarketDataResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateMarketData"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateMarketData(CreateMarketDataRequest) returns (CreateMarketDataResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateMarketData"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryMarketData(QueryMarketDataRequest) returns (QueryMarketDataResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryMarketData"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetMarketData(GetMarketDataRequest) returns (GetMarketDataResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetMarketData"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateReferencePrice(CreateReferencePriceRequest) returns (CreateReferencePriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateReferencePrice"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryReferencePrice(QueryReferencePriceRequest) returns (QueryReferencePriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryReferencePrice"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateCategoryImage(UpdateCategoryImageRequest) returns (UpdateCategoryImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateCategoryImage"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateCategoryImage(CreateCategoryImageRequest) returns (CreateCategoryImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateCategoryImage"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryCategoryImage(QueryCategoryImageRequest) returns (QueryCategoryImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryCategoryImage"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetCategoryImage(GetCategoryImageRequest) returns (GetCategoryImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCategoryImage"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryRuleSet(QueryRuleSetRequest) returns (QueryRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryRuleSet"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteFavoriteSku(DeleteFavoriteSkuRequest) returns (DeleteFavoriteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteFavoriteSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateFavoriteSku(UpdateFavoriteSkuRequest) returns (UpdateFavoriteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateFavoriteSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateFavoriteSku(CreateFavoriteSkuRequest) returns (CreateFavoriteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateFavoriteSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryFavoriteSku(QueryFavoriteSkuRequest) returns (QueryFavoriteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryFavoriteSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListFavoriteSku(ListFavoriteSkuRequest) returns (ListFavoriteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListFavoriteSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetFavoriteSku(GetFavoriteSkuRequest) returns (GetFavoriteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetFavoriteSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryFavorite(QueryFavoriteRequest) returns (QueryFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryFavorite"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetFavorite(GetFavoriteRequest) returns (GetFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetFavorite"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteMealCalendar(DeleteMealCalendarRequest) returns (DeleteMealCalendarResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteMealCalendar"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateMealCalendar(UpdateMealCalendarRequest) returns (UpdateMealCalendarResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateMealCalendar"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateMealCalendar(CreateMealCalendarRequest) returns (CreateMealCalendarResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateMealCalendar"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryMealCalendar(QueryMealCalendarRequest) returns (QueryMealCalendarResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryMealCalendar"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListMealCalendar(ListMealCalendarRequest) returns (ListMealCalendarResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListMealCalendar"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetMealCalendar(GetMealCalendarRequest) returns (GetMealCalendarResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetMealCalendar"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteBasicPriceDetail(DeleteBasicPriceDetailRequest) returns (DeleteBasicPriceDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteBasicPriceDetail"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateBasicPriceDetail(UpdateBasicPriceDetailRequest) returns (UpdateBasicPriceDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateBasicPriceDetail"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateBasicPriceDetail(CreateBasicPriceDetailRequest) returns (CreateBasicPriceDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateBasicPriceDetail"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryBasicPriceDetail(QueryBasicPriceDetailRequest) returns (QueryBasicPriceDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryBasicPriceDetail"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetBasicPriceDetail(GetBasicPriceDetailRequest) returns (GetBasicPriceDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetBasicPriceDetail"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteBasicPrice(DeleteBasicPriceRequest) returns (DeleteBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteBasicPrice"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateBasicPrice(UpdateBasicPriceRequest) returns (UpdateBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateBasicPrice"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateBasicPrice(CreateBasicPriceRequest) returns (CreateBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateBasicPrice"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryBasicPrice(QueryBasicPriceRequest) returns (QueryBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryBasicPrice"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryMenuPeriodGroup(QueryMenuPeriodGroupRequest) returns (QueryMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryMenuPeriodGroup"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetMenuPeriodGroup(GetMenuPeriodGroupRequest) returns (GetMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetMenuPeriodGroup"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryMenuDetailSku(QueryMenuDetailSkuRequest) returns (QueryMenuDetailSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryMenuDetailSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteMenuDetail(DeleteMenuDetailRequest) returns (DeleteMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteMenuDetail"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryMenuDetail(QueryMenuDetailRequest) returns (QueryMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryMenuDetail"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetMenuDetail(GetMenuDetailRequest) returns (GetMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetMenuDetail"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteCustomerMenuRelation(DeleteCustomerMenuRelationRequest) returns (DeleteCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteCustomerMenuRelation"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateCustomerMenuRelation(UpdateCustomerMenuRelationRequest) returns (UpdateCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateCustomerMenuRelation"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateCustomerMenuRelation(CreateCustomerMenuRelationRequest) returns (CreateCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateCustomerMenuRelation"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryCustomerMenuRelation(QueryCustomerMenuRelationRequest) returns (QueryCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryCustomerMenuRelation"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryMenu(QueryMenuRequest) returns (QueryMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryMenu"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateCustomerQuotationRelation(UpdateCustomerQuotationRelationRequest) returns (UpdateCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateCustomerQuotationRelation"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateCustomerQuotationRelation(CreateCustomerQuotationRelationRequest) returns (CreateCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateCustomerQuotationRelation"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryCustomerQuotationRelation(QueryCustomerQuotationRelationRequest) returns (QueryCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryCustomerQuotationRelation"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListCustomerQuotationRelation(ListCustomerQuotationRelationRequest) returns (ListCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCustomerQuotationRelation"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteCustomerPriceMaskSku(DeleteCustomerPriceMaskSkuRequest) returns (DeleteCustomerPriceMaskSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteCustomerPriceMaskSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateCustomerPriceMaskSku(UpdateCustomerPriceMaskSkuRequest) returns (UpdateCustomerPriceMaskSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateCustomerPriceMaskSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateCustomerPriceMaskSku(CreateCustomerPriceMaskSkuRequest) returns (CreateCustomerPriceMaskSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateCustomerPriceMaskSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryCustomerPriceMaskSku(QueryCustomerPriceMaskSkuRequest) returns (QueryCustomerPriceMaskSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryCustomerPriceMaskSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListCustomerPriceMaskSku(ListCustomerPriceMaskSkuRequest) returns (ListCustomerPriceMaskSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCustomerPriceMaskSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetCustomerPriceMaskSku(GetCustomerPriceMaskSkuRequest) returns (GetCustomerPriceMaskSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerPriceMaskSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteCustomerPriceOnCategory(DeleteCustomerPriceOnCategoryRequest) returns (DeleteCustomerPriceOnCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteCustomerPriceOnCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateCustomerPriceOnCategory(UpdateCustomerPriceOnCategoryRequest) returns (UpdateCustomerPriceOnCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateCustomerPriceOnCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateCustomerPriceOnCategory(CreateCustomerPriceOnCategoryRequest) returns (CreateCustomerPriceOnCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateCustomerPriceOnCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryCustomerPriceOnCategory(QueryCustomerPriceOnCategoryRequest) returns (QueryCustomerPriceOnCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryCustomerPriceOnCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListCustomerPriceOnCategory(ListCustomerPriceOnCategoryRequest) returns (ListCustomerPriceOnCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCustomerPriceOnCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetCustomerPriceOnCategory(GetCustomerPriceOnCategoryRequest) returns (GetCustomerPriceOnCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerPriceOnCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryQuotation(QueryQuotationRequest) returns (QueryQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryQuotation"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteSkuSaleInventory(DeleteSkuSaleInventoryRequest) returns (DeleteSkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSkuSaleInventory"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateSkuSaleInventory(UpdateSkuSaleInventoryRequest) returns (UpdateSkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSkuSaleInventory"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateSkuSaleInventory(CreateSkuSaleInventoryRequest) returns (CreateSkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSkuSaleInventory"
        };
    };

    // 系统自动添加，请勿删除
    rpc QuerySkuSaleInventory(QuerySkuSaleInventoryRequest) returns (QuerySkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QuerySkuSaleInventory"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListSkuSaleInventory(ListSkuSaleInventoryRequest) returns (ListSkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuSaleInventory"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetSkuSaleInventory(GetSkuSaleInventoryRequest) returns (GetSkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuSaleInventory"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateNutrition(UpdateNutritionRequest) returns (UpdateNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateNutrition(CreateNutritionRequest) returns (CreateNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryNutrition(QueryNutritionRequest) returns (QueryNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetNutrition(GetNutritionRequest) returns (GetNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteSkuNutrition(DeleteSkuNutritionRequest) returns (DeleteSkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSkuNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateSkuNutrition(UpdateSkuNutritionRequest) returns (UpdateSkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSkuNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateSkuNutrition(CreateSkuNutritionRequest) returns (CreateSkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSkuNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc QuerySkuNutrition(QuerySkuNutritionRequest) returns (QuerySkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QuerySkuNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListSkuNutrition(ListSkuNutritionRequest) returns (ListSkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuNutrition"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteSku(DeleteSkuRequest) returns (DeleteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateSku(UpdateSkuRequest) returns (UpdateSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateSku(CreateSkuRequest) returns (CreateSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSku"
        };
    };

    // 系统自动添加，请勿删除
    rpc QuerySku(QuerySkuRequest) returns (QuerySkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QuerySku"
        };
    };

    // 系统自动添加，请勿删除
    rpc QuerySpu(QuerySpuRequest) returns (QuerySpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QuerySpu"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteFinanceCategory(DeleteFinanceCategoryRequest) returns (DeleteFinanceCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteFinanceCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateFinanceCategory(UpdateFinanceCategoryRequest) returns (UpdateFinanceCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateFinanceCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc CreateFinanceCategory(CreateFinanceCategoryRequest) returns (CreateFinanceCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateFinanceCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryFinanceCategory(QueryFinanceCategoryRequest) returns (QueryFinanceCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryFinanceCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc ListFinanceCategory(ListFinanceCategoryRequest) returns (ListFinanceCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListFinanceCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetFinanceCategory(GetFinanceCategoryRequest) returns (GetFinanceCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetFinanceCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc DeleteInternalCategory(DeleteInternalCategoryRequest) returns (DeleteInternalCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteInternalCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc UpdateInternalCategory(UpdateInternalCategoryRequest) returns (UpdateInternalCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateInternalCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryInternalCategory(QueryInternalCategoryRequest) returns (QueryInternalCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryInternalCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetInternalCategory(GetInternalCategoryRequest) returns (GetInternalCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetInternalCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryCategory(QueryCategoryRequest) returns (QueryCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryCategory"
        };
    };

    // 系统自动添加，请勿删除
    rpc QueryUnit(QueryUnitRequest) returns (QueryUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QueryUnit"
        };
    };

    // 系统自动添加，请勿删除
    rpc GetUnit(GetUnitRequest) returns (GetUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetUnit"
        };
    };

    
/****************** 单位相关 ******************/
    rpc CreateUnit(CreateUnitRequest) returns (CreateUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateUnit"
        };
    };
    rpc UpdateUnit(UpdateUnitRequest) returns (UpdateUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateUnit"
        };
    };
    rpc DeleteUnit(DeleteUnitRequest) returns (DeleteUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteUnit"
        };
    };
    rpc ListUnit(ListUnitRequest) returns (ListUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListUnit"
        };
    };
    // 获取全部企业单位
    rpc ListGroupUnit(ListGroupUnitRequest) returns (ListGroupUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListGroupUnit"
        };
    };
    //    rpc GetSetUnitByName(GetSetUnitByNameRequest) returns (GetSetUnitByNameResponse) {
    //        option (google.api.http) = {
    //            post : "/ceres/merchandise/MerchandiseService/GetSetUnitByNameRequest"
    //        };
    //    };
    rpc ListUnitOfGroup(ListUnitOfGroupRequest) returns (ListUnitOfGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListUnitOfGroup"
        };
    }

    
/****************** 分类相关 ******************/
    // 根据分类ID获取
    rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCategory"
        };
    };

    // 创建单个分类
    rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateCategory"
        };
    };

    // 修改单个分类
    rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateCategory"
        };
    };

    // 修改多个分类
    rpc UpdateManyCategory(UpdateManyCategoryRequest) returns (UpdateManyCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateManyCategory"
        };
    };

    // 删除单个分类
    rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteCategory"
        };
    };

    // 获取分类列表
    rpc ListCategory(ListCategoryRequest) returns (ListCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCategory"
        };
    };

    // 修改单个分类-开放平台
    rpc SyncUpdateCategory(SyncUpdateCategoryRequest) returns (SyncUpdateCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SyncUpdateCategory"
        };
    };

    // 获取内部分类列表
    rpc ListInternalCategory(ListInternalCategoryRequest) returns (ListInternalCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListInternalCategory"
        };
    };

    // 创建内部分类
    rpc CreateInternalCategory(CreateInternalCategoryRequest) returns (CreateInternalCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateInternalCategory"
        };
    };

    // 获取分类树
    rpc GetCategoryTree(GetCategoryTreeRequest) returns (GetCategoryTreeResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCategoryTree"
        };
    };

    // 获取客户协议价关联的报价单的分类树
    rpc GetCategoryTreeOnCustomerPrice(GetCategoryTreeOnCustomerPriceRequest) returns (GetCategoryTreeOnCustomerPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCategoryTreeOnCustomerPrice"
        };
    };

    // 修改客户分类协议价
    rpc DeltaUpdatePriceRuleOnCategory(DeltaUpdatePriceRuleOnCategoryRequest) returns (DeltaUpdatePriceRuleOnCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeltaUpdatePriceRuleOnCategory"
        };
    };

    // 批量修改分类排序
    rpc BatchUpdateCategorySort(BatchUpdateCategorySortRequest) returns (BatchUpdateCategorySortResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchUpdateCategorySort"
        };
    };

    // 观麦维护了一个标准的商品库。这个标准库作用是方便客户快速初始化商品数据，这是获取标准商品库的分类树的接口
    rpc GetOfficialCategoryTree(GetOfficialCategoryTreeRequest) returns (GetOfficialCategoryTreeResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetOfficialCategoryTree"
        };
    };

    // 根据ID列表获取多个分类
    rpc GetManyCategory(GetManyCategoryRequest) returns (GetManyCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyCategory"
        };
    };

    // 根据ID列表获取多个分类
    rpc GetManyCategoryByRelationGroup(GetManyCategoryByRelationGroupRequest) returns (GetManyCategoryByRelationGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyCategoryByRelationGroup"
        };
    };

    // 初始化系统预设的分类图片
    rpc InitCategoryImage(InitCategoryImageRequest) returns (InitCategoryImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/InitCategoryImage"
        };
    };

    // 获取系统预设的分类图片
    rpc ListCategoryImage(ListCategoryImageRequest) returns (ListCategoryImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCategoryImage"
        };
    };

    // 从标准库初始化数据到其他group
    rpc CreateMerchandiseCategory(CreateMerchandiseCategoryRequest) returns (CreateMerchandiseCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateMerchandiseCategory"
        };
    }

    // for sap linx@2021.6.1
    rpc GetCategoryByCategoryName(GetCategoryByCategoryNameRequest) returns (GetCategoryByCategoryNameResponse) {
    };

    // 通过分类名称获取分类
    rpc ListCategoryByName(ListCategoryByNameRequest) returns (ListCategoryByNameResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCategoryByName"
        };
    };

    // 获取税收分类数
    rpc GetFinanceCategoryTree(GetFinanceCategoryTreeRequest) returns (GetFinanceCategoryTreeResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetFinanceCategoryTree"
        };
    }

    // 通过税收分类ID列表获取税收分类
    rpc GetManyFinanceCategory(GetManyFinanceCategoryRequest) returns (GetManyFinanceCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyFinanceCategory"
        };
    }

    // 由于税收分类是固定的
    rpc InitFinanceCategory(InitFinanceCategoryRequest) returns (InitFinanceCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/InitFinanceCategory"
        };
    }

    
/****************** spu相关 ******************/
    // 我们的系统的业务逻辑里其实已经不存在spu了，但是为了保证和其他系统对接的能力。我们依然保留了spu。
    rpc GetSpu(GetSpuRequest) returns (GetSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSpu"
        };
    };
    rpc GetManySpu(GetManySpuRequest) returns (GetManySpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySpu"
        };
    };
    rpc CreateSpu(CreateSpuRequest) returns (CreateSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSpu"
        };
    };
    rpc UpdateSpu(UpdateSpuRequest) returns (UpdateSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSpu"
        };
    };
    rpc DeleteSpu(DeleteSpuRequest) returns (DeleteSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSpu"
        };
    };
    rpc ListSpu(ListSpuRequest) returns (ListSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSpu"
        };
    };
    rpc GetSpuBySpuName(GetSpuBySpuNameRequest) returns (GetSpuBySpuNameResponse) {
    };

    
/****************** sku相关 ******************/
    rpc GetSku(GetSkuRequest) returns (GetSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSku"
        };
    };

    rpc GetSkuNameCacheV2(GetSkuNameCacheV2Request) returns (GetSkuNameCacheV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuNameCacheV2"
        };
    }

    // 查询group下sku简单信息缓存，目前只有名称、别名、自定义单位名称
    rpc GetGroupSkuSimpleInfoCache(GetGroupSkuSimpleInfoCacheRequest) returns (GetGroupSkuSimpleInfoCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetGroupSkuSimpleInfoCache"
        };
    }

    rpc DeleteSkuV2(DeleteSkuV2Request) returns (DeleteSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSkuV2"
        };
    };

    // 恢复一个已删除的商品
    rpc RecoverSkuV2(RecoverSkuV2Request) returns (RecoverSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/RecoverSkuV2"
        };
    };

    // 更新一个已删除的商品，目前只支持商品名称、商品编码以及商品分类的修改
    // 目的是为了恢复商品的时候，可以避免出现名称、编码冲突，以及分类未恢复的问题
    rpc UpdateDeletedSku(UpdateDeletedSkuRequest) returns (UpdateDeletedSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateDeletedSku"
        };
    };

    // 根据商品恢复该商品在某一段时间内的报价，可以指定报价单，默认恢复当时的所有报价单
    rpc RecoverBasicPriceBySku(RecoverBasicPriceBySkuRequest) returns (RecoverBasicPriceBySkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/RecoverBasicPriceBySku"
        };
    };

    rpc ListSku(ListSkuRequest) returns (ListSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSku"
        };
    };

    rpc ExportSku(ExportSkuRequest) returns (ExportSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportSku"
        };
    };

    rpc ExportSkuV2(ExportSkuV2Request) returns (ExportSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportSkuV2"
        };
    };

    rpc ExportLiteSku(ExportLiteSkuRequest) returns (ExportLiteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportLiteSku"
        };
    };

    rpc GetManySku(GetManySkuRequest) returns (GetManySkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySku"
        };
    };

    rpc GetSkuSnap(GetSkuSnapRequest) returns (GetSkuSnapResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuSnap"
        };
    };

    rpc GetManySkuSnap(GetManySkuSnapRequest) returns (GetManySkuSnapResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySkuSnap"
        };
    };

    rpc GetManySkuSnapV2(GetManySkuSnapV2Request) returns (GetManySkuSnapV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySkuSnapV2"
        };
    };

    rpc UpdateManySkuSnapV2(UpdateManySkuSnapV2Request) returns (UpdateManySkuSnapV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateManySkuSnapV2"
        };
    };

    rpc QuerySkuSnapshot(QuerySkuSnapshotRequest) returns (QuerySkuSnapshotResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/QuerySkuSnapshot"
        };
    };

    rpc CreateSkuV2(CreateSkuV2Request) returns (CreateSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSkuV2"
        };
    }

    rpc CreateLiteSku(CreateLiteSkuRequest) returns (CreateLiteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateLiteSku"
        };
    }

    rpc CheckLiteSkuNameUnitExist(CheckLiteSkuNameUnitExistRequest) returns (CheckLiteSkuNameUnitExistResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CheckLiteSkuNameUnitExist"
        };
    }

    rpc UpsertSkuV2(UpsertSkuV2Request) returns (UpsertSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpsertSkuV2"
        };
    };

    rpc UpsertManySkuV2(UpsertManySkuV2Request) returns (UpsertManySkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpsertManySkuV2"
        };
    };

    rpc BatchUpsertSkuV2(BatchUpsertSkuV2Request) returns (BatchUpsertSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchUpsertSkuV2"
        };
    };

    //    review如果这个接口不是异步的，那就不需要CreateSkuV2了，创建单个也可以用这个
    rpc CreateManySkuV2(CreateManySkuV2Request) returns (CreateManySkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateManySkuV2"
        };
    }

    rpc UpdateSkuV2(UpdateSkuV2Request) returns (UpdateSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSkuV2"
        };
    }

    rpc UpdateSkuByMapV2(UpdateSkuByMapV2Request) returns (UpdateSkuByMapV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSkuByMapV2"
        };
    }

    rpc UpdateSkuLevelV2(UpdateSkuLevelV2Request) returns (UpdateSkuLevelV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSkuLevelV2"
        };
    }

    rpc GetSkuV2(GetSkuV2Request) returns (GetSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuV2"
        };
    };

    // 商品重构新接口
    rpc ListSkuV2(ListSkuV2Request) returns (ListSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuV2"
        };
    };
    // 废弃
    rpc ListSkuV2ForSearch(ListSkuV2ForSearchRequest) returns (ListSkuV2ForSearchResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuV2ForSearch"
        };
    };
    //批量审核skuSearch
    rpc BatchApprovetemporarySku(BatchApprovetemporarySkuRequest) returns (BatchApprovetemporarySkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchApprovetemporarySku"
        };
    };

    rpc ListSkuWithInquiryPrice(ListSkuWithInquiryPriceRequest) returns (ListSkuWithInquiryPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuWithInquiryPrice"
        };
    };

    // 商品重构新接口
    rpc GetSkuByNameUnit(GetSkuByNameUnitRequest) returns (GetSkuByNameUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuByNameUnit"
        };
    };

    // 根据商品/单位/客户名称，获取商品和报价单建议价接口
    rpc ListSkuByNameUnit(ListSkuByNameUnitRequest) returns (ListSkuByNameUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuByNameUnit"
        };
    };

    // 根据商品/单位/客户名称，获取报价单建议价接口，统合订单单价和BasicPrice
    rpc ListSkuSuggestedPriceByName(ListSkuSuggestedPriceByNameRequest) returns (ListSkuSuggestedPriceByNameResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuSuggestedPriceByName"
        };
    };

    // 最近购买过商品价格缓存
    rpc ListRecentSkuPrices(ListRecentSkuPricesRequest) returns (ListRecentSkuPricesResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListRecentSkuPrices"
        };
    }

    // 获取商品曾用的自定义单位数据
    rpc GetSkuCustomUnit(GetSkuCustomUnitRequest) returns (GetSkuCustomUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuCustomUnit"
        };
    };

    // 获取商品当前在报价单中绑定的所有下单单位
    rpc GetSkuBondOrderUnit(GetSkuBondOrderUnitRequest) returns (GetSkuBondOrderUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuBondOrderUnit"
        };
    };

    // 获取云商品库数据
    rpc ListOfficialSku(ListOfficialSkuRequest) returns (ListOfficialSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListOfficialSku"
        };
    };

    rpc ListSkuForBindingQuotation(ListSkuForBindingQuotationRequest) returns (ListSkuForBindingQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuForBindingQuotation"
        };
    };

    rpc ListSkuForBindCustomerQuotation(ListSkuForBindCustomerQuotationRequest) returns (ListSkuForBindCustomerQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuForBindCustomerQuotation"
        };
    };

    rpc ListMaskSkuByQuotation(ListMaskSkuByQuotationRequest) returns (ListMaskSkuByQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListMaskSkuByQuotation"
        };
    };

    rpc ListSkuLite(ListSkuLiteRequest) returns (ListSkuLiteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuLite"
        };
    };

    rpc GetManySkuV2(GetManySkuV2Request) returns (GetManySkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySkuV2"
        };
    };

    //批量修改供应商协作模式
    rpc BulkUpdateSkuSupplierCooperate(BulkUpdateSkuSupplierCooperateRequest) returns (BulkUpdateSkuSupplierCooperateResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateSkuSupplierCooperate"
        };
    };

    //修改是否设置供货比例
    rpc BulkUpdateSkuSupplierPercentage(BulkUpdateSkuSupplierPercentageRequest) returns (BulkUpdateSkuSupplierPercentageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateSkuSupplierPercentage"
        };
    };

    // 修改单个sku默认货位
    rpc UpdateSkuShelf(UpdateSkuShelfRequest) returns (UpdateSkuShelfResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSkuShelf"
        };
    }
    // 批量导入商品
    rpc BulkCreateCategorySkuV2(BulkCreateCategorySkuV2Request) returns (BulkCreateCategorySkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkCreateCategorySkuV2"
        };
    };
    // 批量导入轻巧版商品
    rpc BulkCreateLiteCategorySku(BulkCreateLiteCategorySkuRequest) returns (BulkCreateLiteCategorySkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkCreateLiteCategorySku"
        };
    };
    // 批量修改商品
    rpc BulkUpdateSkuByExcelV2(BulkUpdateSkuByExcelV2Request) returns (BulkUpdateSkuByExcelV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateSkuByExcelV2"
        };
    };

    // 批量轻巧版修改商品
    rpc BulkUpdateLiteSkuByExcel(BulkUpdateLiteSkuByExcelRequest) returns (BulkUpdateLiteSkuByExcelResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateLiteSkuByExcel"
        };
    };

    // 批量导入商品（新增/修改）
    rpc BulkImportSkuByExcelV2(BulkImportSkuByExcelV2Request) returns (BulkImportSkuByExcelV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkImportSkuByExcelV2"
        };
    };

    // 页面上修改sku的属性
    rpc BulkUpdateSkuV2(BulkUpdateSkuV2Request) returns (BulkUpdateSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateSkuV2"
        };
    };

    // 客户所绑定报价单中的商品列表
    rpc ListSkuWithQuotationByCustomerId(ListSkuWithQuotationByCustomerIdRequest) returns (ListSkuWithQuotationByCustomerIdResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuWithQuotationByCustomerId"
        };
    };

    
/****************** ssu相关 ******************/
    rpc GetSsuSnap(GetSsuSnapRequest) returns (GetSsuSnapResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSsuSnap"
        };
    };

    rpc GetManySsuSnap(GetManySsuSnapRequest) returns (GetManySsuSnapResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySsuSnap"
        };
    };

    rpc GetSsu(GetSsuRequest) returns (GetSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSsu"
        };
    };

    rpc ListSsu(ListSsuRequest) returns (ListSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSsu"
        };
    }
    rpc ListSsuByRelationGroup(ListSsuByRelationGroupRequest) returns (ListSsuByRelationGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSsuByRelationGroup"
        };
    }

    rpc ListMarketSsu(ListMarketSsuRequest) returns (ListMarketSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListMarketSsu"
        };
    }

    
/****************** 商品库其他 ******************/
    rpc ChangeMerchandiseRank(ChangeMerchandiseRankRequest) returns (ChangeMerchandiseRankResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ChangeMerchandiseRank"
        };
    };

    rpc InitMerchandise(InitMerchandiseRequest) returns (InitMerchandiseResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/InitMerchandise"
        };
    }

    rpc CreateManySkuSyncFromYMT(CreateManySkuSyncFromYMTRequest) returns (CreateManySkuSyncFromYMTResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateManySkuSyncFromYMT"
        };
    }
    // 废弃
    rpc CreateReleationCustomerAndSupplier(CreateReleationCustomerAndSupplierRequest) returns (CreateReleationCustomerAndSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateReleationCustomerAndSupplier"
        };
    }

    
/****************** 报价单相关 ******************/

    rpc GetFilterSkuInCustomerQuotation(GetFilterSkuInCustomerQuotationRequest) returns (GetFilterSkuInCustomerQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetFilterSkuInCustomerQuotation"
        };
    }

    // Quotation 报价单
    rpc GetQuotation(GetQuotationRequest) returns (GetQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetQuotation"
        };
    }
    rpc GetDefaultQuotation(GetDefaultQuotationRequest) returns (GetDefaultQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetDefaultQuotation"
        };
    }
    rpc ListQuotation(ListQuotationRequest) returns (ListQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListQuotation"
        };
    }
    rpc ListQuotationV2(ListQuotationV2Request) returns (ListQuotationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListQuotationV2"
        };
    }
    rpc GetValidQuotationByCustomerId(GetValidQuotationByCustomerIdRequest) returns (GetValidQuotationByCustomerIdResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetValidQuotationByCustomerId"
        };
    }
    rpc ListQuotationForBindingSku(ListQuotationForBindingSkuRequest) returns (ListQuotationForBindingSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListQuotationForBindingSku"
        };
    }
    rpc ListQuotationForBatchUpdateBasicPrice(ListQuotationForBatchUpdateBasicPriceRequest) returns (ListQuotationForBatchUpdateBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListQuotationForBatchUpdateBasicPrice"
        };
    }
    // 获取历史报价改动最为频繁的商品
    rpc ListQuotationForHistoryBasicPrices(ListQuotationForHistoryBasicPricesRequest) returns (ListQuotationForHistoryBasicPricesResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListQuotationForHistoryBasicPrices"
        };
    }

    rpc GetManyQuotation(GetManyQuotationRequest) returns (GetManyQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyQuotation"
        };
    }
    // 根据报价单名称搜索报价单的 ID，用于导入商户时候根据报价单名称修改报价单。
    // 注意两点：
    // 1. 报价单目前（2021-02-23）是允许重名的，所以这个接口的提供的数据并不一定准确。
    // 2. 名字只支持完全匹配，不支持模糊匹配。
    rpc GetManyQuotationByName(GetManyQuotationByNameRequest) returns (GetManyQuotationByNameResponse);

    rpc CreateQuotation(CreateQuotationRequest) returns (CreateQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateQuotation"
        };
    }
    rpc CreateQuotationV2(CreateQuotationV2Request) returns (CreateQuotationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateQuotationV2"
        };
    }

    rpc UpdateQuotation(UpdateQuotationRequest) returns (UpdateQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateQuotation"
        };
    }

    rpc UpdateQuotationV2(UpdateQuotationV2Request) returns (UpdateQuotationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateQuotationV2"
        };
    }

    rpc BulkUpdateQuotationV2(BulkUpdateQuotationV2Request) returns (BulkUpdateQuotationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateQuotationV2"
        };
    };

    // 批量同步当前选中价格至该商品绑定的其他报价单
    rpc BatchSyncPriceToOtherQuotation(BatchSyncPriceToOtherQuotationRequest) returns (BatchSyncPriceToOtherQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchSyncPriceToOtherQuotation"
        };
    };

    rpc BulkUpdateBasicPriceV2(BulkUpdateBasicPriceV2Request) returns (BulkUpdateBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateBasicPriceV2"
        };
    };

    rpc BulkUpdateCustomerBasicPriceV2(BulkUpdateCustomerBasicPriceV2Request) returns (BulkUpdateCustomerBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateCustomerBasicPriceV2"
        };
    };
    rpc BulkUpdateMaskSkuToCustomerQuotation(BulkUpdateMaskSkuToCustomerQuotationRequest) returns (BulkUpdateMaskSkuToCustomerQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateMaskSkuToCustomerQuotation"
        };
    };

    rpc BulkUpdateCalRuleOnCategory(BulkUpdateCalRuleOnCategoryRequest) returns (BulkUpdateCalRuleOnCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUpdateCalRuleOnCategory"
        };
    };
    rpc CopyQuotationV2(CopyQuotationV2Request) returns (CopyQuotationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CopyQuotationV2"
        };
    };
    // 复制整个周期报价单
    rpc CopyPeriodQuotationV2(CopyPeriodQuotationV2Request) returns (CopyPeriodQuotationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CopyPeriodQuotationV2"
        };
    };

    // todo 删除报价单逻辑
    rpc DeleteQuotation(DeleteQuotationRequest) returns (DeleteQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteQuotation"
        };
    }

    rpc DeleteQuotationV2(DeleteQuotationV2Request) returns (DeleteQuotationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteQuotationv2"
        };
    }

    rpc DeleteLiteQuotation(DeleteLiteQuotationRequest) returns (DeleteLiteQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteLiteQuotation"
        };
    }

    rpc BindMaskSkuToCustomerQuotation(BindMaskSkuToCustomerQuotationRequest) returns (BindMaskSkuToCustomerQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BindMaskSkuToCustomerQuotation"
        };
    }

    rpc UnBindMaskSkuToCustomerQuotation(UnBindMaskSkuToCustomerQuotationRequest) returns (UnBindMaskSkuToCustomerQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UnBindMaskSkuToCustomerQuotation"
        };
    }

    //    rpc GetCustomerPriceQuotation(GetCustomerPriceQuotationRequest) returns (GetCustomerPriceQuotationResponse) {
    //        option (google.api.http) = {
    //            post : "/ceres/merchandise/MerchandiseService/GetCustomerPriceQuotation"
    //        };
    //    }
    rpc GetFilterCustomerIds(GetFilterCustomerIdsRequest) returns (GetFilterCustomerIdsResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetFilterCustomerIds"
        };
    }

    
/* 报价条目相关 */
    rpc SetBasicPrice(SetBasicPriceRequest) returns (SetBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetBasicPrice"
        };
    }
    rpc ListBasicPrice(ListBasicPriceRequest) returns (ListBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListBasicPrice"
        };
    }
    rpc GetBasicPrice(GetBasicPriceRequest) returns (GetBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetBasicPrice"
        };
    }
    rpc GetManyBasicPrice(GetManyBasicPriceRequest) returns (GetManyBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyBasicPrice"
        };
    }
    rpc GetRuleSet(GetRuleSetRequest) returns (GetRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetRuleSet"
        };
    };
    rpc CreateRuleSet(CreateRuleSetRequest) returns (CreateRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateRuleSet"
        };
    };
    rpc UpdateRuleSet(UpdateRuleSetRequest) returns (UpdateRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateRuleSet"
        };
    };
    rpc DeleteRuleSet(DeleteRuleSetRequest) returns (DeleteRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteRuleSet"
        };
    };
    rpc ListRuleSet(ListRuleSetRequest) returns (ListRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListRuleSet"
        };
    };

    // 全量更新价格
    rpc SetBasicPriceV2(SetBasicPriceV2Request) returns (SetBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetBasicPriceV2"
        };
    }

    // 增量更新价格
    rpc DeltaUpdateBasicPriceV2(DeltaUpdateBasicPriceV2Request) returns (DeltaUpdateBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeltaUpdateBasicPriceV2"
        };
    }

    // 指定删除价格条目
    rpc DeltaDeleteBasicPriceV2(DeltaDeleteBasicPriceV2Request) returns (DeltaDeleteBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeltaDeleteBasicPriceV2"
        };
    }

    // 用户新增辅助单位和自定义单位时根据设置要求自动将此新增单位绑定至该商品已绑定的的报价单上
    rpc AddUnitToBondQuotations(AddUnitToBondQuotationsRequest) returns (AddUnitToBondQuotationsResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/AddUnitToBondQuotations"
        };
    }

    // 设置客户特殊价
    rpc SetSpecialBasicPriceV2(SetSpecialBasicPriceV2Request) returns (SetSpecialBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetSpecialBasicPriceV2"
        };
    }

    // 设置轻巧版报价单
    rpc UpdateLiteBasicPrice(UpdateLiteBasicPriceRequest) returns (UpdateLiteBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateLiteBasicPrice"
        };
    }
    
/****************** 销售库存相关 ******************/

    // 获取商品销售库存
    rpc GetManySkuSaleInventory(GetManySkuSaleInventoryRequest) returns (GetManySkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySkuSaleInventory"
        };
    }

    // 设置商品销售库存
    rpc MultiReplaceSkuSaleInventory(MultiReplaceSkuSaleInventoryRequest) returns (MultiReplaceSkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/MultiReplaceSkuSaleInventory"
        };
    }

    // 修改商品销售库存
    rpc MultiDeltaSkuSaleInventory(MultiDeltaSkuSaleInventoryRequest) returns (MultiDeltaSkuSaleInventoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/MultiDeltaSkuSaleInventory"
        };
    }

    
/****************** 定价公式相关 ******************/

    // 通过定价公式计算价格(不落库)
    rpc CalBasicPriceV2ByPricingFormula(CalBasicPriceV2ByPricingFormulaRequest) returns (CalBasicPriceV2ByPricingFormulaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CalBasicPriceV2ByPricingFormula"
        };
    }

    // 计算当前定价公式
    rpc CalculatePricingFormula(CalculatePricingFormulaRequest) returns (CalculatePricingFormulaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CalculatePricingFormula"
        };
    }

    // 获取一个商品绑定的所有报价单中的公式
    rpc ListFormulaFromSkuBindingQuotations(ListFormulaFromSkuBindingQuotationsRequest) returns (ListFormulaFromSkuBindingQuotationsResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListFormulaFromSkuBindingQuotations"
        };
    }

    // 预设定价公式/通过预设的定价公式增量更新价格
    rpc DeltaUpdateBasicPriceV2ByPricingFormula(DeltaUpdateBasicPriceV2ByPricingFormulaRequest) returns (DeltaUpdateBasicPriceV2ByPricingFormulaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeltaUpdateBasicPriceV2ByPricingFormula"
        };
    }

    // 批量预设定价公式
    rpc BatchPresetPricingFormula(BatchPresetPricingFormulaRequest) returns (BatchPresetPricingFormulaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchPresetPricingFormula"
        };
    }

    // 批量计算定价公式
    rpc BatchCalculatePricingFormula(BatchCalculatePricingFormulaRequest) returns (BatchCalculatePricingFormulaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchCalculatePricingFormula"
        };
    }

    // 客户协议价批量设置计算规则
    //    rpc BatchSetCustomerPriceCalRule(BatchSetCustomerPriceCalRuleRequest) returns (BatchSetCustomerPriceCalRuleResponse) {
    //        option (google.api.http) = {
    //            post : "/ceres/merchandise/MerchandiseService/BatchSetCustomerPriceCalRule"
    //        };
    //    }

    //    review 如何获取一个sku有哪些客户设置了特殊价?  使用ListBasicPriceV2,过滤sku_id和quotation_type就可以

    //    review 轻巧版支持客户单独新增单位 ：createUnit

    rpc ListBasicPriceV2(ListBasicPriceV2Request) returns (ListBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListBasicPriceV2"
        };
    }
    rpc ListSimpleBasicPrice(ListSimpleBasicPriceRequest) returns (ListSimpleBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSimpleBasicPrice"
        };
    }

    rpc ListLiteBasicPrice(ListLiteBasicPriceRequest) returns (ListLiteBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListLiteBasicPrice"
        };
    }

    rpc ListBasicPriceDetail(ListBasicPriceDetailRequest) returns (ListBasicPriceDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListBasicPriceDetail"
        };
    }

    rpc ListBasicPriceByCustomerID(ListBasicPriceByCustomerIDRequest) returns (ListBasicPriceByCustomerIDResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListBasicPriceByCustomerID"
        };
    }

    rpc ListLiteBasicPriceByCustomerID(ListLiteBasicPriceByCustomerIDRequest) returns (ListLiteBasicPriceByCustomerIDResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListLiteBasicPriceByCustomerID"
        };
    }

    rpc ListBasicPriceDetailByCustomerID(ListBasicPriceDetailByCustomerIDRequest) returns (ListBasicPriceDetailByCustomerIDResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListBasicPriceDetailByCustomerID"
        };
    }
    //废弃
    rpc ListBasicPriceDetailByCustomerIDForSearch(ListBasicPriceDetailByCustomerIDForSearchRequest) returns (ListBasicPriceDetailByCustomerIDForSearchResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListBasicPriceDetailByCustomerIDForSearch"
        };
    }
    //搜索sku及其报价，带排序规则功能
    rpc ListSkuAndBasicPriceDetailForSearch(ListSkuAndBasicPriceDetailForSearchRequest) returns (ListSkuAndBasicPriceDetailForSearchResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuAndBasicPriceDetailForSearch"
        };
    }

    rpc ListHistoryBasicPrice(ListHistoryBasicPriceRequest) returns (ListHistoryBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListHistoryBasicPrice"
        };
    }

    rpc ListSkuHistoryBasicPrice(ListSkuHistoryBasicPriceRequest) returns (ListSkuHistoryBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuHistoryBasicPrice"
        };
    }

    rpc ListHistoryBasicPriceByCustomerID(ListHistoryBasicPriceByCustomerIDRequest) returns (ListHistoryBasicPriceByCustomerIDResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListHistoryBasicPriceByCustomerID"
        };
    }

    // 获取客户的协议价商品
    rpc ListSpecialBasicPriceV2(ListSpecialBasicPriceV2Request) returns (ListSpecialBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSpecialBasicPriceV2"
        };
    }

    //  批量查询，生成采购订单时，采购单价根据供应商+商品+单位取状态为生效的协议价
    rpc GetManyQuotationBasicPriceV2(GetManyQuotationBasicPriceV2Request) returns (GetManyQuotationBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyQuotationBasicPriceV2"
        };
    }

    //  按商品+下单单位聚合所选商品在所选报价单内条目展示，可以批量选择进行公式定价，可编辑所有条目，保存后同步到报价单
    rpc ListBasicPriceForBatchUpdate(ListBasicPriceForBatchUpdateRequest) returns (ListBasicPriceForBatchUpdateResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListBasicPriceForBatchUpdate"
        };
    }

    //  根据选中的商品更新报价
    rpc UpdateBasicPriceBySku(UpdateBasicPriceBySkuRequest) returns (UpdateBasicPriceBySkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateBasicPriceBySku"
        };
    }

    //  根据选中的商品报价条目批量进行预设公式操作
    rpc UpdateBasicPriceItemByPricingFormula(UpdateBasicPriceItemByPricingFormulaRequest) returns (UpdateBasicPriceItemByPricingFormulaResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateBasicPriceItemByPricingFormula"
        };
    }

    // 获取批量导入客户协议价错误数据
    rpc ListErrSpecialBasicPriceV2(ListErrSpecialBasicPriceV2Request) returns (ListErrSpecialBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListErrSpecialBasicPriceV2"
        };
    }

    rpc CreateBasicPriceSnapshot(CreateBasicPriceSnapshotRequest) returns (CreateBasicPriceSnapshotResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateBasicPriceSnapshot"
        };
    }

    rpc GetBasicPriceV2(GetBasicPriceV2Request) returns (GetBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetBasicPriceV2"
        };
    }

    
/* 客户报价单关系 */
    rpc SetCustomerQuotationRelation(SetCustomerQuotationRelationRequest) returns (SetCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetCustomerQuotationRelation"
        };
    };

    // 绑定默认报价单
    rpc SetLiteDefaultQuotation(SetLiteDefaultQuotationRequest) returns (SetLiteDefaultQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetLiteDefaultQuotation"
        };
    };

    rpc UnsetCustomerQuotationRelation(UnsetCustomerQuotationRelationRequest) returns (UnsetCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UnsetCustomerQuotationRelation"
        };
    };

    rpc BulkUnsetCustomerQuotationRelationV2(BulkUnsetCustomerQuotationRelationV2Request) returns (BulkUnsetCustomerQuotationRelationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUnsetCustomerQuotationRelationV2"
        };
    };

    rpc BulkUnsetCustomerToCustomerQuotationRelationV2(BulkUnsetCustomerToCustomerQuotationRelationV2Request) returns (BulkUnsetCustomerToCustomerQuotationRelationV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BulkUnsetCustomerToCustomerQuotationRelationV2"
        };
    };

    rpc GetCustomerIdsByQuotationId(GetCustomerIdsByQuotationIdRequest) returns (GetCustomerIdsByQuotationIdResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerIdsByQuotationId"
        };
    };

    rpc GetCustomerIdsByQuotationIds(GetCustomerIdsByQuotationIdsRequest) returns (GetCustomerIdsByQuotationIdsResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerIdsByQuotationIds"
        };
    };

    rpc GetQuotationByCustomerId(GetQuotationByCustomerIdRequest) returns (GetQuotationByCustomerIdResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetQuotationByCustomerId"
        };
    };

    rpc GetQuotationIdsByCustomerIds(GetQuotationIdsByCustomerIdsRequest) returns (GetQuotationIdsByCustomerIdsResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetQuotationIdsByCustomerIds"
        };
    };

    rpc GetCustomerQuotationRelation(GetCustomerQuotationRelationRequest) returns (GetCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerQuotationRelation"
        };
    }

    rpc DeleteCustomerQuotationRelation(DeleteCustomerQuotationRelationRequest) returns (DeleteCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteCustomerQuotationRelation"
        };
    }

    // 更新协议单排序
    rpc UpdateQuotationSortNum(UpdateQuotationSortNumRequest) returns (UpdateQuotationSortNumResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateQuotationSortNum"
        };
    }

    //    rpc DeleteBasicPrice(DeleteBasicPriceRequest) returns (DeleteBasicPriceResponse) {
    //        option (google.api.http) = {
    //            post : "/ceres/merchandise/MerchandiseService/DeleteBasicPrice"
    //        };
    //    }


    rpc AsyncDeleteManySpecialBasicPriceV2(AsyncDeleteManySpecialBasicPriceV2Request) returns (AsyncDeleteManySpecialBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/AsyncDeleteManySpecialBasicPriceV2"
        };
    }

    rpc CopyBasicPrice(CopyBasicPriceRequest) returns (CopyBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CopyBasicPrice"
        };
    }

    rpc ExportQuotationBySsu(ExportQuotationBySsuRequest) returns (ExportQuotationBySsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportQuotationBySsu"
        };
    }

    // 采购协议价
    rpc ImportQuotation(ImportQuotationRequest) returns (ImportQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ImportQuotation"
        };
    }
    rpc ExportQuotation(ExportQuotationRequest) returns (ExportQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportQuotation"
        };
    }


    rpc ExportBasicPriceV2(ExportBasicPriceV2Request) returns (ExportBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportBasicPriceV2"
        };
    };

    rpc ExportCustomerBasicPriceV2(ExportCustomerBasicPriceV2Request) returns (ExportCustomerBasicPriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportCustomerBasicPriceV2"
        };
    };

    rpc ExportHistoryBasicPrice(ExportHistoryBasicPriceRequest) returns (ExportHistoryBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportHistoryBasicPrice"
        };
    };
    rpc ExportSkuHistoryBasicPrice(ExportSkuHistoryBasicPriceRequest) returns (ExportSkuHistoryBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportSkuHistoryBasicPrice"
        };
    };
    
/****************** 参考价相关 ******************/

    rpc SetReferencePrice(SetReferencePriceRequest) returns (SetReferencePriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetReferencePrice"
        };
    }

    rpc SetReferencePriceV2(SetReferencePriceV2Request) returns (SetReferencePriceV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetReferencePriceV2"
        };
    }

    // 根据skuID批量查询全部参考价信息
    //    rpc GetSkuReferencePriceMap(GetSkuReferencePriceMapRequest) returns (GetSkuReferencePriceMapResponse) {
    //        option (google.api.http) = {
    //            post : "/ceres/merchandise/MerchandiseService/GetSkuReferencePriceMap"
    //        };
    //    }

    rpc GetManyReferencePrice(GetManyReferencePriceRequest) returns (GetManyReferencePriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyReferencePrice"
        };
    }
    // 根据skuId和quotationId获取周期报价单上各子报价单的报价作为参考
    rpc GetSkuReferencePricesFromPeriodicQuotation(GetSkuReferencePricesFromPeriodicQuotationRequest) returns (GetSkuReferencePricesFromPeriodicQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuReferencePricesFromPeriodicQuotation"
        };
    }

    // 根据商品和报价单位获取相关报价/报价单位作为参考
    rpc GetSkuReferencePrices(GetSkuReferencePricesRequest) returns (GetSkuReferencePricesResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuReferencePrices"
        };
    }

    // 根据商品和报价单位获取相关报价/报价单位作为参考
    rpc GetSkuReferPurAndInPrices(GetSkuReferPurAndInPricesRequest) returns (GetSkuReferPurAndInPricesResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuReferPurAndInPrices"
        };
    }

    // 根据sku、供应商、参考价类型，获取参考价
    rpc GetSkuReferencePricesByType(GetSkuReferencePricesByTypeRequest) returns (GetSkuReferencePricesByTypeResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuReferencePricesByType"
        };
    }

    
/****************** 菜谱相关 ******************/

    // 餐次时间配置
    rpc ListMenuPeriodGroup(ListMenuPeriodGroupRequest) returns (ListMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListMenuPeriodGroup"
        };
    }
    rpc CreateMenuPeriodGroup(CreateMenuPeriodGroupRequest) returns (CreateMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateMenuPeriodGroup"
        };
    }
    rpc UpdateMenuPeriodGroup(UpdateMenuPeriodGroupRequest) returns (UpdateMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateMenuPeriodGroup"
        };
    }
    rpc DeleteMenuPeriodGroup(DeleteMenuPeriodGroupRequest) returns (DeleteMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteMenuPeriodGroup"
        };
        option (common.options.annotation) = {
            codes : "MENU_PERIOD_GROUP_ID_BIND_WITH_BUDGET"
        };
    }
    rpc GetManyMenuPeriodGroup(GetManyMenuPeriodGroupRequest) returns (GetManyMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyMenuPeriodGroup"
        };
    }
    rpc GetManyMenuPeriodGroupByName(GetManyMenuPeriodGroupByNameRequest) returns (GetManyMenuPeriodGroupByNameResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyMenuPeriodGroupByName"
        };
    }
    rpc ListMenuDetail(ListMenuDetailRequest) returns (ListMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListMenuDetail"
        };
    }
    rpc CreateMenuDetail(CreateMenuDetailRequest) returns (CreateMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateMenuDetail"
        };
    }
    rpc UpdateMenuDetail(UpdateMenuDetailRequest) returns (UpdateMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateMenuDetail"
        };
    }
    rpc ExportMenuDetail(ExportMenuDetailRequest) returns (ExportMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportMenuDetail"
        };
    }
    rpc ImportMenuDetail(ImportMenuDetailRequest) returns (ImportMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ImportMenuDetail"
        };
    }
    rpc LockMenuPeriodGroup(LockMenuPeriodGroupRequest) returns (LockMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/LockMenuPeriodGroup"
        };
    }
    rpc UnlockMenuPeriodGroup(UnlockMenuPeriodGroupRequest) returns (UnlockMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UnlockMenuPeriodGroup"
        };
    }

    // eshop 餐次
    rpc GetManyEshopMenuPeriodGroup(GetManyEshopMenuPeriodGroupRequest) returns (GetManyEshopMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyEshopMenuPeriodGroup"
        };
    }
    rpc ListEshopMenuPeriodGroup(ListEshopMenuPeriodGroupRequest) returns (ListEshopMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListEshopMenuPeriodGroup"
        };
    }
    rpc CreateEshopMenuPeriodGroup(CreateEshopMenuPeriodGroupRequest) returns (CreateEshopMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateEshopMenuPeriodGroup"
        };
    }
    rpc UpdateEshopMenuPeriodGroup(UpdateEshopMenuPeriodGroupRequest) returns (UpdateEshopMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateEshopMenuPeriodGroup"
        };
    }
    rpc DeleteEshopMenuPeriodGroup(DeleteEshopMenuPeriodGroupRequest) returns (DeleteEshopMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteEshopMenuPeriodGroup"
        };
    }
    rpc BatchCreateEshopMenuPeriodGroup(BatchCreateEshopMenuPeriodGroupRequest) returns (BatchCreateEshopMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchCreateEshopMenuPeriodGroup"
        };
    }
    //eshop获取班级绑定的菜谱，1对多
    rpc GetCustomerMenus(GetCustomerMenusRequest) returns (GetCustomerMenusResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerMenus"
        };
    }
    //eshop获取班级绑定的菜谱，1对多
    rpc GetManyCustomerMenus(GetManyCustomerMenusRequest) returns (GetManyCustomerMenusResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyCustomerMenus"
        };
    }
    //查询绑定了同菜谱的班级
    rpc GetCustomersForMenuRelation(GetCustomersForMenuRelationRequest) returns (GetCustomersForMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomersForMenuRelation"
        };
    }
    //查询学生餐餐谱
    rpc ListEshopMenu(ListEshopMenuRequest) returns (ListEshopMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListEshopMenu"
        };
    }
    
/**
    废弃
    */
    //    rpc GetCustomerMenu(GetCustomerMenuRequest) returns (GetCustomerMenuResponse) {
    //        option (google.api.http) = {
    //            post : "/ceres/merchandise/MerchandiseService/GetCustomerMenu"
    //        };
    //    }
    
/**
    废弃
     */
    //    rpc GetManyCustomerMenu(GetManyCustomerMenuRequest) returns (GetManyCustomerMenuResponse) {
    //        option (google.api.http) = {
    //            post : "/ceres/merchandise/MerchandiseService/GetManyCustomerMenu"
    //        };
    //    }
    //
    rpc GetMenu(GetMenuRequest) returns (GetMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetMenu"
        };
    }
    rpc GetManyMenu(GetManyMenuRequest) returns (GetManyMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyMenu"
        };
    }
    rpc ListMenu(ListMenuRequest) returns (ListMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListMenu"
        };
    }
    //查询菜谱基本信息
    rpc ListSimpleMenu(ListSimpleMenuRequest) returns (ListSimpleMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSimpleMenu"
        };
    }
    //零时使用，后面迁移到eshop项目
    rpc SaveWideMenu(SaveWideMenuRequest) returns (SaveWideMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SaveWideMenu"
        };
    }
    //零时使用，后面迁移到eshop项目
    rpc CheckMenuCategoryForWideMenu(CheckMenuCategoryForWideMenuRequest) returns (CheckMenuCategoryForWideMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CheckMenuCategoryForWideMenu"
        };
    }
    //零时使用，后面迁移到eshop项目
    rpc DeleteWideMenu(DeleteWideMenuRequest) returns (DeleteWideMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteWideMenu"
        };
    }
    //
    rpc CreateMenu(CreateMenuRequest) returns (CreateMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateMenu"
        };
    }
    rpc UpdateMenu(UpdateMenuRequest) returns (UpdateMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateMenu"
        };
    }
    rpc DeleteMenu(DeleteMenuRequest) returns (DeleteMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteMenu"
        };
    }
    // 批量启用/禁用/删除菜谱
    rpc BatchUpdateMenu(BatchUpdateMenuRequest) returns (BatchUpdateMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchUpdateMenu"
        };
    }
    rpc GetEshopMenuDetail(GetEshopMenuDetailRequest) returns (GetEshopMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetEshopMenuDetail"
        };
    }
    //查询菜谱详情,暂时使用，后面迁移到eshop项目
    rpc ListEshopMenuDetail(ListEshopMenuDetailRequest) returns (ListEshopMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListEshopMenuDetail"
        };
    }
    //保存菜谱详情,暂时使用，后面迁移到eshop项目
    rpc ListSimpleMenuDetail(ListSimpleMenuDetailRequest) returns (ListSimpleMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSimpleMenuDetail"
        };
    }
    //保存菜谱详情,暂时使用，后面迁移到eshop项目
    rpc SaveEshopMenuDetail(SaveEshopMenuDetailRequest) returns (SaveEshopMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SaveEshopMenuDetail"
        };
    }
    rpc CreateEshopMenuDetail(CreateEshopMenuDetailRequest) returns (CreateEshopMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateEshopMenuDetail"
        };
    }
    rpc UpdateEshopMenuDetail(UpdateEshopMenuDetailRequest) returns (UpdateEshopMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateEshopMenuDetail"
        };
    }
    rpc DeleteEshopMenuDetail(DeleteEshopMenuDetailRequest) returns (DeleteEshopMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteEshopMenuDetail"
        };
    }
    rpc BatchSaveEshopMenuDetail(BatchSaveEshopMenuDetailRequest) returns (BatchSaveEshopMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchSaveEshopMenuDetail"
        };
    }

    rpc GetMenuDetailSku(GetMenuDetailSkuRequest) returns (GetMenuDetailSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetMenuDetailSku"
        };
    }
    rpc ListMenuDetailSku(ListMenuDetailSkuRequest) returns (ListMenuDetailSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListMenuDetailSku"
        };
    }
    rpc CreateMenuDetailSku(CreateMenuDetailSkuRequest) returns (CreateMenuDetailSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateMenuDetailSku"
        };
    }
    rpc UpdateMenuDetailSku(UpdateMenuDetailSkuRequest) returns (UpdateMenuDetailSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateMenuDetailSku"
        };
    }
    rpc DeleteMenuDetailSku(DeleteMenuDetailSkuRequest) returns (DeleteMenuDetailSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteMenuDetailSku"
        };
    }
    //废弃，请勿使用，请使用SaveCustomerMenuRelation代替
    rpc SetCustomerMenuRelation(SetCustomerMenuRelationRequest) returns (SetCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetCustomerMenuRelation"
        };
    }
    //废弃，请勿使用，请使用SaveCustomerMenuRelationForCustomers代替
    rpc UnsetCustomerMenuRelation(UnsetCustomerMenuRelationRequest) returns (UnsetCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UnsetCustomerMenuRelation"
        };
    }
    //多个班级和一个菜谱的绑定关系
    rpc SaveCustomerMenuRelationForCustomers(SaveCustomerMenuRelationForCustomersRequest) returns (SaveCustomerMenuRelationForCustomersResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SaveCustomerMenuRelationForCustomers"
        };
    }
    //一个班级和多个菜谱的绑定关系
    rpc SaveCustomerMenuRelationForMenus(SaveCustomerMenuRelationForMenusRequest) returns (SaveCustomerMenuRelationForMenusResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SaveCustomerMenuRelationForMenus"
        };
    }
    rpc ListCustomerMenuRelation(ListCustomerMenuRelationRequest) returns (ListCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCustomerMenuRelation"
        };
    }
    rpc GetCustomerMenuRelation(GetCustomerMenuRelationRequest) returns (GetCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerMenuRelation"
        };
    }
    // 同步菜谱菜谱
    rpc SyncMenuDetail(SyncMenuDetailRequest) returns (SyncMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SyncMenuDetail"
        };
    }

    
/****************** 收藏夹相关 ******************/

    rpc CreateFavorite(CreateFavoriteRequest) returns (CreateFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateFavorite"
        };
    }

    rpc UpdateFavorite(UpdateFavoriteRequest) returns (UpdateFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateFavorite"
        };
    }

    rpc DeleteFavorite(DeleteFavoriteRequest) returns (DeleteFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteFavorite"
        };
    }

    rpc ListFavorite(ListFavoriteRequest) returns (ListFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListFavorite"
        };
    }

    rpc CreateManyFavoriteSkuV2(CreateManyFavoriteSkuV2Request) returns (CreateManyFavoriteSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateManyFavoriteSkuV2"
        };
    }

    rpc DeleteManyFavoriteSkuV2(DeleteManyFavoriteSkuV2Request) returns (DeleteManyFavoriteSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteManyFavoriteSkuV2"
        };
    }

    rpc ListFavoriteSkuV2(ListFavoriteSkuV2Request) returns (ListFavoriteSkuV2Response) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListFavoriteSkuV2"
        };
    }
    
/****************** 就餐日历相关 ******************/

    // 查询就餐日历
    rpc GetManyMealCalendar(GetManyMealCalendarRequest) returns (GetManyMealCalendarResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyMealCalendar"
        };
    }

    // 新增或更新就餐日历
    rpc CreateOrUpdateMealCalendar(CreateOrUpdateMealCalendarRequest) returns (CreateOrUpdateMealCalendarResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateOrUpdateMealCalendar"
        };
    }

    
/****************** 组合商品相关 ******************/
    //导入组合商品
    rpc ImportCombineSku(ImportCombineSkuRequest) returns (ImportCombineSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ImportCombineSku"
        };
    }
    //获取导入组合商品的模板
    rpc GetImportCombineSkuTemplate(GetImportCombineSkuTemplateRequest) returns (GetImportCombineSkuTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetImportCombineSkuTemplate"
        };
    }
    //导出组合商品
    rpc ExportCombineSku(ExportCombineSkuRequest) returns (ExportCombineSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportCombineSku"
        };
    }

    rpc ListBestSaleSku(ListBestSaleSkuRequest) returns (ListBestSaleSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListBestSaleSku"
        };
    }
    //批量更新商品装箱规格
    rpc BatchUpdateSkuPackUnit(BatchUpdateSkuPackUnitRequest) returns (BatchUpdateSkuPackUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchUpdateSkuPackUnit"
        };
    }

    //批量更新供应商
    rpc BatchUpdateSkuSupplier(BatchUpdateSkuSupplierRequest) returns (BatchUpdateSkuSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchUpdateSkuSupplier"
        };
    }

    
/****************** 行情数据相关 ******************/
    rpc SyncMarketData(SyncMarketDataRequest) returns (SyncMarketDataResponse) {
    }

    rpc ListMarketData(ListMarketDataRequest) returns (ListMarketDataResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListMarketData"
        };
    }

    
/******************* 刷数据脚本 *********************/
    rpc BatchUpdateMinOrderNumber(BatchUpdateMinOrderNumberRequest) returns (BatchUpdateMinOrderNumberResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchUpdateMinOrderNumber"
        };
    }

    // 报价单批量关联全部商品
    rpc BatchRelatedAllSku(BatchRelatedAllSkuRequest) returns (BatchRelatedAllSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchRelatedAllSku"
        };
    }

    // 批量更新报价单信息
    rpc BatchUpdateBasicPriceItemInfo(BatchUpdateBasicPriceItemInfoRequest) returns (BatchUpdateBasicPriceItemInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchUpdateBasicPriceItemInfo"
        };
    }

    
/******************* 批量去掉sku的自定义单位和价格的定价下单单位 *********************/
    rpc BatchCleanSkuDiyUnit(BatchCleanSkuDiyUnitRequest) returns (BatchCleanSkuDiyUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchCleanSkuDiyUnit"
        };
    }

    rpc AgreementPriceCheck(AgreementPriceCheckRequest) returns (AgreementPriceCheckResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/AgreementPriceCheck"
        };
    }
    rpc ManualSyncTemporaryProducAndUnitToOrder(ManualSyncTemporaryProducAndUnitToOrderRequest) returns (ManualSyncTemporaryProducAndUnitToOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ManualSyncTemporaryProducAndUnitToOrder"
        };
    }
    rpc CleanCategory(CleanCategoryRequest) returns (CleanCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanCategory"
        };
    }
    rpc CleanSpu(CleanSpuRequest) returns (CleanSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanSpu"
        };
    }
    rpc CleanSku(CleanSkuRequest) returns (CleanSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanSku"
        };
    }
    rpc CleanQuotation(CleanQuotationRequest) returns (CleanQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanQuotation"
        };
    }
    rpc CleanBasicPrice(CleanBasicPriceRequest) returns (CleanBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanBasicPrice"
        };
    }
    rpc CleanFavorite(CleanFavoriteRequest) returns (CleanFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanFavorite"
        };
    }
    rpc CleanFavoriteSku(CleanFavoriteSkuRequest) returns (CleanFavoriteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanFavoriteSku"
        };
    }
    rpc CleanMenuPeriodGroup(CleanMenuPeriodGroupRequest) returns (CleanMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanMenuPeriodGroup"
        };
    }
    rpc CleanMenuDetail(CleanMenuDetailRequest) returns (CleanMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanMenuDetail"
        };
    }
    rpc CleanCustomerQuotationRelation(CleanCustomerQuotationRelationRequest) returns (CleanCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanCustomerQuotationRelation"
        };
    }
    rpc RepeatedSkuUnitRate(RepeatedSkuUnitRateRequest) returns (RepeatedSkuUnitRateResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/RepeatedSkuUnitRate"
        };
    }
    rpc MatchSku(MatchSkuRequest) returns (MatchSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/MatchSku"
        };
    }

    // 同一个sku，不同版本之间的单位转换率
    rpc SameSkuUnitRate(SameSkuUnitRateRequest) returns (SameSkuUnitRateResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SameSkuUnitRate"
        };
    }

    /////////////////////营养成分表/SkuNutrition////////////////////
    
/**获取营养成本表*/
    rpc GetSkuNutrition(GetSkuNutritionRequest) returns (GetSkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuNutrition"
        };
    }
    
/**保存营养成分表*/
    rpc SaveSkuNutrition(SaveSkuNutritionRequest) returns (SaveSkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SaveSkuNutrition"
        };
    }
    
/**清空营养成分表缓存*/
    rpc CleanSkuNutrition(CleanSkuNutritionRequest) returns (CleanSkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanSkuNutrition"
        };
    }
    
/**营养素列表*/
    rpc ListNutrition(ListNutritionRequest) returns (ListNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListNutrition"
        };
    }
    
/**添加营养素*/
    rpc SaveNutrition(SaveNutritionRequest) returns (SaveNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SaveNutrition"
        };
    }
    
/**删除营养素*/
    rpc DeleteNutrition(DeleteNutritionRequest) returns (DeleteNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteNutrition"
        };
    }
    
/**营养素单位*/
    rpc ListNutritionUnit(ListNutritionUnitRequest) returns (ListNutritionUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListNutritionUnit"
        };
    }
    
/**导入营养成分表*/
    rpc ImportSkuNutrition(ImportSkuNutritionRequest) returns (ImportSkuNutritionResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ImportSkuNutrition"
        };
    }
    ////////////////////////////////商品备注///////////////////////////////
    
/**商品备注列表*/
    rpc GetManySkuRemark(GetManySkuRemarkRequest) returns (GetManySkuRemarkResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySkuRemark"
        };
    }
    
/**保存商品备注*/
    rpc SaveSkuRemark(SaveSkuRemarkRequest) returns (SaveSkuRemarkResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SaveSkuRemark"
        };
    }
    
/**清空商品备注*/
    rpc CleanSkuRemark(CleanSkuRemarkRequest) returns (CleanSkuRemarkResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CleanSkuRemark"
        };
    }

    rpc WriteBackSkuCost(WriteBackSkuCostRequest) returns (WriteBackSkuCostResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/WriteBackSkuCost"
        };
    }

    
/**
    * 查找Sku，返回基本信息，仅限用于输入框的搜索，不要在此方法加任何其他关联逻辑，无搜索条件返回空，优先查询ES，当ES查询异常时转入查询MYSQL
    */
    rpc ListSkuByQueryForSearch(ListSkuByQueryForSearchRequest) returns (ListSkuByQueryForSearchResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSkuByQueryForSearch"
        };
    }

    
/**精确查找sku，返回基础sku信息*/
    rpc ListSimpleSku(ListSimpleSkuRequest) returns (ListSimpleSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSimpleSku"
        };
    }

    rpc CopySkuFieldToTargetSku(CopySkuFieldToTargetSkuRequest) returns (CopySkuFieldToTargetSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CopySkuFieldToTargetSku"
        };
    }

    rpc ListSimpleQuotation(ListSimpleQuotationRequest) returns (ListSimpleQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSimpleQuotation"
        };
    }

    rpc ListPackUnit(ListPackUnitRequest) returns (ListPackUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListPackUnit"
        };
    }
    rpc SavePackUnit(SavePackUnitRequest) returns (SavePackUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SavePackUnit"
        };
    }

    // 第三方同步采购协议价
    rpc SyncQuotationBasicPrice(SyncQuotationBasicPriceRequest) returns (SyncQuotationBasicPriceResponse) {
    }

    // 同步创建商品
    rpc SyncCreateSku(SyncCreateSkuRequest) returns (SyncCreateSkuResponse) {
    }
    // 同步更新商品
    rpc SyncUpdateSku(SyncUpdateSkuRequest) returns (SyncUpdateSkuResponse) {
    }
    // 同步删除商品
    rpc SyncDeleteSku(SyncDeleteSkuRequest) returns (SyncDeleteSkuResponse) {
    }
    // 获取商品详情
    rpc GetDetailSku(GetDetailSkuRequest) returns (GetDetailSkuResponse) {
    }

    // 同步创建报价单
    rpc SyncCreateQuotation(SyncCreateQuotationRequest) returns (SyncCreateQuotationResponse) {
    }
    // 同步更新报价单
    rpc SyncUpdateQuotation(SyncUpdateQuotationRequest) returns (SyncUpdateQuotationResponse) {
    }
    // 同步删除报价单
    rpc SyncDeleteQuotation(SyncDeleteQuotationRequest) returns (SyncDeleteQuotationResponse) {
    }
    // 查询报价单详情
    rpc GetDetailQuotation(GetDetailQuotationRequest) returns (GetDetailQuotationResponse) {
    }

    // 同步创建报价单绑定商品
    rpc BindQuotationBasicPrice(BindQuotationBasicPriceRequest) returns (BindQuotationBasicPriceResponse) {
    }
    // 同步删除报价单绑定商品
    rpc DeleteBindQuotationBasicPrice(DeleteBindQuotationBasicPriceRequest) returns (DeleteBindQuotationBasicPriceResponse) {
    }

    // 报价单绑定客户
    rpc BindQuotationCustomer(BindQuotationCustomerRequest) returns (BindQuotationCustomerResponse) {
    }
    // 删除报价单绑定客户
    rpc DeleteBindQuotationCustomer(DeleteBindQuotationCustomerRequest) returns (DeleteBindQuotationCustomerResponse) {
    }

    /////////////////////////////////////////////最近报价、最近入库价、最近采购价、最近售价缓存////////////////////////////////////////
    //最近售价
    rpc GetSkuSalePricesCache(GetSkuSalePricesCacheRequest) returns (GetSkuSalePricesCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuSalePricesCache"
        };
    }
    //设置最近售价缓存
    rpc SetSkuSalePricesCache(SetSkuSalePricesCacheRequest) returns (SetSkuSalePricesCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetSkuSalePricesCache"
        };
    }
    //最近采购（供应商直供）
    rpc GetSkuPurchasePricesCache(GetSkuPurchasePricesCacheRequest) returns (GetSkuPurchasePricesCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuPurchasePricesCache"
        };
    }
    //最近入库（供应商直供）
    rpc GetSkuInStockPricesCache(GetSkuInStockPricesCacheRequest) returns (GetSkuInStockPricesCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuInStockPricesCache"
        };
    }
    //最近参考价（最近采购、最近入库都可使用该方法）
    rpc GetSkuReferencePricesCache(GetSkuReferencePricesCacheRequest) returns (GetSkuReferencePricesCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuReferencePricesCache"
        };
    }
    //最近报价
    rpc GetSkuBasicPricesCache(GetSkuBasicPricesCacheRequest) returns (GetSkuBasicPricesCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuBasicPricesCache"
        };
    }
    //内存搜索商品
    //搜索：商品名称（模糊）、编码（精确）、商品名拼音首字母（模糊）、商品名全拼（模糊）、商品别名（模糊）、客户商品别名（模糊）、客户商品编码(精确)、商品条码（精确）
    //排序：下单频次（倒序）、距离最短（升序）、搜索频次（倒序）、商品自身排序（倒序）
    rpc SearchSku(SearchSkuRequest) returns (SearchSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SearchSku"
        };
    }
    //初始化商品缓存
    rpc InitSkuCache(InitSkuCacheRequest) returns (InitSkuCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/InitSkuCache"
        };
    }
    //刷新商品缓存
    rpc RefreshSkuCacheData(RefreshSkuCacheDataRequest) returns (RefreshSkuCacheDataResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/RefreshSkuCacheData"
        };
    }
    //获取sku缓存信息
    rpc GetSkuCache(GetSkuCacheRequest) returns (GetSkuCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuCache"
        };
    }
    //设置sku下单数、搜索数
    rpc SetSkuCount(SetSkuCountRequest) returns (SetSkuCountResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetSkuCount"
        };
    }
}
enum SystemUnitId {
    S_UNSPECIFIED        = 0;
    SYSTEM_UNIT_ID_BEGIN = 200000;
}

enum SkuUnitId {
    SKU_UNIT_UNSPECIFIED = 0;
    SKU_UNIT_ID_BEGIN    = 100;
}

// 单位是什么类型
enum UnitType {
    UNIT_TYPE_UNSPECIFIED = 0;
    SYSTEM_UNIT           = 1; // 系统单位      存在系统单位表里
    SYSTEM_UNIT_ANCHOR    = 2; // 系统基准单位   系统单位表里的parent_id
    SKU_BASE_UNIT         = 3; // sku基本单位    sku基本单位的id就是sku.base_unit_id, 并且这个base_unit_id被同步到了ssu.base_unit_id。
    SSU_UNIT              = 4; // ssu包装单位   unit存在ssu里, unit就是ssu.unit。它id 就是ssu.unit.unit_id
    SSU_UNIT_ANCHOR       = 5; // ssu计量单位   sku自定义基准单位的id 就是ssu.unit.parent_id。
}

// 商品库需要添加
enum Optype {
    OP_UNSPECIFIED = 0;
    CREATE         = 1;
    UPDATE         = 2;
    DELETE         = 3;
}

enum ModuleType {
    M_UNSPECIFIED = 0;
    SORTING       = 1;
    ORDER         = 2;
    DISTRIBUTE    = 3;
    PURCHASE      = 4;
    STOCK         = 5;
}

// 定价公式模式
enum PricingFormula {
    PF_UNSPECIFIED = 0;
    DIY            = 1; // 自定义公式
    NONE           = 2; // 不设置公式
}
// 定价类型
enum PricingType {
    PT_UNSPECIFIED = 0;
    NORMAL         = 1; // 常规定价
    INTERVAL       = 2; // 区间定价
}
// 计算规则的计算方式
enum CalculateMethod {
    CM_UNSPECIFIED = 0; // 不设置计算规则，同时计算规则中的price不起作用
    FIX            = 1; // 固定
    MULTI          = 2; // 乘
    ADD            = 3; // 加
    SUB            = 4; // 减
    CUSTOMIZE      = 5; // 自定义公式
}

enum SkuSortField {
    UNSPECIFIED     = 0;
    SKU_NAME        = 1;  // 按商品名排序
    CUSTOMIZED_CODE = 2;  // 按照商品编码排序
    SKU_TYPE        = 3;  // 按商品类型排序
    CATEGORY        = 4;  // 按商品分类排序
    ON_SALE         = 5;  // 按销售状态排序
    SKU_ID          = 6;  // 按sku_id排序, 按商品创建时间排序
    CREATE_TIME     = 7;  // 按商品创建时间排序
    UPDATE_TIME     = 8;  // 按商品更新时间排序
    SORT_NUM        = 9;  // 按商品排序字段排序
    CATEGORY1_ID    = 10; // 按商品1级分类排序
    CATEGORY2_ID    = 11; // 按商品2级分类排序
    CATEGORY3_ID    = 12; // 按商品3级分类排序
}

enum QuotationSortField {
    QUOTATION_UNSPECIFIED = 0;
    QUOTATION_ID          = 1; // 按照报价单ID排序 、这个也是时间
    QUOTATION_SERIAL_NO   = 2; // 按照报价单ID排序
    INNER_NAME            = 3; // 对内简称排序
    SKU_COUNT             = 4; // sku数量排序
    CUSTOMER_COUNT        = 5; // 客户数量排序
    STATUS                = 6; // 状态排序
    START_TIME            = 7; // 根据开始时间排序
    ADVENT_STATE          = 8; // 根据临期状态排序
    CUSTOMER_SORT_NUM     = 9; // 排序字段排序
}

enum SkuBatchType {
    TYPE_UNSPECIFIED  = 0; // 有批次
    TYPE_MULT_BATCH   = 1; // 有批次
    TYPE_SINGLE_BATCH = 2; // 无批次
}

//最近售价
message SkuSalePriceCache {
    uint64 order_id            = 1;  //订单ID
    string serial_no           = 2;  //订单号
    uint64 order_time          = 3;  //订单时间
    uint64 receive_customer_id = 4;  //收货人
    string remark              = 5;  //订单详情商品备注
    uint64 sku_id              = 6;  //商品ID
    uint64 order_unit_id       = 7;  //下单单位ID
    string order_val           = 8;  //下单数
    uint64 fee_unit_id         = 9;  //定价单位ID
    string fee_val             = 10; //定价
}
//
message SkuReferencePriceCaches {
    repeated SkuReferencePriceCache sku_reference_prices = 1;
}
//参考价、入库价、采购价
message SkuReferencePriceCache {
    uint64 source_id     = 1;  //单据来源ID
    uint64 snapshot_time = 3;  //快照时间
    uint64 sku_id        = 6;  //商品ID
    uint64 unit_id       = 7;  //单位ID
    string price         = 8;  //单价
    uint64 supplier_id   = 9;  //供应商ID
    int32  type          = 10; //类型
}
//参考价过滤
message SkuReferencePriceFilter {
    int32   type = 1; //参考ReferencePrice.Type
    message SkuFilter {
        uint64 sku_id      = 1; //商品ID
        uint64 supplier_id = 2; //供应商ID，可选，不传取最新一条
    }
    repeated SkuFilter sku_filters = 2; //商品过滤
    uint64             period      = 3; //最近多少条价格，最大30条
    uint64             start_time  = 4; //开始时间，按时间段，和period二选一，优先period，按时间段只会取每天最新的一条
    uint64             end_time    = 5; //结束时间，按时间段，和period二选一，优先period，按时间段只会取每天最新的一条
}

//最近报价
message SkuBasicPriceCache {
    message BasicPrice {
        uint64 fee_unit_id   = 1; //定价单位ID
        string fee_val       = 2; //定价
        uint64 order_unit_id = 3; //下单单位
    }
    uint64              snapshot_time  = 1; //快照时间
    uint64              quotation_id   = 2; //报价单ID
    uint64              sku_id         = 3; //商品ID
    repeated BasicPrice basic_prices   = 4; //报价集合，每次都是全量的报价集合
    uint64              basic_price_id = 5; //报价ID
}

//搜索优化
//商品缓存
message SkuCache {
    uint64          sku_id                   = 1;
    string          name                     = 2;  // sku名字
    string          name_pinyin_first_letter = 3;  // sku名 的拼音首字母
    string          name_pinyin_letter       = 4;  // sku名 的拼音
    string          customize_code           = 5;  // 商品编码
    string          bar_code                 = 6;  // 条形码
    string          bar_code1                = 7;  // 备用条形码1
    string          bar_code2                = 8;  // 备用条形码2
    repeated string alias_name               = 9;  // 商品别名
    uint64          sort_num                 = 10; //商品自身的排序号
}
//客户商品缓存
message SkuCustomerAliasCache {
    uint64 sku_id         = 1; //商品ID
    uint64 customer_id    = 2; //客户ID
    string alias_name     = 3; //客户商品别名，多个商品别名用中文逗号分隔
    string customize_code = 4; // 商品编码
}

//最终排序
message SkuCacheSort {
    uint64 sku_id       = 1; //商品ID
    string name         = 2; //商品名称
    string alias_name   = 3; //商品别名（可能是商品自己的别名，也可能是客户商品别名）
    uint64 search_count = 4; //搜索次数
    uint64 order_count  = 5; //下单次数
    int64  index        = 6; //关键字索引，完全匹配index = -1
    uint64 sort_num     = 7; //商品自身的排序号
}
message SkuCount {
    uint64 search_count = 1;
    uint64 order_count  = 2;
}
message ImportSkuNutritionData {
    message Rows {
        repeated string cols = 1;
    }
    Rows              header     = 1; //表头
    map<uint64, Rows> row_map    = 2; //  表格内容
    repeated Rows     error_rows = 3; // 错误数据
}

// gRPC status codee
message Status {
    enum Code {
        CODE_UNSPECIFIED                  = 0;
        CATEGORY_EXISTS                   = 22220001;  // 相同的父分类下不能创建相同分类名
        PARENT_CATEGORY_NOT_EXISTS        = 22220002;  // 父分类不存在，不能创建分类
        PARENT_CATEGORY_CAN_NOT_CHANGE    = 22220003;  // 不能修改父分类
        CATEGORY_NOT_EXISTS               = 222200004; // 分类不存在
        PARAM_ERROR                       = 22220000;  // 异步参数错误
        NOT_CATEGORY_CAN_NOT_CHANGE       = 22220070;  // 默认的"未分类"不能修改
        CHILD_SKU_EXISTS                  = 22220005;  // 存在sku,不能删除分类
        SPU_EXISTS                        = 22220006;  // 相同的分类下不能创建相同spu名
        CATEGORY_LEVEL_LIMIT_FIVE         = 22220008;  // 分类层级限制5层
        CATEGORY_CANT_HAVE_SLASH          = 22220100;  // 分类名称禁止含有斜杠
        SKU_UNIT_DUPLICATE                = 22220019;  // 自定义单位重复
        SKU_UNIT_NUM_LIMIT                = 22220200;  // 自定义单位数量超出限制
        BASE_UNIT_CAN_NOT_CHANGE          = 22220033;  // SKU的基本单位不可变
        SKU_NOT_EXISTS                    = 22220009;  // SKU不存在
        SKU_EXISTS                        = 22220010;  // SKU已存在
        SKU_NAME_NOT_EXISTS               = 22220086;  // 商品名不存在
        SKU_ALIAS_AS_SHOP_NAME_NOT_EXISTS = 22220088;  // 别名与商品名冲突
        SKU_ALIAS_EXISTS                  = 22220084;  // 商品别名已存在
        SKU_ALIAS_MORE_LIMIT              = 22220090;  // 商品别名超出限制
        SKU_ALIAS_NAME_MORE_LIMIT         = 22220097;  // 商品别名长度过长
        SKU_PRICE_IS_NONE                 = 22220085;  // 商品价格为空
        SSU_EXISTS                        = 22220011;  // 相同的父SkU下不能创建相同ssu名
        CUSTOMIZE_CODE_EXISTS             = 22220012;  // 自定义编码已被占用
        INGREDIENT_UNIT_CANNOT_DELETE     = 22220013;  // 子商品的某个自定义单位已经被组合商品引用，无法删除该自定义单位
        BAR_CODE_EXISTS                   = 22220014;  // 商品条形码已被占用
        BAR_CODE1_EXISTS                  = 22220034;  // 商品备用条形码1已被占用
        BAR_CODE2_EXISTS                  = 22220035;  // 商品备用条形码2已被占用
        MULTI_BAR_CODE_EXISTS             = 22220036;  // 商品条形码重复
        INGREDIENT_CANNOT_DELETE          = 22220062;  // 子商品被组合商品引用时，无法从商品库中被删除
        INGREDIENT_NUM_LIMIT              = 22220060;  // 组合商品的子商品数不得小于1条，不能超过50条
        INGREDIENT_DUPLICATE              = 22220061;  // 组合商品内的子商品不能重复
        COMBINE_SSU_CAN_NOT_BE_INGREDIENT = 22220015;  // 组合商品不能做原料
        PACKAGE_SSU_CAN_NOT_BE_INGREDIENT = 22220016;  // 包材商品不能做原料
        INGREDIENT_NOT_EXIST              = 22220017;  // 子商品不存在
        INGREDIENT_UNIT_DO_NOT_EXIST      = 22220079;  // 子商品的单位不存在，请刷新重试
        PACKAGE_SKU_NOT_EXIST             = 22220083;  // 包材不存在

        SSU_NOT_EXIST                                          = 22220018; // 商品不存在
        MENU_DETAIL_SINGLE_SSU_NEED_DEFAULT_PRICE              = 22220020; // 菜谱中单品必须有默认价格
        UNIT_TYPE_CAN_NOT_USE                                  = 22220021; // 这个类型的单位不可用
        COMBINE_SSU_IN_MENU_CAN_NOT_CHANGE_INGREDIENT_OPTIMISE = 22220022; // 菜谱中的组合商品不能改变组成原料

        SSU_RATIO_RATE_TYPE_ERROR               = 22220023; // 组合商品里原料中的单位数量字段类型不对
        INGREDIENT_CANT_UNBIND_QUOTATION        = 22220074; // 若组合商品已经绑定了报价单A，则其子商品（包括单位）无法从报价单A中解绑
        INGREDIENT_NOT_BIND_QUOTATION           = 22220071; // 组成商品未绑定报价单
        CREATE_BASIC_PRICE_ERROR                = 22220072; // 创建价格已存在
        INGREDIENT_SKU_ON_SALE_LESS_THAN_2      = 22220075; // 组合商品的在售子商品数不足2条，无法启售
        INGREDIENT_SKU_ON_SHELF_LESS_THAN_2     = 22220076; // 组合商品的上架子商品数不足2条，无法上架
        BASIC_PRICE_ITEMS_OVER_MAX_NUM          = 22220077; // 商品最多在同一个报价单中设置20个价格
        INGREDIENT_CANT_BIND_QUOTATION          = 22220102; // 组合商品已关联报价单，且此下单单位的子商品在报价单中为时价商品，不能添加
        INGREDIENT_CANT_CHANGE_TO_CURRENT_PRICE = 22220103; // 此下单单位的商品存在于组合商品中，已关联报价单，不能被改为时价商品

        NOT_FOUND_PURCHASER            = 22220024; // 未找到采购员
        NOT_FOUND_SUPPLIER             = 22220025; // 未找到供应商
        NEED_PROCESS_TYPE              = 22220026; // 加工商品需要加工类型
        PRODUCTION_UNIT_CAN_NOT_CHANGE = 22220027; // 生产单位不能修改
        PRODUCTION_UNIT_TYPE_ERROR     = 22220028; // 生产单位类型错误
        PRODUCTION_RATE_VALUE_ERROR    = 22220029; // 生产单位系数值错误

        CUSTOMER_NOT_BAND_QUOTATION                       = 22220030; // 客户未绑定报价单
        DUPLICATE_QUOTATION_NAME                          = 22220031; // 报价单内部名字不能重复
        CANNOT_DELETE_DEFAULT_QUOTATION                   = 22220032; // 不能删除默认报价单
        PERIODIC_QUOTATION_TIME_CONFLICT                  = 22220091; // 周期子报价单时间冲突
        CHILD_QUOTATION_UNAVAILABLE                       = 22220092; // 无进行中的子报价单
        CALCULATE_FORMULA_ERROR                           = 22220087; // 计算错误或者计算结果小于0，请检查定价公式
        DUPLICATE_QUOTATION_NAME_BETWEEN_BROTHERS         = 22220093; // 同一父报价单下的子报价单不允许重名
        DUPLICATE_QUOTATION_NAME_BETWEEN_PARENTS          = 22220089; // 父报价单之间不允许重名
        DUPLICATE_QUOTATION_NAME_BETWEEN_PARENT_AND_CHILD = 22220094; // 父子报价单之间不能重名
        CUSTOMER_QUOTATION_TIME_CONFLICT                  = 22220099; // 客户协议单时间冲突
        DUPLICATE_CUSTOMER_QUOTATION_NAME                 = 22220104; // 客户协议单协议规则名字不能重复
        CONFLICT_TIME_CUSTOMER_QUOTATION                  = 22220105; // 客户协议单时间冲突

        DUPLICATE_FAVORITE_SSU         = 22220040; // 收藏夹已收藏过此商品
        CANNOT_UPDATE_DEFAULT_FAVORITE = 22220041; // 默认收藏夹不可以修改
        CANNOT_FIND_FAVORITE           = 22220042; // 收藏夹不存在

        ASYNC_TASK_PARAM_ERROR            = 22220050; // 异步参数错误
        QUOTATION_CUSTOMER_TYPE_NOT_MATCH = 22220051; // 报价单用户类型不匹配
        QUOTATION_NOT_EXISTS              = 22220052; // 报价单不存在

        CONFLICT_QUOTATION                        = 22220053; // 报价冲突,冲突的报价编码为 xxx,xxx,xxx,xxx
        DEFAULT_QUOTATION_NOT_EXISTS_IS_NECESSARY = 22220054; // 默认报价单必须存在
        CONFLICT_QUOTATION_SSU                    = 22220055; // 报价单内商品重复
        DELETE_BASIC_PRICE_RELATION_DATA          = 22220056; // 删除关联
        PRICE_DECIMAL_POINT_OVER_LIMIT            = 22220057; // 数字限制整数10位，小数2位
        COMBINE_SSU_SINGLE_PRICE_INCOMPLETE       = 22220058; // 组合商品绑定报价单，单品的价格不完整
        MENU_PERIOD_GROUP_ID_BIND_WITH_BUDGET     = 22220059; // 餐次已经绑定了预算
        QUOTATION_SKU_UNIT_DUPLICATE              = 22220073; // 报价单里商品的同一个单位价格只能设置一个

        UNIT_NOT_EXISTS                              = 22220007; // 单位不存在, 请刷新
        UNIT_DUPLICATE                               = 22220063; // 单位重复
        SKU_ADVOCATE_COMPLEMENTARY_UNIT_NOT_MATCHING = 22220082; // SKU主辅单位与所传单位不匹配

        SYS_UNIT_CANT_DELETE         = 22220064; // 系统单位不能删除
        UNIT_USED_BY_SKU_CANT_DELETE = 22220065; // 单位已被SKU使用，不能删除
        SYS_UNIT_CANT_UPDATE         = 22220066; // 系统单位不能修改
        UNIT_TYPE_NOT_SAME           = 22220078; // 单位类型不一致

        CODE_NO_CUSTOMER_MENU_RELATION   = 22220067; // 客户未绑定菜谱
        CODE_PARAM_CUSTOMERID_ERROR      = 22220068; // 客户ID为空
        CODE_MENU_NOT_EXISTS             = 22220069; // 菜谱不存在
        CODE_MENU_PERIOD_NAME_EXISTS     = 22220080; // 餐次名称重复
        CODE_MENU_PERIOD_IS_USED_IN_MENU = 22220081; // 餐次已在菜谱中使用
        CODE_MENU_INNER_NAME_EXISTS      = 22220098; // 菜谱名称重复

        CODE_SKU_LEVEL_EXIST                  = 222200100; // 商品等级名称重复
        CODE_SKU_LEVEL_NAME_HAVE_BLANK_SPACE  = 22220101;  // 商品等级不能为空
        IMPORT_SPECIAL_BASIC_PRICE_STRING_ERR = 22220095;  // 导入协议价输入字段存在错误
        MARCHING_ALIAS_MORE_GOODS             = 22220096;  // 商品别名匹配到多个商品
        TEMPORARY_UNIT_CANNOT_DELETE          = 22220110;  // 临时单位不能删除

        NUTRITION_NAME_EXIST = 22220111; // 营养素名称已存在
        FEEPRICE_NOT_LT_ZERO = 22220116; // 商品单价不能为负数
        /////////////////////////////////////////////////////////
        READ_EXCEL_ERROR     = 22220112; // 表格读取失败
        EXCEL_NULL           = 22220113; // 表格内容为空
        DOWNLOAD_EXCEL_ERROR = 22220114; // 下载表格失败
        OPEN_EXCEL_ERROR     = 22220115; // 打开表格失败

        DEFAULT_QUOTATION_SYNC_NO_SUPPORT = 22220117; // 当前绑定默认报价单，不可同步价格
        SKU_UNIT_CONFLICT                 = 22220118; // 自定义单位与辅助单位不能重名
        CREATE_BASIC_PRICE_DETAIL_ERROR   = 22220119; // 创建Detail价格已存在

        SKU_SECOND_BASE_UNIT_RATION_EMPTY = 22220120; // 商品辅助单位比例为空
        SKU_UNIT_RATION_EMPTY             = 22220121; // 自定义单位比例为空

        INVALID_ARGUMENT                  = 22220122; // 无效参数
        SKU_BATCH_TYPE_UPDATE_CHECK_ERROR = 22220123; // 无法修改商品批次类型,存在未完成的仓储单据

        PACK_NAME_NULL_ERROR = 22220124; // 装箱规格名称为空
        PACK_NAME_DUMP_ERROR = 22220125; // 装箱规格名称重复
        PACK_UNIT_ID_DUMP_ERROR = 22220126; // 装箱规格ID重复
        PACK_UNIT_UNAVAIABLE_ERROR = 22220127; // 装箱规格单位只能是基本单位组、复制单位组
        PACK_UNIT_ONLY_ONE_DEFAULT_ERROR = 22220128; // 只能一个默认装箱规格

        SKU_MANAGE_INVENTORY_DOC_IS_EXIST = 22220130; // 管理域商品存在单据
        SKU_MANAGE_INVENTORY_STOCK_IS_EXIST = 22220131; // 管理域商品存在库存
        SKU_INVENTORY_STOCK_IS_EXIST = 22220132; // 商品在仓库系统存在库存
        SKU_INVENTORY_SHEET_IS_EXIST = 22220133; // 商品存在未完成的单据

    }

    message SkuIdUnitId {
        uint64 sku_id  = 1;
        uint64 unit_id = 2;
        uint64 quotation_id =   3;
    }
    SkuIdUnitId  sku_unit_id    = 1;
    BasicPriceId basic_price_id = 2;

    repeated string conflict_quotation_serial_nos = 3;
    repeated uint64 conflict_ids = 4;
}

message Unit {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_MERCHANDISE_UNIT;
    option (dao.is_common)       = true;
    option (dao.auto_send_event) = true;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };

    enum Type {
        T_UNSPECIFIED = 0;
        LENGTH        = 1; //长度
        AREA          = 2; //面积
        VOLUME        = 3; //容积|体积
        MASS          = 4; //质量|重量
        COUNT         = 5; //数量repeated Ssu Ssu = 2;
    }
    // @inject_tag: gorm:"primaryKey"
    uint64 unit_id     = 1; // 主键
    uint64 status      = 2; // 状态bitmap
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id = 12; // 如有则表示是企业自定义单位

    string name       = 20 [ (validate.rules).string = {min_len : 1} ];
    string rate       = 21 [ (validate.rules).string = {min_len : 1} ]; // id/parent_id 单位是「3斤/袋」的含义是 「3斤= 1袋」，所以比率（unit.rate） =「1袋/1斤 = 3」
    Type   type       = 22;
    uint64 parent_id  = 23 [ (validate.rules).uint64 = {gte : 0} ]; // 基本单位
    uint64 country_id = 24;                                         // 国家编码，如有则表示该单位仅适用于该国家
    // @inject_tag: gorm:"default:false"
    bool   is_temporary_unit = 91; // 是否是临时单位
    uint64 creator_id        = 94; // 单位创建者ID
    string creator_name      = 95; // 单位创建者名称
    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message Category {
    option (dao.partition_count) = 100;
    option (dao.auto_send_event) = true;
    option (dao.model_type)      = TYPE_MERCHANDISE_CATEGORY;
    // @inject_tag: gorm:"primaryKey"
    uint64 category_id = 1; // 主键
    uint64 status      = 2; // 状态bitmap
    uint64 revision    = 3; // 版本 其实并没有版本
    uint64 create_time = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id;"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:parent_id;"
    uint64 parent_id          = 11 [ (validate.rules).uint64 = {gte : 0} ]; // 一级分类的parent_id 是 0
    uint64 source_category_id = 12;                                         // 由平台同步的分类有此字段
    uint64 source_group_id    = 13;                                         // 平台同步的分类有此字段,源sku的group_id
    // @inject_tag: gorm:"INDEX:station_id;default:0"
    uint64 station_id = 14; //集团化之后商品分类属于站点或集团，增加station_id

    string name     = 20 [ (validate.rules).string = {min_len : 1} ];
    string icon     = 22; //不影响版本
    uint32 rank     = 23; //不影响版本
    uint32 level    = 24; // 层级
    uint32 sort_num = 25; // 分类排序，小的在前，大的在后

    // @inject_tag: gorm:"-"
    BasicPriceItem.PriceCalculateRule price_calculate_rule = 26; // 客户协议价在分类上的计算规则
    // @inject_tag: gorm:"-"
    BasicPriceItem.PriceIntervals price_intervals = 27; // 客户协议价 区间定价
    // @inject_tag: gorm:"-"
    BasicPriceItem.PRICINGFORMULA pricing_formula = 28; // 公式类型
    // @inject_tag: gorm:"-"
    BasicPriceItem.PRICINGTYPE pricing_type = 29; // 是否设置公式

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

// 内部分类 用于同步部分客户定制化需求中的分类 如德保的成本分类
message InternalCategory {
    option (dao.partition_count) = 100;
    // @inject_tag: gorm:"primaryKey"
    uint64 internal_category_id = 1; // 主键
    uint64 create_time          = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    uint64 group_id    = 10;
    // @inject_tag: gorm:"INDEX:parent_id;"
    uint64 parent_id = 11 [ (validate.rules).uint64 = {gte : 0} ]; // 一级分类的parent_id 是 0
    string name      = 20 [ (validate.rules).string = {min_len : 1} ];

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message FinanceCategory {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_MERCHANDISE_TAX_ID;
    //option (dao.sync_es)         = true;

    // @inject_tag: gorm:"primaryKey"
    uint64 finance_category_id = 1; // 主键

    uint64 revision    = 3; // 版本 其实并没有版本
    uint64 create_time = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    string name      = 20 [ (validate.rules).string = {min_len : 1} ];
    uint64 parent_id = 21 [ (validate.rules).uint64 = {gte : 0} ]; // 一级分类的parent_id 是 0

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}
// 每个订单都需要存spu版本和Sku版本/SkuId(具体看Sku的信息要不要冗余到订单)
// Sku的存在只是因为库存
// 这个只是一个结构，不是一个表

message Spu {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_SPU;
    //option (dao.sync_es)         = true;

    // @inject_tag: gorm:"primaryKey"
    uint64 spu_id      = 1; // 主键
    uint64 status      = 2; // 状态bitmap
    uint64 revision    = 3; // 版本 没有版本
    uint64 create_time = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id        = 10;
    uint64 parent_id       = 11 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 source_spu_id   = 12; // 平台同步的spu有此字段
    uint64 source_group_id = 13; // 平台同步的spu有此字段,源sku的group_id

    string name = 20 [ (validate.rules).string = {min_len : 1} ];
    string icon = 22; //不影响版本
    uint32 rank = 23; //不影响版本 默认create_time排序

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

//装箱规格、装箱单位
message PackUnit {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_MERCHANDISE_PACK_UNIT;
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 pack_unit_id         =   1;  //装箱单位id
    // @inject_tag: gorm:"INDEX:create_time"
    uint64 create_time = 2; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 3; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 4; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 5;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 6; //站点ID，集团化之后商品属于集团或站点

    string pack_name            =   20;  //装箱名称
    string pack_rate            =   21;  //装箱单位的规格，现在默认是1
    uint64 unit_id              =   22;  //单位id，系统可选单位的id
    string rate                 =   23;  //装箱规格
    bool is_default             =   24;  //是否默认
    bool is_switch              =   25;  //是否支持换算小规格

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields  = 100000 [(common.es_properties_type) = ESPROPERTIESTYPE_JOIN]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

// sku 的
message Sku {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_SKU;
    option (dao.send_event)      = {
             auto_send_event : true,
             ex_update_fields : [ "sku_level", "category1_id", "bar_code", "bar_code1", "bar_code2", "delete_time" ]
    };
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: true
    };

    enum DispatchType { // 投框方式
        DIS_TYPE_UNSPECIFIED = 0;
        ORDER                = 1;
        DRIVER               = 2;
    }

    enum Status {
        S_UNSPECIFIED = 0;
        DETECT        = 128; //是否检测:：
        NUTRITION     = 512;
    }

    enum SkuType {
        ST_UNSPECIFIED = 0;
        PACKAGE        = 1; // 包材
        NOT_PACKAGE    = 2; // 非包材，普通商品
        COMBINE        = 3; // 组合商品  // TODO 前端，应该在这里么
    }

    // 非包材类型的区分
    enum NotPackageSubSkuType {
        SNPST_UNSPECIFIED            = 0;
        ORIGIN                       = 1;  // 原料
        CLEAN                        = 2;  // 净菜
        DELICATESSEN                 = 3;  // 熟食
        DISHES                       = 4;  // 菜品
        COMBO                        = 5;  // 套餐
        BOXED_LUNCH                  = 6;  // 盒饭
        CAKE                         = 7;  // 糕点
        STAPLE                       = 8;  // 主食
        DRINK                        = 9;  // 饮料
        WATER                        = 10; // 水
        INGREDIENTS                  = 11; // 配料
        NON_STAPLE_FOOD              = 12; // 副食品
        OUTSOURCED_FINISHED_PRODUCTS = 13; // 外购成品
        HOMEMADE_PRODUCTS            = 14; // 自制成品
        MATERIALS                    = 15; // 物料
        GRAIN_AND_OIL                = 16; // 粮油
        PRE_PRODUCTION               = 17; // 预生产
        MAIN_MEAT                    = 18; // 主荤
        MINI_MEAT                    = 19; // 小荤
        ACCESSORY_PRODUCTION         = 20; // 副荤
        VEGETABLE                    = 21; // 素菜
        FRUIT                        = 22; // 水果
        CONDIMENT                    = 23; // 调味品
    }

    // 包材类型的细分 和非包材类型合并
    enum PackageSubSkuType {
        PSST_UNSPECIFIED = 0;
        TURNOVER         = 1; // 包材-周转物
        ONE_TIME         = 2; // 包材-耗材
    }

    //    // 加工类型
    //    enum ProcessType {
    //        PT_UNSPECIFIED  = 0;
    //        PT_CLEANFOOD    = 1; // 净菜
    //        PT_DELICATESSEN = 2; // 熟食
    //    }
    //
    //    enum PurchaseMethodType {
    //        PMT_UNSPECIFIED  = 0;
    //        PMT_UNIFORM_SPEC = 1; // 统一采购规格
    //        PMT_SELF_SPEC    = 2; // 使用自己做采购规格
    //    }

    //供应商协作模式
    enum SupplierCooperateModelType {
        SCMT_UNSPECIFIED        = 0;
        SCMT_JUST_PROVIDE_GOODS = 1; //仅供货
        SCMT_WITH_SORTING       = 2; //代分拣
        SCMT_WITH_DELIVERY      = 4; //代配送
    }

    enum PackageCalculateType { // 开启包材的换算方式
        PC_UNSPECIFIED = 0;
        FIXED          = 1;
        BY_ORDER_NUM   = 2;
    }

    enum PurchaseSkuType {
        PST_UNSPECIFIED = 0;
        PST_NOT_TMP     = 1; // 常规商品
        PST_TMP         = 2; // 临采商品
    }
    //SKU创建来源
    enum Source {
        SOURCE_UNSPECIFIED = 0;
        SOURCE_ERP         = 1; //标准版ERP创建
        SOURCE_LITE_ERP    = 2; //轻巧版ERP创建
        SOURCE_ESHOP       = 3; //eshop接口创建
        SOURCE_LITE        = 4; //轻巧版接口创建
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sku_id      = 1; // 主键
    uint64 status      = 2; // 状态bitmap  detect；开启营养素
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time;sync_deleted:1"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id_on_sale_sku_type_key;INDEX:group_id_on_sale_key;INDEX:customize_code_key;INDEX:group_id_shelf_id,priority:1"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id;default:0"
    uint64 station_id = 11; //站点ID，集团化之后商品属于集团或站点
    // @inject_tag: gorm:"INDEX:category_id"
    uint64 category_id = 12; // sku分类的上级分类id。为了减少查询
    // @inject_tag: gorm:"INDEX:category1"
    uint64 category1_id = 18; // 一级分类ID
    // @inject_tag: gorm:"INDEX:category2"
    uint64 category2_id = 19; // 二级分类ID
    // @inject_tag: gorm:"INDEX:category3"
    uint64 category3_id = 70; // 三级分类ID
    uint64 category4_id = 71; // 四级分类ID
    uint64 category5_id = 72; // 五级分类ID
    uint64 spu_id       = 13;
    // @inject_tag: gorm:"INDEX:base_unit_id"
    uint64 base_unit_id = 14 [ (validate.rules).uint64 = {gt : 0} ]; // 基本单位
    // @inject_tag: gorm:"-"
    string base_unit_name = 21; // 基本单位名称
    // @inject_tag: gorm:"INDEX:second_base_unit_id"
    uint64 second_base_unit_id    = 57; // 辅助单位
    string second_base_unit_ratio = 60; // 辅助单位/基本单位的比率
    uint64 max_unit_id            = 15; // 自定义单位的最大单位
    uint64 source_sku_id          = 16; // 平台同步的sku有此字段
    uint64 source_group_id        = 17; // 平台同步的sku有此字段,源sku的group_id

    //基础信息
    // @inject_tag: gorm:"INDEX:sku_name"
    string name = 20 [ (validate.rules).string = {min_len : 1, max_len : 150} ]; // sku名字 影响版本
    // @inject_tag: gorm:"INDEX:name_pinyin_first_letter"
    string name_pinyin_first_letter = 64; // sku名 的拼音首字母
    // @inject_tag: gorm:"INDEX:name_pinyin_letter"
    string name_pinyin_letter = 65; // sku名 的拼音

    // @inject_tag: gorm:"INDEX:customize_code_key"
    string customize_code = 22 [ (validate.rules).string = {min_len : 1} ]; // 自定义id
    string desc           = 23;                                             // 商品描述
    // @inject_tag: gorm:"INDEX:group_id_on_sale_sku_type_key"
    SkuType              sku_type                 = 24 [ (validate.rules).message = {required: true} ]; //
    NotPackageSubSkuType not_package_sub_sku_type = 25;                                                // 非耗材商品必填
    PackageSubSkuType    package_sub_sku_type     = 26;                                                //耗材商品必填
    //    bool                 process                  = 27;                                                   // 加工和非加工 必传
    //    ProcessType          process_type             = 21 [ (validate.rules).message = {required: true} ]; // 加工类型
    uint32        expiry_date    = 28; // 保质期
    RepeatedField repeated_field = 29;

    message Extra { // 一些额外的展示字段。只做展示不做显示。这期没有
        string key = 1;
        string val = 2;
    }
    message RepeatedField {
        repeated string alias        = 1 [ (validate.rules).repeated = {max_items : 5}, (validate.rules).repeated.items.string.max_len = 30 ]; // 不影响版本 别名列表
        repeated common.Image images = 2 [ (validate.rules).repeated = {max_items : 9} ];                                                       // 商品图  第一张是详情图
        repeated Extra        extras = 3;
        // repeated Unit   units  = 3; // sku自定义单位组
    }

    //业务信息
    DispatchType dispatch_type = 31 [ (validate.rules).message = {required: true} ]; //
    uint32       rank          = 32;                                                // 排序
    // @inject_tag: gorm:"INDEX:purchaser_id"
    uint64 purchaser_id = 34; // 普通商品必传
    // @inject_tag: gorm:"INDEX:supplier_id"
    uint64 supplier_id = 35; // 普通商品必传

    uint64 production_unit_id = 63;                                                   // 生产单位
    Unit   production_unit    = 36;                                                   // 生产单位
    uint64 purchase_unit_id   = 37;                                                   //采购单位
    uint64 loss_ratio         = 39 [ (validate.rules).uint64 = {gte : 0, lt : 100} ]; // 损耗比例

    // 包材
    string  package_price       = 40; // sku是包材，包材的货值
    string  tax_category_code   = 112; // 商品税收分类编码
    uint64  tax                 = 41; // 销项税率,output_tax
    uint64  finance_category_id = 42; // 税率分类
    uint64  input_tax           = 43; // 进项税率
    message SupplierInputTaxMap {
        map<uint64, uint64> supplier_input_tax = 1; // key 供应商:供应商特殊税率
    }
    SupplierInputTaxMap supplier_input_taxs = 46;
    // @inject_tag: gorm:"INDEX:group_id_shelf_id,priority:2"
    bool manual_purchase = 44; // 库存采购:是否手动采购
    // @inject_tag: gorm:"INDEX:group_id,shelf_id,priority:2"
    uint64  shelf_id = 45; // 默认货位
    message UnitList {
        repeated Unit units = 1 [ (validate.rules).repeated = {max_items : 10} ]; // 目前自定义单位限制十个
    }
    UnitList units = 61; // sku的单位
    // @inject_tag: gorm:"INDEX:group_id_on_sale_key;INDEX:group_id_on_sale_sku_type_key"
    bool on_sale   = 47; // 可售/不可售
    bool is_weight = 48; // 是否称重

    Ingredients ingredients = 50;   //组合商品的子商品

    message RelatedCombineSkuIdsMap {
        map<uint64, Uint64List> related_combine_sku_ids_map = 1; // 组合商品关联表。 key 是unit_id, value 是这个商品对应的组合商品的id列表
    }
    RelatedCombineSkuIdsMap related_combine_sku_ids_map = 52;
    PackageCalculateType    package_calculate_type      = 54; // 换算方式
    double                  package_num                 = 55; // 包材数量
    uint64                  package_sku_id              = 56; // 包材id

    string cost = 73; // 商品成本
    // @inject_tag: gorm:"INDEX:bar_code_key"
    string bar_code = 74; // 条形码

    // @inject_tag: gorm:"-"
    string min_price = 58; // 最小价格
    // @inject_tag: gorm:"-"
    string max_price = 59; // 最大价格

    //供应商协作模式
    // @inject_tag: `gorm:"default:1"`
    SupplierCooperateModelType supplier_cooperate_model_type = 62; //供应商协作模式

    message SkuLevel {
        uint64 level_id  = 1; // 自增
        string name      = 2 [ (validate.rules).string = {max_len : 15, min_len : 1} ];
        bool   is_delete = 3;
    }
    message SkuLevels {
        repeated SkuLevel sku_level = 1;
    }
    SkuLevels sku_level = 66; // 商品等级

    // @inject_tag: gorm:"default:2"
    common.Filters.Bool have_purchase_rule = 67; // 是否存在规则，默认false

    uint64 internal_category_id      = 81; // 内部分类id 用于同步客户定制化需求分类 如德保成本分类
    bool   has_set_supply_percentage = 68;
    uint64 order_id                  = 82; // 订单id,只有sku第一次下单时会绑定，有值时删除订单相应条目会删除这个sku

    // 供应链信息，产地、品牌限制输入20字，售后标准、商品特征显示输入100字
    string origin_place            = 69; // 产地
    string brand                   = 75; // 品牌
    string after_sales_standards   = 76; // 售后标准
    string product_characteristics = 77; // 商品特征

    // @inject_tag: gorm:"-"
    uint64 sku_hot = 1000;
    // @inject_tag: gorm:"-"
    uint64 sku_order_count = 1001;
    // @inject_tag: gorm:"-"
    SkuAcceptanceCriteria sku_acceptance_criteria = 1002; // 商品验收标准

    // @inject_tag: gorm:"default:false"
    bool is_temporary_product = 90; // 是否是临时商品
    // @inject_tag: gorm:"default:false"
    bool   exist_temporary_unit = 91; // 是否存在临时单位
    bool   set_sale_inventory   = 92; // 是否设置销售库存
    uint64 warehouse_id         = 93; // 默认仓库ID
    uint64 creator_id           = 94; // 商品创建者ID
    string creator_name         = 95; // 商品创建者名称
    // @inject_tag: gorm:"INDEX:bar_code1_key"
    string bar_code1 = 96; // 备用条形码1
    // @inject_tag: gorm:"INDEX:bar_code2_key"
    string bar_code2   = 97; // 备用条形码2
    bool   pre_sorting = 98; // 是否需要拣货
    // @inject_tag: gorm:"default:1"
    PurchaseSkuType purchase_sku_type = 99; // 采购侧：采购模式

    // @inject_tag: gorm:"INDEX:sort_num_key"
    uint64 sort_num = 100; // 商品排序

    // @inject_tag: gorm:"INDEX:source;default:1"
    Source source                 = 101; // sku创建来源
    string reference_market_price = 106; // 参考行情价

    uint64 stock_code       = 102; // 存货科目代码
    uint64 sale_income_code = 103; // 销售收入科目代码
    uint64 sale_cost_code   = 104; // 销售成本科目代码

    // @inject_tag: gorm:"INDEX:supply_station_id;"
    uint64 supply_station_id = 105; // 供应站点ID

    // 当 batch_type_effectuate_time < batch_type_update_time  时,不可以再次修改商品的批次类型
    SkuBatchType sku_batch_type                 = 107; // 商品批次类型
    uint64       sku_batch_type_update_time     = 108; //  修改商品批次类型的时间
    uint64       sku_batch_type_effectuate_time = 109; //  批次类型变动后的生效时间

    string stock_type_code  = 110; // 存货类别编码
    string stock_type_name  = 111; // 存货类别名称

    PackUnit pack_unit  =   114;     //商品真正选择的装箱规格，packing_unit不会和packing_units进行联动，所以就是unit_id相同，其他也会不同

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

/**营养成本表*/
message SkuNutrition {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_SKU_NUTRITION;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sku_nutrition_id = 1; // 主键
    uint64 status           = 2; // 状态bitmap  detect；开启营养素
    uint64 revision         = 3; // 版本
    uint64 create_time      = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id_key"
    uint64 group_id = 10;

    // @inject_tag: gorm:"INDEX:sku_id_key"
    uint64 sku_id = 20;
    // @inject_tag: gorm:"INDEX:nutrition_id_key"
    uint64 nutrition_id = 21; // 营养素ID
    string pre_content  = 22; //每100克含量
    string ref_value    = 23; //营养素参考值百分百
    uint64 sorts        = 24; //营养素在成本表的排序
    // @inject_tag: gorm:"-"
    string name = 100; //营养素名称
    // @inject_tag: gorm:"-"
    string unit = 101; //单位

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}
message SkuNutritionCache {
    repeated SkuNutrition sku_nutritions = 1;
}

/**营养素*/
message Nutrition {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_NUTRITION;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 nutrition_id = 1; // 主键
    uint64 status       = 2; // 状态bitmap  detect；开启营养素
    uint64 revision     = 3; // 版本
    uint64 create_time  = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id_key"
    uint64 group_id = 10;

    string name = 20; //营养素名称
    string unit = 21; //单位

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}
//
message SkuRemarkCache {
    repeated SkuRemark sku_remarks = 1;
}

/**商品备注*/
message SkuRemark {
    uint64 create_time = 4; // 创建时间
    uint64 sku_id      = 20;
    string remark      = 21; //备注
}

// 商品验收标准
message SkuAcceptanceCriteria {
    option (dao.partition_count) = 10;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sku_acceptance_criteria_id = 1;
    uint64 create_time                = 6; // 创建时间
    uint64 update_time                = 7; // 修改时间
    uint64 delete_time                = 8; // 删除时间，非0表示已删除

    uint64 group_id = 10;
    // @inject_tag: gorm:"uniqueIndex:sku_id"
    uint64 sku_id = 11 [ (validate.rules).uint64 = {gt : 0} ];

    common.Images images = 20; // 验收标准图片

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message Ingredient {
    uint64 sku_id              = 1;
    uint64 order_unit_id       = 2;    // 下单单位
    string ratio               = 3;    // 下单单位数量（隐藏逻辑，兼容历史数据，后端字段换算）
    uint64 ingredient_unit_id  = 9;    // 配比单位
    string ingredient_ratio    = 10;   // 配比单位数量
    uint64 fee_unit_id         = 11;   // 定价单位（仅用于记录，不做报价使用）
    string fee_price           = 12;   // 单价（仅用于记录，不做报价使用）

    bool   on_sale             = 4;                                                              // 可售
    bool   on_shelf            = 5;                                                              // 上下架
    uint64 printing_unit_id    = 6;                                                              // 人均用量，打印时要显示的单位ID
    string printing_unit_value = 7;                                                              //  人均用量，打印时要显示的用量
    string sku_name            = 8;                                                             //商品名称，冗余，用于零时数据或传输
}

message Ingredients {
    repeated Ingredient ingredients = 1; // 组合商品的成分（子商品）
}

// 商品销售库存
message SkuSaleInventory {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_SKUSALEINVENTORY;
    // @inject_tag: gorm:"primaryKey"
    uint64 sku_sale_inventory_id = 1;
    uint64 create_time           = 2; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 3; // 修改时间
    // @inject_tag: gorm:"uniqueIndex:sku_id_order_unit_id"
    uint64 delete_time = 4; // 删除时间，非0表示已删除
    uint64 group_id    = 5;
    // @inject_tag: gorm:"uniqueIndex:sku_id_order_unit_id"
    uint64 sku_id = 6;
    // @inject_tag: gorm:"uniqueIndex:sku_id_order_unit_id"
    uint64 order_unit_id = 7; // 下单单位
    string amount        = 8; // 销售库存限制数量
    uint64 sort_id       = 9; // 排序顺序

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

// 采购规格，包材，非包材，毛菜，净菜使用的都是同一套结构
message Ssu {

    enum PackageCalculateType { // 拣货方式
        PC_UNSPECIFIED = 0;
        FIXED          = 1;
        BY_ORDER_NUM   = 2;
    }

    enum NutritionType { // 修改结构
        NT_UNSPECIFIED = 0;
        PROTEIN        = 1;
        FAT            = 2;
        CARBOHYDRATE   = 3;
    }

    enum SplitFlag {
        // 1表示只投框, 2表示只分切, 3表示投框+分切
        SF_UNSPECIFIED = 0;
        THROW_BASK_BET = 1;
        DIVIDE         = 2;
        INVESTMENT     = 3;
    }

    enum ShippingFeeUnit {
        SFU_UNSPECIFIED = 0;
        BASE            = 1; // ssu的计量单位
        PACKAGE         = 2; // ssu的包装单位
    }

    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_COMMON      = 1; //普通ssu
        TYPE_COMBINE     = 2; //组合ssu
    }

    //    // @inject_tag: gorm:"primaryKey"
    //    uint64 ssu_id      = 1;
    uint64 status      = 3; // 状态bitmap
    uint64 revision    = 4; // 版本
    uint64 create_time = 5; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 6; // 修改时间
    uint64 delete_time = 7; // 删除时间，非0表示已删除

    uint64 group_id = 10;
    // @inject_tag: gorm:"uniqueIndex:sku_id_unit_id"
    uint64                   sku_id                   = 11; // 主键
    uint64                   category_id              = 12; // 为了减少查询
    uint64                   spu_id                   = 13;
    Sku.SkuType              sku_type                 = 14; //同步sku的sku_type
    Sku.NotPackageSubSkuType not_package_sub_sku_type = 15; //同步sku的not_package_sub_sku_type耗材
    Sku.PackageSubSkuType    package_sub_sku_type     = 16; // 同步sku的package_sub_sku_type
    // bool                     process                  = 17; // 同步sku的加工和非加工
    string sku_name = 18; // 同步sku的name

    // @inject_tag: gorm:"uniqueIndex:sku_id_unit_id"
    uint64 unit_id = 19; // 单位ID 联合主键 包装单位或系统单位。目前只有包装单位
    // uint64 source_ssu_id   = 20; // 平台同步的ssu有此字段,源ssu_id
    uint64 source_group_id = 65; // 平台同步的ssu有此字段,源ssu的group_id

    // 基础信息
    // string        customize_code = 21 [ (validate.rules).string = {min_len : 1} ]; //自定义编码 版本
    string        description    = 23;
    RepeatedField repeated_field = 24;
    bool          has_image      = 25;
    // string        name           = 26 [ (validate.rules).string = {min_len : 1} ]; //影响版本
    message RepeatedField {
        repeated common.Image images = 1; // 商品图  第一张是详情图
    }
    // bool is_default_ssu = 27;

    // 销售信息
    bool on_sale = 33; // 在售/停售
    // uint64 shipping_fee_unit_id = 35; //
    
/*shipping_fee_unit这个字段定价用ssu计量单位，或者用的ssu包装单位。
假设现在ssu的包装单位是3斤/袋。计量单位就是斤 ， 包装单位就是袋。 自定义单位的结构体（也就是3斤/袋的信息）被保存在Ssu.unit里。
*/
    // ShippingFeeUnit shipping_fee_unit    = 32;
    // string          minimum_order_number = 37;

    UnitType unit_type    = 38 [ (validate.rules).message = {required: true} ];      // 类型是包装单位或者系统单位。
    Unit     unit         = 39 [ (validate.rules).message = {required : true} ]; // 包装单位。 unit_type为系统单位时，还是会生成一个包装单位。原因是当系统单改了，我们认为他还是同一个ssu，直接使用系统单位无法满足这一场景。
    uint64   base_unit_id = 40;                                                  // sku基本单位 同步的sku的base_unit_id

    // 仓内作业
    uint64    purchase_unit_id = 41 [ (validate.rules).uint64.gt = 0 ]; //采购单位
    bool      is_weight        = 42;                                    // 是否称重
    SplitFlag split_flag       = 44;

    // 包材
    bool                 need_package           = 50; // 是否打包
    bool                 need_package_work      = 51; // 是否进入打包作业流程
    PackageCalculateType package_calculate_type = 53;
    double               package_num            = 54;
    string               package_price          = 55; // sku是包材，包材的货值
    message              PackageId {
        uint64 sku_id  = 1; // 主键
        uint64 unit_id = 2; // 单位ID 联合主键
    }
    PackageId package_id = 56;
    // uint64    package_ssu_id = 67; // 使用ssu_id
    message RepeatedPackageField {
        map<uint32, string> nutrition = 2; // key 是 enum NutritionType里的值
    }

    message Ingredients {
        message SsuRatio {
            uint64 sku_id      = 1;
            uint64 unit_id     = 2;
            string ratio       = 3 [ (validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$" ];
            uint64 use_unit_id = 4 [ (validate.rules).uint64 = {gt : 0} ];
            uint64 ssu_id      = 5;
            bool   on_sale     = 6;
        }
        repeated SsuRatio ssu_ratios = 1; // 组合商品成分
    }
    Ingredients ingredients = 57;
    // @inject_tag: type:"Decimal(18,8)"
    string default_price = 58; // 在报价单之前还有一个基本价格：默认菜谱价/来自行情group商品的今日行情价/组合商品的价格
    Type   type          = 59;

    message RelatedCombineSsuIds {
        repeated SsuId related_combine_ssu_ids = 1; // 组合商品表，记录是为了当商品被删除时，组合商品也要删除
    }
    RelatedCombineSsuIds related_combine_ssu_ids = 60; // 组合商品表，记录是为了当商品被删除时，组合商品也要删除

    message RelatedCombineSsuRealSsuIds {
        repeated uint64 related_combine_ssu_ids = 1; // 组合商品表，记录是为了当商品被删除时，组合商品也要删除
    }
    RelatedCombineSsuRealSsuIds real_related_combine_ssu_real_ssu_ids = 66; // 组合商品表，记录是为了当商品被删除时，组合商品也要删除

    uint64 tax       = 61; // 销项税率，sku的tax同步更新
    uint64 input_tax = 62; // 进项税率，sku的input_tax同步更新

    uint64 loss_ratio = 63 [ (validate.rules).uint64 = {gte : 0, lt : 100} ]; // 损耗比例

    // uint64 last_inquiry_time = 64; // 上次询价时间
}

// 最小下单数，上下架，
// 报价单
message Quotation {
    enum Type {
        UNSPECIFIED    = 0;
        WITHOUT_TIME   = 1; // 普通报价单
        WITH_TIME      = 2; // 菜谱
        PROTOCOL_PRICE = 3; // 协议价格
        PURCHASE_PRICE = 4; // 采购员报价
        SPECIAL_PRICE  = 5; // 特殊定价  特殊定价是用于价格覆盖
        PERIODIC       = 6; // 周期报价单
        //        LIGHT_PRICE    = 5; // 轻巧版报价
        CUSTOMER_PRICE = 7; // 客户协议价，基于报价单但是在取值时优先级高于报价单中价格
    }
    message AvailMenuPeriodGroups {
        repeated uint64 menu_period_group_ids = 1; // 可见餐次
    }
    enum CycleType {
        CYCLETYPE_UNSPECIFIED = 0;
        CYCLETYPE_DAILY       = 1; // 日
        CYCLETYPE_WEEKLY      = 2; // 周
        CYCLETYPE_MONTHLY     = 3; // 月
        CYCLETYPE_LONG        = 4; // 长期报价单
    }
    message UpdateValidTime {
        // 更新时间
        uint64    start_day  = 1; // 周/月 起始日。如果是周，使用 1～7 代表周一到周日；如果是月，使用 1～31 代表每月几号；其他情况下这个字段没有含义
        uint64    start_time = 2; // 开始时间。单位为 UTC Timestamp 毫秒数
        CycleType cycle_type = 3;
    }
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_WAIT_VALID  = 1; // 未生效/未激活/禁用
        STATUS_VALID       = 2; //  已生效/激活/启用
        STATUS_INVALID     = 3; // 已失效
        STATUS_STOP        = 4; //  已终止
        STATUS_WAIT_AUDIT  = 5; // 待审核
        // 以下三个状态与当前时间强关联 作为周期子报价单的状态供前端展示 不关心数据库中存储的准确性
        // 用来当作搜索条件时需要配合start_time/end_time使用
        STATUS_WAIT_AVAILABLE = 6; // 未开始
        STATUS_AVAILABLE      = 7; // 进行中
        STATUS_EXPIRED        = 8; // 已过期
    }
    enum ValidType {
        VALIDTYPE_UNSPECIFIED = 0;
        VALIDTYPE_LONG        = 1; // 长期生效
        VALIDTYPE_TEMP        = 2; // 限时生效
    }

    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_QUOTATION;
    option (dao.sn_type)         = TYPE_MERCHANDISE_QUOTATION;
    option (dao.auto_send_event) = true;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };

    // @inject_tag: gorm:"primaryKey"
    uint64 quotation_id = 1;
    uint64 revision     = 3;
    uint64 create_time  = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:parent_serial_no"
    string parent_serial_no        = 7; // parent quotation serial no
    string parent_child_inner_name = 8; // parent quotation inner name + "-" + child quotation inner name

    // @inject_tag: gorm:"index:type"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;
    uint64 creator_id = 12; // 操作人
    // @inject_tag: gorm:"INDEX:parent_id"
    uint64 parent_id = 13; // 当报价单为周期报价单时，父亲报价单不为空表示为子报价单的父报价单；当报价单为客户协议单时，父报价单不为空是为绑定在那个报价单上
    // @inject_tag: gorm:"INDEX:inner_name"
    string inner_name = 20; // 对内（也就是 GroupUser）可见的报价单可见的名字；客户协议单的协议规则名
    // @inject_tag: gorm:"INDEX:outer_name"
    string outer_name  = 21; // 最外（比如说 Customer）可见的报价单可见的名字；客户协议单关联的报价单
    string description = 22;
    //    bool                     is_active                = 23; // 使用 生效/未生效 状态代替
    // @inject_tag: gorm:"INDEX:is_default"
    bool is_default = 24; // 是否是默认报价单
    // @inject_tag: gorm:"index:type"
    Type                  type                     = 25 [ (validate.rules).message = {required: true} ];
    AvailMenuPeriodGroups avail_menu_period_groups = 26;
    UpdateValidTime       update_valid_time        = 27; // 更新生效时间
    // uint64                   ssu_count            = 28; // 商品数统计
    uint64                   sku_count        = 28; // 商品数统计
    uint64                   normal_sku_count = 38; // 普通商品数统计
    uint64                   customer_count   = 36;
    enterprise.Customer.Type customer_type    = 29; // 关联用户类型
    // @inject_tag: gorm:"INDEX:start_time"
    uint64 start_time = 30; // 开始时间
    // @inject_tag: gorm:"INDEX:end_time"
    uint64 end_time = 31; // 结束时间
    // @inject_tag: gorm:"INDEX:status"
    Status status      = 32;
    uint64 supplier_id = 33;
    // @inject_tag: gorm:"INDEX:serial_no"
    string serial_no = 34;
    string remark    = 35;
    //    uint64 latest_op_uid    = 36;
    uint64 purchase_user_id = 37; // 报价单所属的采购员，如果供应商为空则为采购员自采，如果不为空报价单是给供应商的

    bool   child_quotation_available = 40; // 周期报价单:是否有子报价单在进行中
    Status status_before_audit       = 41; // 审核之前的状态

    bool      child_customer_quotation_available = 42; // 本报价单下是否有客户协议价，包括所有的，无论是否生效
    ValidType valid_type                         = 43; // 客户协议单的生效类型，当限期生效时配合time_range表示生效的时间段
    uint64    exclude_sku_count                  = 44; // 纪录客户协议单屏蔽商品的数量，前端用
    uint64    category_count                     = 46; // 记录客户协议单所关联的报价单的一级分类，2022.10.11目前只有客户协议单的前端用到
    // @inject_tag: gorm:"-"
    repeated uint64 exclude_sku_ids = 45; // 记录报价单在客户纬度不同时被屏蔽的商品

    enum AdventState {
        ADVENT_UNSPECIFIED = 0; //正常
        ADVENT_SOON        = 1; // 即将过期
        ADVENT_OVERDUE     = 2; // 已过期
    }
    AdventState advent_state = 47; // 临期状态

    uint64 customer_sort_num = 48; // 记录同一客户的协议单在页面展示时的排序

    enum ValidTimeType {
        VALID_TIME_UNSPECIFIED = 0; // 正常
        VALID_TIME_ORDER       = 1; // 按下单日期
        VALID_TIME_RECEIVE     = 2; // 按收货日期
    }
    // @inject_tag: gorm:"default:1"
    ValidTimeType valid_time_type = 49; // 周期报价单:生效时间类型

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

// 作用于报价单中商品分类的客户协议价
message CustomerPriceOnCategory {
    option (dao.partition_count) = 100;
    // @inject_tag: gorm:"primaryKey"
    uint64 customer_price_on_category_id = 1;
    uint64 create_time                   = 4;
    uint64 update_time                   = 5;
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;
    // @inject_tag: gorm:"INDEX:quotation_id"
    uint64 quotation_id = 12 [ (validate.rules).uint64 = {gt : 0} ]; // 客户协议单ID
    // @inject_tag: gorm:"INDEX:quotation_type"
    Quotation.Type quotation_type = 13;
    // @inject_tag: gorm:"INDEX:category_id"
    uint64 category_id = 14 [ (validate.rules).uint64 = {gt : 0} ]; // 报价单上分类ID
    // @inject_tag: gorm:"INDEX:level"
    uint32                            level                = 15;
    BasicPriceItem.PriceCalculateRule price_calculate_rule = 16; // 客户协议价在分类上的计算规则
    BasicPriceItem.PriceIntervals     price_intervals      = 17; // 价格区间
    BasicPriceItem.PRICINGTYPE        pricing_type         = 18; // 定价类型
    BasicPriceItem.PRICINGFORMULA     pricing_formula      = 19; // 定价公式模式 如果非0则走预设公式逻辑,0则走公式定价逻辑

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message DetailPriceRule {
    PriceCalculateRule price_calculate_rule = 1; // 计算规则
    PriceIntervals     price_intervals      = 2; // 价格区间
    PricingType        pricing_type         = 3; // 定价类型
    PricingFormula     pricing_formula      = 4; // 定价公式模式 如果非0则走预设公式逻辑,0则走公式定价逻辑
}
message ItemPriceRule {
    BasicPriceItem.PriceCalculateRule price_calculate_rule = 1; // 客户协议价在分类上的计算规则
    BasicPriceItem.PriceIntervals     price_intervals      = 2; // 价格区间
    BasicPriceItem.PRICINGTYPE        pricing_type         = 3; // 定价类型
    BasicPriceItem.PRICINGFORMULA     pricing_formula      = 4; // 定价公式模式 如果非0则走预设公式逻辑,0则走公式定价逻辑
}

message CustomerPriceMaskSku {
    option (dao.partition_count) = 100;
    // @inject_tag: gorm:"primaryKey"
    uint64 customer_price_mask_sku_id = 1;
    uint64 create_time                = 4;
    uint64 update_time                = 5;
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;
    // @inject_tag: gorm:"INDEX:quotation_id"
    uint64 quotation_id = 12 [ (validate.rules).uint64 = {gt : 0} ];
    // @inject_tag: gorm:"INDEX:sku_id"
    uint64 sku_id = 13 [ (validate.rules).uint64 = {gt : 0} ];
    // @inject_tag: gorm:"INDEX:quotation_type"
    Quotation.Type quotation_type = 14;
    // @inject_tag: gorm:"INDEX:sku_type"
    Sku.SkuType sku_type = 15;
    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message CustomerQuotationRelation {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_CUSTOMER_QUOTATION_RELATION;
    option (dao.auto_send_event) = true;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };
    // @inject_tag: gorm:"primaryKey"
    uint64 customer_quotation_relation_id = 1;
    uint64 create_time                    = 4;
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5;
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64         group_id       = 10;
    uint64         station_id     = 11;
    uint64         quotation_id   = 12 [ (validate.rules).uint64 = {gt : 0} ];
    uint64         customer_id    = 13 [ (validate.rules).uint64 = {gt : 0} ];
    Quotation.Type quotation_type = 14;

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

// 菜谱
message Menu {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_MENU;
    option (dao.sn_type)         = TYPE_MERCHANDISE_MENU;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };

    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_ESHOP       = 1; // Eshop 菜谱
    }

    enum BusinessType {
        BUSINESS_TYPE_UNSPECIFIED = 0;
        BUSINESS_TYPE_QUOTATION   = 1; // 报价单
    }

    message MenuPeriodInfo {
        message MenuPeriod {
            MenuPeriodGroup     menu_period_group = 1; // 餐次
            string              meal_label        = 2; // 餐标
            common.Filters.Bool is_required       = 3; // 餐次组是否必选
        }
        repeated MenuPeriod menu_periods = 1; //餐次餐标信息
    }

    // @inject_tag: gorm:"primaryKey"
    uint64 menu_id     = 1;
    uint64 create_time = 2; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 3; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 4; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:semester_id"
    uint64 semester_id = 5;
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:business_id"
    uint64 business_id = 11; // 关联业务ID;由business_type类型决定，例如报价单ID
    // @inject_tag: gorm:"INDEX:serial_no"
    string serial_no = 12; // 菜谱号

    string inner_name  = 20; // 对内可见的菜谱名字
    string outer_name  = 21; // 对外可见的菜谱名字
    string description = 22;
    // @inject_tag: gorm:"INDEX:is_active"
    common.Filters.Bool is_active = 23; // 激活状态
    // @inject_tag: gorm:"INDEX:is_default"
    common.Filters.Bool is_default = 24; // 是否是默认报价单
    // @inject_tag: gorm:"index:type_index"
    Type           type             = 25; // 菜谱类型
    BusinessType   business_type    = 26; // 关联业务类型;例如报价单等
    uint64         class_count      = 27; // 绑定的班级数
    uint64         day_count        = 28; // 菜谱天数
    MenuPeriodInfo menu_period_info = 29; // 餐次信息
    // @inject_tag: gorm:"index:menu_meal_id"
    uint64 menu_meal_id = 32; // 用餐餐次ID
    // @inject_tag: gorm:"type:text"
    string menu_category_ids = 31; // 菜品分类，英文逗号拼接

    // @inject_tag: gorm:"-"
    repeated MenuDetail menu_details = 30; // 对应菜谱详情
    string              remark       = 33; // 餐标备注

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

// 客户关联的菜谱
message CustomerMenuRelation {
    option (dao.partition_count) = 1;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 customer_menu_relation_id = 1; // 关联id
    uint64 create_time               = 2; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 3; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 4; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10; // 企业id
    // @inject_tag: gorm:"INDEX:menu_id"
    uint64 menu_id = 11; // 菜谱id
    // @inject_tag: gorm:"INDEX:customer_id"
    uint64 customer_id = 12; // 客户id，学生餐是班级id

    // @inject_tag: gorm:"INDEX:menu_period_group_id"
    uint64 menu_period_group_id = 13; // 餐次ID，同一个班级只能有一个餐次

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message MenuDetail {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_MENU_DETAIL_ID;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };

    // 菜谱详情

    enum State {
        STATE_UNSPECIFIED = 0;
        STATE_PREPARE     = 1; // 未进入生产
        STATE_FINISHED    = 2; // 已进入生产
    }

    uint64 create_time = 1;
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 2;
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 3;
    // @inject_tag: gorm:"INDEX:semester_id"
    uint64 semester_id = 5;
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;
    // @inject_tag: gorm:"INDEX:menu_period_group_id"
    uint64 menu_period_group_id = 13; // 餐次ID
    // @inject_tag: gorm:"INDEX:menu_id"
    uint64 menu_id      = 14; // 菜谱ID
    uint64 bom_id       = 15; // BomID
    uint64 bom_revision = 16; // Bom版本

    // @inject_tag: gorm:"primaryKey"
    uint64 menu_detail_id = 20; // 菜谱详情id
    // eshop 使用
    uint64 meal_date = 27; // 用餐日期，yyyy-MM-dd格式时间戳
    uint64 sku_count = 29; // 下属 MenuDetailSku 商品数
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0" type:"Decimal(18,8)"
    string price = 30; // 价格，餐标

    // @inject_tag: gorm:"-"
    bool generate_order = 100; // 是否生成订单
    // @inject_tag: gorm:"-"
    repeated MenuDetailSku detail_skus = 101; // 对应菜谱详情所属商品

    ////////////////////////以下字段eshop不在使用，可根据实际情况删除///////////////////////////
    State  state    = 21;
    uint64 revision = 23;
    // 唯一索引quotation_id_menu_time需要删除
    uint64 quotation_id = 24;
    // 唯一索引quotation_id_menu_time需要删除
    uint64 menu_time  = 25; // 菜单时间
    bool   is_holiday = 26; // 是否节假日

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

// 菜谱详情商品，类似BasePrice
message MenuDetailSku {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_MENU_DETAIL_SKU;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 menu_detail_sku_id = 1; // 菜谱详情商品ID
    uint64 create_time        = 2; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 3; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 4; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:semester_id"
    uint64 semester_id = 5;
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:menu_detail_id"
    uint64 menu_detail_id = 11; // 菜谱详情ID
    // @inject_tag: gorm:"INDEX:menu_id"
    uint64 menu_id      = 12; // 菜谱ID
    uint64 sku_id       = 13; // 商品ID
    uint64 unit_id      = 14; // 下单单位ID
    uint64 bom_id       = 15; // BomID
    uint64 bom_revision = 16; // Bom版本

    string count = 20; // 数量

    uint64 type             = 21; // 盒饭类型，1：盒饭套餐，2：单品
    uint64 menu_category_id = 22; //菜品分类

    //@inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string price = 30; // 商品价格

    // @inject_tag: gorm:"-"
    Sku sku = 100; //sku而外信息

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

// 餐次组
message MenuPeriodGroup {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_MERCHANDISE_MENU_PERIOD_GROUP;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };

    enum Type {
        UNSPECIFIED = 0;
        DEFAULT     = 1; // 默认餐次
        ESHOP       = 2; // eshop 餐次
    }

    // @inject_tag: gorm:"primaryKey"
    uint64 menu_period_group_id = 1;
    uint64 create_time          = 2; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 3; // 修改时间
    uint64 delete_time = 4; //

    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id;default:0"
    uint64 station_id = 11; //站点ID

    string name = 20 [ (validate.rules).string.min_len = 1 ];
    string icon = 21;
    // @inject_tag: `gorm:"default:1"`
    Type type = 22; // 餐次类型

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message MenuPeriod {
    MenuPeriodGroup          menu_period_group = 1 [ (validate.rules).message.required = true ];
    enterprise.ServicePeriod service_period    = 2 [ (validate.rules).message.required = true ];
}

// 由报价单，运营时间和商品id确定一个价格,
message BasicPrice {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_BASIC_PRICE;
    option (dao.auto_send_event) = true;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };

    enum Source {
        UNSPECIFIED  = 0;
        PURCHASE_APP = 1; // 采购小程序
        STATION      = 2; // erp
    }

    enum BpOnShelfType {
        ON_SHELF_UNSPECIFIED = 0;
        ALL_ON_SHELF         = 1; // BasicPrice里所有单位的价格条目(item)都上架
        ALL_OUT_OF_SHELF     = 2; // BasicPrice里所有单位的价格条目(item)都下架
        PART_ON_SHELF        = 3; // BasicPrice里单位的价格条目(item)部分上架，部分下架
    }

    message RepeatedField {
        string origin_place = 1;
    }

    // @inject_tag: gorm:"primaryKey"
    uint64 basic_price_id = 1;
    uint64 create_time    = 4;
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5;
    // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key,priority:2;INDEX:group_id_station_id_delete_time_sku_id,priority:3;"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key,priority:1;INDEX:group_id_station_id_delete_time_sku_id,priority:1;"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:group_id_station_id_delete_time_sku_id,priority:2;"
    uint64 station_id = 11;
    // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key,priority:3"
    uint64 quotation_id = 12; // quotation_id,sku_id,unit_id确定一个价格 手动创建协议单请求没有这个参数
    // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key,priority:4;INDEX:group_id_station_id_delete_time_sku_id,priority:4;INDEX:sku_id;"
    uint64 sku_id = 13;
    uint64 spu_id = 15;

    uint64 creator_id = 17; // 询价人

    string formula_text = 21; // 以BasicPriceItem中的formula_text为准
    
/*
formula_text表示定价公式
参数值代表{
basic_price: 基本价
}
formula_text: "{basic_price}*2+1"  这个公式表示"基本价*2+1"
*/
    // @inject_tag: gorm:"INDEX:on_sale"
    bool on_sale = 23; // 可售 由sku同步过来
    // @inject_tag: gorm:"INDEX:on_shelf"
    bool          on_shelf         = 37; // 上下架 存在一个商品上架就是上架  废弃
    BpOnShelfType bp_on_shelf_type = 60; // 用于过滤部分上下架
    // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key,priority:5"
    uint64 menu_time = 25; // 菜单时间
    // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key,priority:6"
    uint64         menu_period_group_id = 26; //餐次id
    // @inject_tag: gorm:"INDEX:menu_detail_id"
    uint64         menu_detail_id       = 27;
    string         remark               = 28;
    Quotation.Type type                 = 36; // 报价单类型
    Sku.SkuType    sku_type             = 40; // sku类型
    Source         source               = 31; // 来源
    RepeatedField  repeated_field       = 32;
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string min_price = 58; // 最小价格
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string max_price = 59; // 最大价格

    BasicPriceItems items            = 34 [ (validate.rules).message = {required : true} ]; // （价格）商品报价
    BasicPriceItems ingredient_items = 41;                                                  // （菜谱子商品价格）子商品报价 ，当 报价单是 净菜菜谱时，  ingredients  和 ingredient_items 的顺序必须完全一致，否则价格对应不上
    Ingredients     ingredients      = 35;                                                  //  组合商品的子商品 当 报价单是 净菜菜谱时，  ingredients  和 ingredient_items 的顺序必须完全一致，否则价格对应不上
    uint64          sort_num         = 38;                                                  // todo 合代码添加 排序
    uint64          input_tax        = 39;                                                  // todo 合代码添加 采购协议价销项税率
    string          place            = 42;

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message BasicPriceSnapshot {
    option (dao.partition_count) = 100;
    option (dao.primary_key)     = "basic_price_id";
    option (dao.model_type)      = TYPE_MERCHANDISE_BASIC_PRICE_SNAP;
    //option (dao.sync_es)         = true;
    // @inject_tag: gorm:"INDEX:basic_price_snapshot_id"
    uint64 basic_price_snapshot_id = 7;
    // @inject_tag: gorm:"primaryKey"
    uint64 basic_price_id = 1; //此处用该名称是因为线上已有该表，主键无法迁移
    // @inject_tag: gorm:"INDEX:org_basic_price_id"
    uint64 org_basic_price_id = 2; //原来报价单的basic_price_id
    // @inject_tag: gorm:"INDEX:revision"
    uint64 revision = 3; //快照时的版本，系统自动快照revision = 1
    // @inject_tag: gorm:"INDEX:create_time"
    uint64 create_time = 4;
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5;
    // @inject_tag: gorm:"index:delete_time"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;
    // @inject_tag: gorm:"index:quotation_id"
    uint64 quotation_id = 12; // quotation_id,sku_id,unit_id确定一个价格 手动创建协议单请求没有这个参数
    // @inject_tag: gorm:"index:sku_id"
    uint64 sku_id       = 13;
    uint64 spu_id       = 15;
    uint64 creator_id   = 17; // 询价人
    string formula_text = 21; // 以BasicPriceItem中的formula_text为准
    // @inject_tag: gorm:"INDEX:on_sale"
    bool on_sale = 23; // 可售 由sku同步过来
    // @inject_tag: gorm:"INDEX:on_shelf"
    bool                     on_shelf             = 37; // 上下架 存在一个商品上架就是上架  废弃
    BasicPrice.BpOnShelfType bp_on_shelf_type     = 60; // 用于过滤部分上下架
    uint64                   menu_time            = 25; // 菜单时间
    uint64                   menu_period_group_id = 26; //餐次id
    uint64                   menu_detail_id       = 27;
    string                   remark               = 28;
    // @inject_tag: gorm:"INDEX:type"
    Quotation.Type           type           = 36; // 报价单类型
    Sku.SkuType              sku_type       = 40; // sku类型
    BasicPrice.Source        source         = 31; // 来源
    BasicPrice.RepeatedField repeated_field = 32;
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string min_price = 58; // 最小价格
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string          max_price        = 59; // 最大价格
    BasicPriceItems items            = 34; // 价格
    BasicPriceItems ingredient_items = 41; // 菜谱子商品价格
    Ingredients     ingredients      = 35; //
    uint64          sort_num         = 38; // todo 合代码添加 排序
    uint64          input_tax        = 39; // todo 合代码添加 采购协议价销项税率

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}
// 价格区间
message PriceInterval {
    string begin        = 1;
    string end          = 2;
    string formula_text = 3; // 区间定价公式
}
message PriceIntervals {
    repeated PriceInterval price_intervals      = 1;
    string                 reference_price_type = 2; // 参考价格类型 格式见下方定价公式枚举
}
// 协议价item的计算规则，区别于报价单的item
message PriceCalculateRule {
    CalculateMethod calculate_method = 1;
    string          price            = 2;
}

message BasicPriceDetail {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_BASIC_PRICE_DETAIL;
    option (dao.auto_send_event) = true;

    // @inject_tag: gorm:"primaryKey"
    uint64 basic_price_detail_id = 1;
    uint64 create_time           = 4;
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5;
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;

    // @inject_tag: gorm:"INDEX:basic_price_id"
    uint64 basic_price_id = 20; // 关联的bp_id
    // @inject_tag: gorm:"INDEX:sku_id"
    uint64 sku_id = 21;
    // @inject_tag: gorm:"INDEX:quotation_id"
    uint64 quotation_id = 22;

    // @inject_tag: gorm:"INDEX:order_unit_id"
    uint64    order_unit_id  = 23 [ (validate.rules).uint64 = {gt : 0} ];           // 下单单位
    UnitValue fee_unit_price = 24 [ (validate.rules).message = {required : true} ]; // 定价单位，定价价格 && 客户协议价的协议单价
    // @inject_tag: gorm:"INDEX:on_shelf"
    bool           on_shelf             = 25; // 上下架
    string         minimum_order_number = 26; // 最小下单数
    bool           current_price        = 27; // 启动时价
    PriceIntervals price_intervals      = 28; // 价格区间
    
/*
    formula_text表示定价公式

    价格类型枚举:

    {{.Now}} // 现单价
    {{.LastInStockPrice}} //最近入库价
    {{.LastPurchasePrice}} //最近采购价git
    {{.LastQuotePrice}} //最近询价
    {{.LastPurchaseAgreementPrice}} //最近采购协议价
    {{.InventoryAveragePrice}} // 库存均价

    example:

    "{{.Now}}*2+1"  这个公式表示"现单价*2+1"
    "{{.LastPurchasePrice}}+3*{{.InventoryAveragePrice}}"  这个公式表示"最近采购价+3*库存均价"
    */
    string         formula_text    = 29; // 常规定价公式，此定价公式为生效公式，其他定价公式字段变化时也会改动此公式
    PricingType    pricing_type    = 30; // 定价类型
    PricingFormula pricing_formula = 31; // 定价公式模式

    // 参考价需要额外的处理
    string last_quote          = 35; // 最近报价，此数据受order_unit_id，fee_unit_price.unit_id
    string last_purchase_price = 36; // 最近一次采购价
    string last_instock_price  = 37; // 最近一次入库价

    // bp中需要的信息
    bool           on_sale     = 40; // sku.on_sale同步
    Sku.SkuType    sku_type    = 41; // sku类型
    Quotation.Type type        = 42; // Quotation.Type
    Ingredients    ingredients = 43; // 存放组合商品子商品配比，用于计算组合商品报价

    string             origin_unit_price    = 60; // 客户协议价的商品在原报价单中的单价
    PriceCalculateRule price_calculate_rule = 61; // 客户协议价的计算规则

    // @inject_tag: gorm:"-"
    bool is_change = 70; // 用于记录报价单条目在对应的协议单影响下是否改变本条目的定价，会在去取值时存到缓存中，但不会在mysql中存

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message BasicPriceItem {

    // 定价公式模式
    enum PRICINGFORMULA {
        PRICINGFORMULA_UNSPECIFIED = 0;
        PRICINGFORMULA_DIY         = 1; // 自定义公式
        PRICINGFORMULA_NONE        = 2; // 不设置公式
    }
    // 定价类型
    enum PRICINGTYPE {
        PRICINGTYPE_UNSPECIFIED = 0;
        PRICINGTYPE_NORMAL      = 1; // 常规定价
        PRICINGTYPE_INTERVAL    = 2; // 区间定价
    }
    // 价格区间
    message PriceInterval {
        string begin        = 1;
        string end          = 2;
        string formula_text = 3; // 区间定价公式
    }
    message PriceIntervals {
        repeated PriceInterval price_intervals      = 1;
        string                 reference_price_type = 2; // 参考价格类型 格式见下方定价公式枚举
    }
    // 计算规则的计算方式
    enum CalculateMethod {
        CALCULATEMETHOD_UNSPECIFIED = 0; // 不设置计算规则，同时计算规则中的price不起作用
        CALCULATEMETHOD_FIX         = 1; // 固定
        CALCULATEMETHOD_MULTI       = 2; // 乘
        CALCULATEMETHOD_ADD         = 3; // 加
        CALCULATEMETHOD_SUB         = 4; // 减
        CALCULATEMETHOD_CUSTOMIZE   = 5; // 自定义公式
    }
    // 协议价item的计算规则，区别于报价单的item
    message PriceCalculateRule {
        CalculateMethod calculate_method = 1;
        string          price            = 2;
    }

    UnitValue      fee_unit_price       = 1 [ (validate.rules).message = {required : true} ]; // 定价单位，定价价格 && 客户协议价的协议单价
    uint64         order_unit_id        = 2 [ (validate.rules).uint64 = {gt : 0} ];           // 下单单位
    bool           on_shelf             = 3;                                                  // 上下架
    string         minimum_order_number = 4;                                                  // 最小下单数
    bool           current_price        = 5;                                                  // 启动时价
    PriceIntervals price_intervals      = 6;                                                  // 价格区间
    
/*
formula_text表示定价公式

价格类型枚举:

{{.Now}} // 现单价
{{.LastInStockPrice}} //最近入库价
{{.LastPurchasePrice}} //最近采购价
{{.LastQuotePrice}} //最近询价
{{.LastPurchaseAgreementPrice}} //最近采购协议价
{{.InventoryAveragePrice}} // 库存均价

example:

"{{.Now}}*2+1"  这个公式表示"现单价*2+1"
"{{.LastPurchasePrice}}+3*{{.InventoryAveragePrice}}"  这个公式表示"最近采购价+3*库存均价"

*/
    string         formula_text    = 7; // 常规定价公式，此定价公式为生效公式，其他定价公式字段变化时也会改动此公式
    PRICINGTYPE    pricing_type    = 8; // 定价类型
    PRICINGFORMULA pricing_formula = 9; // 定价公式模式
    //    string         formula_text_string = 10; // formula_text定价公式展示时没法做部分替换，此字段用于前端展示当前定价公式含义

    string             origin_unit_price    = 11; // 客户协议价的商品在原报价单中的单价
    PriceCalculateRule price_calculate_rule = 12; // 客户协议价的计算规则
    // @inject_tag: gorm:"-"
    bool is_change = 13; // 用于记录报价单条目在对应的协议单影响下是否改变本条目的定价，会在去取值时存到缓存中，但不会在mysql中存
}

message BasicPriceItems {
    repeated BasicPriceItem basic_price_items = 1; // 价格
}

//// QuotationSkuBindRelation todo 是否加上menu_time,menu_period_group
// message QuotationSkuBindRelation {
//     option (dao.partition_count) = 100;
//     option (dao.model_type)      = TYPE_MERCHANDISE_BASIC_PRICE;
//
//     // @inject_tag: gorm:"primaryKey"
//     uint64 sku_quotation_id = 1;
//     uint64 create_time    = 4;
//     uint64 update_time    = 5;
//     // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key"
//     uint64 delete_time    = 6; // 删除时间，非0表示已删除
//
//     uint64 group_id     = 10;
//     uint64 station_id   = 11;
//     // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key"
//     uint64 quotation_id = 12; //quotation_id,sku_id,unit_id确定一个价格 手动创建协议单请求没有这个参数
//     // @inject_tag: gorm:"uniqueIndex:basic_price_unique_key"
//     uint64 sku_id       = 13;
//     uint64 spu_id       = 15;
//
//     bool   on_sale      = 21; // 在售/停售
//     bool   on_shelf     = 22; // 上下界
//     int32  count        = 23; // 计数，sku绑定了这个报价单几次
// }
//
// 在多个报价单中BasicPriceItem定价保持一致的条目
message MultiQuotationBasicPriceItem {
    // 定价类型
    enum PRICETYPE {
        PRICETYPE_UNSPECIFIED     = 0;
        PRICETYPE_CURRENTPRICE    = 1; // 时价
        PRICETYPE_NOTCURRENTPRICE = 2; // 非时价
    }

    uint64                        sku_id             = 1;
    uint64                        order_unit_id      = 2; // 下单单位
    PRICETYPE                     current_price      = 3; // 价格类型。对于前端来说不显示为0，时价=1，非时价=2。
    UnitValue                     fee_unit_price     = 4; // 定价单位，定价价格
    string                        formula_text       = 5; // 定价公式
    repeated uint64               bond_quotation_ids = 6; // 此价格定价关联的报价单
    BasicPriceItem.PRICINGTYPE    pricing_type       = 7; // 定价类型
    BasicPriceItem.PRICINGFORMULA pricing_formula    = 8; // 定价公式模式
    BasicPriceItem.PriceIntervals price_intervals    = 9; // 价格区间
}

message MealCalendar {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_MEAL_CALENDAR;
    //option (dao.sync_es)         = true;
    // @inject_tag: gorm:"primaryKey"
    uint64 meal_calendar_id = 1;
    // @inject_tag: gorm:"uniqueIndex:group_customer_meal_time"
    uint64 group_id = 2;
    // @inject_tag: gorm:"uniqueIndex:group_customer_meal_time"
    uint64  customer_id  = 3;
    uint64  quotation_id = 4;
    message MealCalendarDatas {
        // key:餐次id，value:用餐人数
        map<uint64, uint64> meal_calendar_datas = 1;
    }

    MealCalendarDatas meal_calendar_datas = 5;
    // @inject_tag: gorm:"uniqueIndex:group_customer_meal_time"
    uint64 meal_time   = 6;
    uint64 create_time = 7;
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 8;
    uint64 delete_time = 9;

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message Favorite {
    enum FavoriteType { // 收藏夹类型
        F_UNSPECIFIED = 0;
        BSHOP         = 1;
    }

    enum FavoriteContentType { // 收藏夹收藏的 内容
        FC_UNSPECIFIED = 0;
        SSU            = 1;
    }

    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_BSHOP_FAVORITE;
    //option (dao.sync_es)         = true;

    // @inject_tag: gorm:"primaryKey"
    uint64 favorite_id = 1;
    uint64 revision    = 3;
    uint64 create_time = 4; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 6; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;
    // @inject_tag: gorm:"INDEX:customer_id"
    uint64 customer_id = 12; // 收藏夹关联的客户
    // @inject_tag: gorm:"INDEX:user_customer_id"
    uint64 user_customer_id = 13; // 收藏夹关联的用户，当前登录的用户

    string name                               = 21 [ (validate.rules).string = {min_len : 1} ]; // 收藏夹名字
    bool default                              = 22;                                             // 是否默认收藏夹
    FavoriteType        favorite_type         = 23;                                             // 收藏夹类型 。目前只有bshop的收藏夹，类型被后台写死。
    FavoriteContentType favorite_content_type = 24;                                             // 收藏内容类型。目前只收藏SSU，类型被后台写死。

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message FavoriteSku {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_MERCHANDISE_FAVORITE_SSU;
    option (dao.logstash_sync)   = {
        sync_es: false,
        sync_ck: true,
        sync_snapshot: false
    };

    // @inject_tag: gorm:"primaryKey"
    uint64 favorite_sku_id = 1;
    uint64 revision        = 4;
    uint64 create_time     = 5; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 6; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 7; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;
    // @inject_tag: gorm:"uniqueIndex:favorites_id_sku_id"
    uint64 favorite_id = 12 [ (validate.rules).uint64 = {gt : 0} ];
    // @inject_tag: gorm:"uniqueIndex:favorites_id_sku_id"
    uint64 sku_id = 13 [ (validate.rules).uint64 = {gt : 0} ];
    // @inject_tag: gorm:"uniqueIndex:favorites_id_sku_id"
    uint64 unit_id = 14; //下单单位

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

//规则校验
message RuleSet {
    option (dao.partition_count) = 100;

    enum State {
        STATE_UNSPECIFIED = 0;
        ON                = 1; // 有效
        OFF               = 2; // 无效
    }

    enum Type {
        TYPE_UNSPECIFIED = 0;
        RANGE            = 1;
        PRICE            = 2;
    }

    uint64 rule_set_id = 1;
    uint64 create_time = 4;
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 5;
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id            = 10;
    uint64 station_id          = 11;
    uint64 quotation_id        = 12 [ (validate.rules).uint64 = {gt : 0} ]; // 报价单ID
    string rule_set_display_id = 13;                                        // 报价单对外展示ID 根据产品策略后台生成

    State         state          = 20 [ (validate.rules).message = {required: true} ]; //状态是否有效
    RepeatedField repeated_field = 21;
    Type          type           = 22 [ (validate.rules).message = {required: true} ]; //针对范围还是价格
    message       RepeatedField {
        repeated Rule   rules              = 1 [ (validate.rules).repeated = {min_items : 1} ];
        repeated uint64 service_period_ids = 2 [ (validate.rules).repeated = {min_items : 1} ]; // 运营时间
    }

    message Rule {
        string formula_text = 5;
        
/*
formula_text表示定价公式
参数值代表{
basic_price: 基本价
}
formula_text: "{basic_price}*2+1"  这个公式表示"基本价*2+1"
*/
        repeated uint64 customer_ids = 6 [ (validate.rules).repeated = {min_items : 1} ];
        repeated SsuId  ssu_ids      = 7 [ (validate.rules).repeated = {min_items : 1} ];
    }

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message Uint64List {
    repeated uint64 num = 1;
}

//缓存
message CategoryTreeCache {
    message CategoryInfo {
        uint64 parent_id = 1;
        string name      = 2;
        uint32 level     = 3;
    }
    map<uint64, CategoryInfo> category_link = 1; // key 是CategoryId
}

// 用时才更新
message QuotationCategoryIdsCache {
    map<uint64, int32> category_id_map = 1; // key 是category_id, value 是子节点数量,为了diff 更新方便
    uint64             version         = 2; // 更新时间
    int32              ssu_count       = 3; // ssu的数量
}

message RuleSetCache {
    map<uint64, bool>   rule_set_customer  = 1;
    map<string, string> rule_set_ssu       = 2; // key 是 string(SsuId.SkuId)+string(SsuId.UnitId)
    repeated uint64     service_period_ids = 3;
}

message CustomerPriceRuleCache {
    message CustomerRuleSet {
        repeated uint64 rule_set_ids = 1;
    }
    map<uint64, CustomerRuleSet> customer_rule = 1; // key 是customer_id，将每个商户
    uint64                       version       = 2; // 更新时间
}

// CustomerDisableSsuCache 和 CustomerPriceRuleCache 的version 应该保持一致,所以CustomerDisableSsuCache里并没有存 version
message RuleSetDisableSsuCache {
    message CustomerDisableSsuList {
        repeated SsuId ssu_ids = 1;
    }
    map<uint64, CustomerDisableSsuList> rule_set_id_disable_ssu = 1; // key rule_set_id
    uint64                              version                 = 2; // 更新时间
}

message RuleSetPriceCache {
    message SsuPrice {
        map<uint64, string> ssu_price = 1; // key是 ssu_id，value是price
        uint64              version   = 2; // 更新时间
    }
    map<uint64, SsuPrice> rule_set_price = 1; // key 假设说现在客户和3个rule_set（1，2，3）绑定 ,key就是"1-2-3",没有规则的原价，key是""
}

message SkuAliasCache {
    message AliasCache {
        string          alias  = 1;
        repeated uint64 sku_id = 2;
    }
    map<string, AliasCache> sku_alias_cache = 1;
}

// 系统预设的分类图片
message CategoryImage {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"primaryKey"
    uint64       category_image_id = 1;
    common.Image image             = 2;

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message ReferencePrice {
    option (dao.partition_count) = 100;
    option (dao.primary_key)     = "sku_id";

    enum Type {
        REFERENCE_PRICE_UNSPECIFIED           = 0;
        LAST_IN_STOCK_PRICE                   = 1;  //最近入库价
        LAST_PURCHASE_PRICE                   = 2;  //最近采购价
        LAST_QUOTE_PRICE                      = 3;  //最近询价
        LAST_PURCHASE_AGREEMENT_PRICE         = 4;  //最近采购协议价
        INVENTORY_AVERAGE_PRICE               = 5;  // 库存均价
        SUPPLIER_AGREEMENT_PRICE              = 6;  // 供应商协议价
        SUPPLIER_LAST_INQUIRY_PRICE           = 7;  // 供应商最近询价
        SUPPLIER_LAST_IN_STOCK_PRICE          = 8;  // 供应商最近入库价
        SUPPLIER_LAST_IN_STOCK_SUPPLIER_PRICE = 9;  // 供应商最近入库价（供应商直供）
        SUPPLIER_LAST_IN_STOCK_MARKET_PRICE   = 10; // 供应商最近入库价（市场自采）
        LAST_IN_STOCK_SUPPLIER_PRICE          = 11; // 最近入库价（供应商直供）
        LAST_IN_STOCK_MARKET_PRICE            = 12; // 最近入库价（市场自采）
        LAST_PURCHASE_SUPPLIER_PRICE          = 13; // 最近采购价（供应商直供）
        LAST_PURCHASE_MARKET_PRICE            = 14; // 最近采购价（市场自采）
        MARKET_REFERENCE_PRICE                = 15; // 在sku身上的商品参考行情价
        LAST_PRODUCT_IN_STOCK_PRICE           = 16; //最近生产入库价
    }

    message ReferencePriceValue {
        uint64    source_id   = 1; // 参考成本来源ID
        uint64    time        = 2; // 参考成本的时间
        UnitValue price       = 3; // 参考成本的价格,单位
        uint64    supplier_id = 4; // 供应商ID
    }

    message ReferencePriceMap {
        map<int32, ReferencePriceValue> reference_price_map = 1; // key ReferencePrice.Type
    }
    message SupplierReferencePriceData {
        map<uint64, ReferencePriceValue> supplier_agreement_price              = 1; // key 为供应商ID,库存均价
        map<uint64, ReferencePriceValue> supplier_last_inquiry_price           = 2; // key 为供应商ID,供应商最近询价
        map<uint64, ReferencePriceValue> supplier_last_in_stock_price          = 3; // key 为供应商ID,供应商最近入库价
        map<uint64, ReferencePriceValue> supplier_last_in_stock_supplier_price = 4; // key 为供应商ID，供应商最近入库价（供应商直供）
        map<uint64, ReferencePriceValue> supplier_last_in_stock_market_price   = 5; // key 为供应商ID，供应商最近入库价（市场自采）
    }

    // @inject_tag: gorm:"primaryKey"
    uint64 sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];

    // uint64 revision     = 4;
    uint64 create_time = 5; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 6; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 7; // 删除时间，非0表示已删除
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:station_id"
    uint64 station_id = 11;

    ReferencePriceMap reference_price_map = 20 [ (validate.rules).message = {required : true} ];

    SupplierReferencePriceData supplier_reference_price = 21; // 供应商相关的参考价数据

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message ReferencePriceSnapshot {
    option (dao.partition_count) = 100;
    option (dao.primary_key)     = "reference_price_snapshot_id";

    // @inject_tag: gorm:"primaryKey"
    uint64 reference_price_snapshot_id = 1 [ (validate.rules).uint64 = {gt : 0} ];

    // uint64 revision     = 4;
    uint64 create_time = 2; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 3; // 修改时间
    // @inject_tag: gorm:"INDEX:delete_time"
    uint64 delete_time = 4; // 删除时间，非0表示已删除

    // @inject_tag: gorm:"INDEX:group_id_sku_id_price_type,priority:1"
    uint64 group_id   = 10;
    uint64 station_id = 11;
    // @inject_tag: gorm:"INDEX:group_id_sku_id_price_type,priority:2"
    uint64 sku_id = 20;

    //    ReferencePrice.ReferencePriceMap reference_price_map = 21 [(validate.rules).message = {required : true}];
    //以下是对ReferencePriceMap的展开
    // @inject_tag: gorm:"INDEX:group_id_sku_id_price_type,priority:3"
    ReferencePrice.Type price_type = 30;
    uint64              source_id  = 31; // 参考成本来源ID
    // @inject_tag: gorm:"INDEX:snapshot_time"
    uint64 snapshot_time = 32; // 参考成本的时间
    uint64 unit_id       = 33; //价格单位id
    string price         = 34; //价格
    uint64 supplier_id   = 36; // 供应商ID

    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message SsuInfo {
    Ssu ssu = 1;
    //    repeated BasicPrice basic_prices = 2;
}

message SsuTotalInfo {
    Ssu ssu = 1;
    //    string                price          = 2;
    Sku sku = 3;
    //    BasicPrice            basic_price    = 4;
    repeated CategoryInfo category_infos = 5; // [分类1, 分类2, spu]
    repeated BasicPrice   basic_prices   = 6; // 多个报价单的价格
}

// 商品库存
message WarehouseStock {
    merchandise.UnitStock stock = 2; // 废弃 库存

    uint64 warehouse_id = 1; // 仓库id
    string quantity     = 3; // 数量
    string price        = 4; // 价格
}

message SkuSuggestedPrice {
    enum Type {
        TYPE_UNSPECIFIED      = 0;
        CUSTOMER_RECENT_PRICE = 1; // 客户最近价
        CUSTOMER_BASIC_PRICE  = 2; // 客户报价单价
        SKU_RECENT_PRICE      = 3; // 商品最近价
        SKU_BASIC_PRICE       = 4; // 商品默认报价单价
    }
    Type   type  = 1; // 报价类型
    string price = 2;
}

message SkuIdUnitId {
    uint64 sku_id  = 1;
    uint64 unit_id = 2;
}

message ExportExecuteSku {
    string customize_code                = 1;
    string name                          = 2;
    string alias                         = 3;
    string category_name1                = 4;
    string category_name2                = 5;
    string category_name3                = 6;
    string base_unit_name                = 7;
    string not_package_sub_sku_type      = 8;
    string min_price_max_price           = 9;
    string sku_desc                      = 10;
    string on_sale                       = 11;
    string is_weight                     = 12;
    string second_base_unit_name         = 13;
    string second_base_unit_ratio        = 14;
    string production_unit_name          = 15;
    string production_unit_ratio         = 16;
    string customer_unit_name1           = 17;
    string customer_unit_ratio1          = 18;
    string customer_unit_name2           = 19;
    string customer_unit_ratio2          = 20;
    string customer_unit_name3           = 21;
    string customer_unit_ratio3          = 22;
    string customer_unit_name4           = 23;
    string customer_unit_ratio4          = 24;
    string customer_unit_name5           = 25;
    string customer_unit_ratio5          = 26;
    string customer_unit_name6           = 27;
    string customer_unit_ratio6          = 28;
    string customer_unit_name7           = 29;
    string customer_unit_ratio7          = 30;
    string customer_unit_name8           = 31;
    string customer_unit_ratio8          = 32;
    string customer_unit_name9           = 33;
    string customer_unit_ratio9          = 34;
    string customer_unit_name10          = 35;
    string customer_unit_ratio10         = 36;
    string purchaser_id                  = 37;
    uint64 loss_ratio                    = 38;
    uint32 expiry_date                   = 39;
    string origin_place                  = 40;
    string brand                         = 41;
    string after_sales_standards         = 42;
    string product_characteristics       = 43;
    string package_sku_name              = 44;
    string package_calculate_type        = 45;
    double package_num                   = 46;
    uint64 input_tax                     = 47;
    uint64 tax                           = 48;
    string supplier_input_tax            = 49;
    string finance_category_name1        = 50;
    string finance_category_name2        = 51;
    string standard_price                = 52;
    string cost                          = 53;
    string bar_code                      = 54;
    string bar_code1                     = 55;
    string bar_code2                     = 56;
    string purchase_sku_type             = 57;
    string purchase_unit_name            = 58;
    string sale_stock                    = 69;
    string stock                         = 60;
    string manual_purchase               = 61;
    string supplier_cooperate_model_type = 62;
    string supplier_id                   = 63;
    string warehouse_id                  = 64;
    string station_name                  = 65;
    string reference_market_price        = 66;
    string sku_batch_type                = 67;
    string tax_category_code             = 68;
    string pre_sorting                   = 70;
}

message SkuSnapID {
    uint64 sku_id       = 1;
    uint64 sku_revision = 2;
}

message SsuSnapID {
    uint64 sku_id       = 1;
    uint64 unit_id      = 2;
    uint64 ssu_revision = 3;
}

message SsuId {
    uint64 sku_id  = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 unit_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
}

message BasicPriceId {
    uint64 quotation_id         = 1 [ (validate.rules).uint64 = {gt : 0} ]; // quotation_id,sku_id,unit_id确定一个价格
    uint64 sku_id               = 2 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 unit_id              = 3;
    uint64 menu_detail_id       = 4; // 菜谱详情 id
    uint64 menu_period_group_id = 5; // 餐次组 id
    uint64 menu_time            = 6; // 用餐时间
    uint64 basic_price_id       = 7;
}

message Row {
    repeated string row = 1;
}

message CategoryInfo {
    string category_name = 1;
    uint64 category_id   = 2;
}

// 查询一个Ssu在不同报价单的价格
// message ListSsuByDiffQuotationRequest {
//     SsuId ssu_id = 1;
// }

// message ListSsuByDiffQuotationResponse {
//     repeated BasicPrice basic_prices=1;
//     map<uint64, Ssu> ssus = 2;
//     map<uint64, enterprise.Supplier> suppliers= 3; // 报价单id：供应商
// }

// // todo 拉取商品 返回ssu basicPrice quotation

message ExportSsuData { // spu不算分类
    repeated SsuInfo ssu_infos = 1;
    message          SsuInfo {
        Ssu                   ssu                         = 1;
        string                price                       = 2;
        Sku                   sku                         = 3;
        BasicPrice            basic_price                 = 4;
        repeated CategoryInfo category_infos              = 5; // [分类1, 分类2, spu]
        string                purchase_ssu_customize_code = 6;
    }
}

message RuleConflictData {
    repeated SsuId  ssu_ids            = 1;
    repeated uint64 customer_ids       = 2;
    repeated uint64 service_period_ids = 3;
}

message GetUnitRateGroup {
    message UnitGroup {
        Unit src_unit  = 1;
        Unit dest_unit = 2;
        Sku  sku       = 3;
    }
    message UnitIdGroup {
        uint64 src_unit_id  = 1 [ (validate.rules).uint64 = {gt : 0} ];
        uint64 dest_unit_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
        Sku    sku          = 3;
    }
    repeated UnitIdGroup unit_id_groups = 1 [ (validate.rules).repeated = {min_items : 1} ];
    repeated UnitGroup   unit_groups    = 2 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetUnitRateGroupData {
    message UnitRateGroup {
        uint64 src_unit_id  = 1;
        uint64 dest_unit_id = 2;
        string rate         = 3;
        uint64 sku_id       = 4;
    }
    repeated UnitRateGroup unit_rate_groups = 1;
}

message FilterSkuInfo {
    uint64 sku_id            = 1;
    uint64 fee_unit_id       = 2;
    uint64 order_unit_id     = 3;
    string price             = 4;
    bool   current_price     = 5;
    string origin_unit_price = 6;
}

// 复制报价单的信息
message CopySourceQuotationInfo {
    uint64 source_quotation_id = 1; // 原报价单id
    uint64 basic_price_total   = 2; // 报价单对应的条目数量
}

message RelationElement {
    uint64         customer_id    = 1;
    uint64         quotation_id   = 2;
    uint64         station_id     = 3;
    Quotation.Type quotation_type = 4;
    bool           is_remove      = 5; //标记是否删除，用在SetCustomerQuotationRelation接口相同时添加和删除关联关系时使用，本质上是调一下UnsetCustomerQuotationRelation接口
}
message BatchPresetPricingFormulaData {
    repeated string msg = 1;
}
message BatchCalculatePricingFormulaData {
    repeated string msg = 1;
}

message ExportSpecialBasicPriceData {
    message ExportSpecialBasicPriceSkuInfo {
        uint64 sku_id  = 1;
        string name    = 2;
        uint64 unit_id = 3;
        string price   = 4;
    }
    uint64                                  customer_id = 1;
    repeated ExportSpecialBasicPriceSkuInfo sku_infos   = 2;
}

message ImportSpecialBasicPriceData {
    message ImportSpecialBasicPriceInfo {
        string      name          = 1;
        uint64      unit_id       = 2;
        string      price         = 3;
        uint64      sku_id        = 4; // 在数据导入时，用于为商品捆绑别名
        string      err_str       = 5; // Excel错误信息输出 和 错误条目展示的错误信息
        Status.Code err           = 6; // 错误条目展示用于区分错误来源
        Sku         err_sku       = 7; // 在设置协议价失败时，将Sku的信息写入用于错误条目处理
        bool        forced_create = 8; // 当ErrCode，为Status.Code.SKU_NOT_EXIST时，该参数决定是否创建
    }

    message SetSpecialBasicPriceInfo {
        string name          = 1;
        uint64 sku_id        = 2;
        uint64 unit_id       = 3;
        string price         = 4;
        bool   forced_create = 5; // 当ErrCode，为Status.Code.SKU_NOT_EXIST时，该参数决定是否创建
    }

    message PositionIndex {
        repeated uint64 position = 1;
    }

    uint64                               customer_id                  = 1 [ (validate.rules).uint64 = {gt : 0} ];
    string                               file_url                     = 2 [ (validate.rules).string = {min_len : 1} ];
    repeated ImportSpecialBasicPriceInfo special_basic_price_info     = 3;
    repeated ImportSpecialBasicPriceInfo err_special_basic_price_info = 4;
    repeated SetSpecialBasicPriceInfo    tmp_special_basic_price_info = 5;
    repeated PositionIndex               position_index               = 6;
    bool                                 file_conversion              = 7;
    bool                                 import_type                  = 8;
    repeated uint64                      err_sku_ids                  = 9;
    uint64                               default_quotation_id         = 10;
}

message BasicPriceList {
    repeated BasicPrice basic_price_list = 1;
}

message FavoriteSkuList {
    repeated FavoriteSku favorite_sku_list = 1;
}

// 所有模块存单位数量使用的结构体
message UnitQuantity {
    uint64 unit_id = 1;
    string amount  = 3;
}

message UnitPrice {
    uint64 unit_id = 1;
    string price   = 3;
}


/*

UnitValue 这个结构主要是方便获得某个单位的价格和数量的。
因为盘点了已知的场景，绝大多数的场景下是同时需要数量和价格的，那么和单位放在一起是最方便的结构
--------------
UnitValueSet 简单的理解就是一堆单位的数量价格的集合。
通常情况下，input只会有一个，calculate永远只会有一个
举例1：原商品定价是按斤定价，但是下单的时候，客户输入数量是按磅输入的，
那么此时的输入价格和输入数量都是按磅这个单位来，计算价格和计算数量按转换成斤的数量来

举例2：商品3斤/袋，按袋定价，10元/袋，客户下单1袋
那么此时的输入价格和输入数量都是按袋这个单位来，计算价格和计算数量也是袋
称重的时候称了4斤，那么输入价格和输入数量是按斤这个数量来，计算价格和计算数量是按斤转换的袋的数量来
input1.unit_id: 斤
input1.quantity: 4
input1.price: 3.33333333

calculate.unit_id: 袋
calculate.quantity: 4/3
calculate.price: 10

在称重客户需要输入两个单位的时候，input2就会发挥作用：
举例3：商品3斤/袋，按袋定价，10元/袋，客户下单1袋
那么此时的输入价格和输入数量都是按袋这个单位来，计算价格和计算数量也是袋
称重的时候称了1袋，4斤，那么输入价格和输入数量是按斤这个数量来，计算价格和计算数量是按斤转换的袋的数量来
input1.unit_id: 斤
input1.quantity: 4
input1.price: 3.33333333
input2.unit_id: 袋
input2.quantity: 1
input2.price: 10

calculate.unit_id: 袋
calculate.quantity: 1
calculate.price: 10

此时calculate的数量和价格是用更接近它的input单位转换而来的（转换路径更短）
--------------
此处顺便说一下四舍五入的设计。
目前的设计是后端保持10位整数，8位小数存储，前端展示的时候允许展示精度在8位及以下随意切换（初期默认2位，后期加配置）
因此前端需要关注三种数量/价格，用户输入的、后端传给前端的/前端回传后端的、页面展示的
1. 凡用户输入的数据，精度和前端展示精度一致，比如展示配置精度4位，那么用户输入的值就是4位精度
2. 前后端之间的传值都以string形式进行保持精度稳定不丢失
3. 在2的基础上，后端传给前端的数据始终保持8位精度，前端回传结构时应保持结构内的数据精度不变，还是8位（注意：这个区别于用户输入的数据）
4. 由于页面展示精度是会随着前端展示精度的修改而改变，因此后端不再计算和存储补差，补差的计算和展示变成纯前端展示行为

*/

// 通用结构，使用unit_id和val两个字段表达数量或者价格和单位的绑定关系，
// 只需要表达数量或者价格可以单独使用，如果同时需要表达数量和价格，使用UnitValueSetV2
message UnitValue {
    //    uint64 unit_id = 1 [ (validate.rules).uint64.gt = 0 ]; // 请在代码内校验
    uint64 unit_id = 1;
    // @inject_tag: type:"Decimal(18,8)"
    string quantity = 2; // deprecated 因为兼容性原因暂时保留，后续不再使用，新需求请不要使用这个字段 [ (validate.rules).string = {pattern : "^-*(([0-9]+\\.[0-9]+)|[0-9]+)$"} ]
    // @inject_tag: type:"Decimal(18,8)"
    string price = 3; // deprecated 因为兼容性原因暂时保留，后续不再使用，新需求请不要使用这个字段
    // @inject_tag: type:"Decimal(18,8)"
    string val = 4; //数量或者价格
}

message UnitValueSet {
    UnitValue input     = 1; // 用户输入，前端填写
    UnitValue input2    = 2; // 用户输入2，目前只有订单中的出库数据和库存单据才会用到
    UnitValue calculate = 3; // 计价逻辑
}
message UnitValueSetV2 {
    UnitValue quantity = 1; // 前端输入数量
    UnitValue price    = 2; // 前端输入金额
}

message UnitStock {
    UnitValue base_unit       = 1;
    UnitValue sku_unit        = 2;
    string    mult_unit_stock = 3; // 多单位展示库存 形如:2袋11斤(2箱11斤)
}

message ErrorAsyncResult {
    string code    = 1;
    uint32 err     = 2;
    string err_str = 3;
}

message MerchandiseParam {
    message ElemMap {
        map<string, string> elem = 1;
    }
    message CombineSsu {
        string           customized_code = 1;
        repeated ElemMap elems           = 2;
    }

    repeated ElemMap          ssus                = 1; //
    repeated ElemMap          skus                = 2; //
    repeated CombineSsu       combine_ssus        = 3; // 多条数据合成一个组合商
    repeated ErrorAsyncResult error_async_results = 4;
}

message MerchandiseStructParam {
    repeated Category category1s = 1;
    repeated Category category2s = 2;
    repeated Spu      spus       = 3;
    repeated Sku      skus       = 4;
}

message InitMerchandiseParam {
    MerchandiseStructParam merchandise = 1;
    repeated uint64        group_ids   = 2;
    uint64                 create_time = 3;
}

message FavoriteSkuNumStaticCache {
    map<uint64, uint64> favorite_sku_num_map = 1; // key 是收藏夹ID，值是收藏夹下的商品数量
    uint64              revision             = 2; // 更新版本号
}

message ExportQuotationMiddle {
    repeated uint64    quotation_ids = 1;
    repeated Quotation quotations    = 2;
    message            QuotationRelationMap {
        repeated BasicPrice basic_price = 1;
        map<uint64, Sku>    sku_map     = 2;
    }
    map<uint64, QuotationRelationMap> quotation_relation_map = 3;
    map<uint64, enterprise.Supplier>  supplier_map           = 4;
}

// Sku, Quotation, BasicPrice
message FilterParams {

    uint64 category_id = 1; // 分类ID。可以传一级分类ID，二级分类ID，三级分类ID，四级分类ID，五级分类ID

    repeated uint64 sku_ids             = 3;
    uint64          sku_id              = 4; // sku_id
    uint64          quotation_id        = 5; // 报价单ID
    repeated uint64 quotation_ids       = 6; // quotation_ids
    repeated string sku_customize_codes = 7;
    string          quotation_serial_no = 8; // quotation自定义编码

    Sku.SkuType sku_type                                    = 9;
    repeated Sku.SkuType     sku_types                      = 50; // 支持查询多类型，不为nil时sku_type无效
    Quotation.Type           quotation_type                 = 10; // 报价单类型
    Sku.NotPackageSubSkuType not_package_sub_sku_type       = 11;
    Sku.PackageSubSkuType    package_sub_sku_type           = 12;
    string                   q                              = 13; // sku编码，sku名模糊搜索
    string                   search_q                       = 15; // Deprecated: Sku Name 精准搜索 TODO 无效
    string                   quotation_q                    = 14; // 报价单编码，报价单名模糊搜索
    repeated uint64          shelf_ids                      = 16; // 货位id
    common.Filters.Bool      on_sale                        = 17; // 可售
    bool                     is_deleted                     = 88; // 是否已删除
    common.Filters.Bool      on_shelf                       = 18; // 上下架 对应字段是BasicPrice.on_shelf，只要有一个商品上架就是上架（true），全部商品下架是下架（false)。
    repeated BasicPrice.BpOnShelfType bp_on_shelf_type_list = 29; // 过滤部分上架，部分下架的情况
    Quotation.Status                  quotation_status      = 19; // 报价状态
    string                            sku_name_like         = 51; // sku名 模糊搜索
    string                            sku_code_like         = 52; // sku编码 模糊搜索
    repeated Quotation.Status quotation_statuss             = 38; // 报价状态
    common.Filters.Bool       is_default_quotation          = 26; // 是否默认报价单
    uint64                    alias_by_supplier_id          = 69; // 供应商ID，按供应商下的sku别名搜索时有用

    uint64 customer_id = 20; // 客户ID

    uint64 category1_id = 21; // 一级分类ID, 也可以直接用「category_id」参数
    uint64 category2_id = 22; // 二级分类ID, 也可以直接用「category_id」参数
    uint64 category3_id = 23; // 三级分类ID, 也可以直接用「category_id」参数
    uint64 category4_id = 24; // 四级分类ID, 也可以直接用「category_id」参数
    uint64 category5_id = 25; // 五级分类ID, 也可以直接用「category_id」参数

    uint64 sku_default_supplier_id = 27; // sku上的默认供应商

    uint64              tax_supplier_id = 28; // 导出时过滤指定供应商的特殊税率
    repeated uint64     basic_price_ids = 30;
    common.Filters.Bool need_delete     = 31; // 是否查询已删除的
    repeated string     bar_codes       = 32; // 条形码
    repeated string     or_bar_codes    = 72; //or条形码

    repeated uint64 parent_quotation_ids    = 33; // 父报价单id
    uint64          periodic_time           = 34; // 周期报价单时间区间节点
    bool            parent_quotation_filter = 35; // 只返回可以和商品进行绑定操作的报价单
    bool            wait_audit_filter       = 68; // 配合parent_quotation_filter，过滤待审核类型的报价单
    repeated Quotation.Type quotation_types = 36; // quotation types

    uint64          start_time   = 37; // 采购协议价兼容时过滤建单时间开始时间/历史报价单的当天开始时间
    uint64          end_time     = 45; // 采购协议价兼容时过滤建单时间结束时间/历史报价单的当天截止时价
    repeated uint64 supplier_ids = 39; // 采购协议价过滤供应商
    repeated uint64 category_ids = 40; // 分类ID。可以传一级分类ID，二级分类ID，三级分类ID，四级分类ID，五级分类ID，返回该分类及其子类的sku
    uint64          unit_id      = 41; // 生成采购订单时，采购单价根据供应商+商品+单位取状态为生效的协议价

    common.Filters.Bool have_purchase_rule = 42; // 获取存在采购规则的商品
    // BasicPrice 使用
    uint64 menu_time            = 43; // 菜谱时间
    uint64 menu_period_group_id = 44; // 菜谱餐次

    repeated uint64 exclude_quotation_ids   = 46; // 需要被排除的报价单 exclude_quotation_ids
    repeated uint64 exclude_sku_ids         = 47; // 需要被排除的商品 exclude_sku_ids
    repeated uint64 exclude_basic_price_ids = 74; // 需要被排除的报价条目

    repeated string quotation_serial_nos = 48; // 序列号切片

    uint64 basic_price_update_begin_time = 49;
    string special_category_name         = 53; // 客户商品属性的分类名称
    uint64 basic_price_update_end_time   = 54;

    uint64 basic_price_create_begin_time = 55;
    uint64 basic_price_create_end_time   = 56;

    uint64 creator_id = 57;

    BasicPrice.Source basic_price_source = 58;
    repeated string   qs                 = 59; // sku编码列表，sku名模糊搜索

    repeated Sku.NotPackageSubSkuType not_package_sub_sku_types = 60;

    common.Filters.Bool is_temporary_product = 62; // 是否是临时商品
    common.Filters.Bool exist_temporary_unit = 63; // 是否存在临时单位

    uint64 sku_create_begin_time = 64; // sku创建开始时间
    uint64 sku_create_end_time   = 65; // sku创建结束时间

    uint64 sku_update_begin_time = 66; // sku更新开始时间
    uint64 sku_update_end_time   = 67; // sku创建结束时间

    
/**参数q、sku_customize_codes、qs、customize_code、name，商品名称、编码模糊搜索时的数据来源，1:mysql,2:ES，不适用于写入后马上查询的场景*/
    common.DataSource data_source = 70; //名称、编码等模糊搜索时的数据来源，db/es，默认db

    repeated string search_qs = 71; // 名称精确搜索

    repeated SkuIdUnitId sku_id_unit_ids = 73; // 针对BasicPrice生效，根据此条件对报价条目进行过滤

    bool batch = 75; // 批量导入订单，只搜索商品名称、编码

    repeated Sku.Source sources = 76;

    repeated uint64 sku_station_ids         = 77; //商品指定站点
    repeated uint64 quotation_station_ids   = 78; //报价单指定站点
    repeated uint64 basic_price_station_ids = 79; //报价指定站点
    repeated uint64 station_ids             = 80; //废弃，不要使用，默认和sku_station_ids一样，商品指定站点
    
/*
    周期报价单区分为1.按下单时间生效，2.按收货时间生效
    valid_time_type = proto.VALID_TIME_RECEIVE(2)时，periodic_time字段表示收货时间，用来圈定周期子报价单生效状态
    */
    Quotation.ValidTimeType valid_time_type = 81;
    uint64                  receive_time    = 82; // 按收货时间生效的周期报价单：指定的收货时间

    // 报价单页面筛选条件
    PricingType    pricing_type    = 83; // 定价类型，公式类型筛选
    PricingFormula pricing_formula = 84; // 定价公式模式，是否预设公式筛选
    uint64         gt_quotation_id = 85; // > quotation_id
    uint64         gt_sku_id       = 86; // > sku_id

    bool           only_show_permission_sku = 87; // 只显示有权限的商品

    common.Flag.Bool pre_sorting                                             = 89; // 是否需要拣货
    merchandise.Sku.SupplierCooperateModelType supplier_cooperate_model_type = 90; // 供应商协作模式
}

message SkuUnitInfo {
    Sku            sku              = 1;
    Unit           unit             = 2;
    BasicPriceItem basic_price_item = 3;
    BasicPrice     basic_price      = 4;
}

message BulkImportBasicPriceV2LiteMiddle {
    enum ErrorCode {
        ERROR_CODE_UNSPECIFIED   = 0;
        ERROR_CODE_MORE_SKU      = 1; // 匹配到多个SKU
        ERROR_CODE_SKU_NOT_EXIST = 2; // 商品不存在
        ERROR_CODE_SKU_IS_TMP    = 3; // 临时商品

        ERROR_CODE_SKU_PRICE_EMPTY = 5; // 商品单价为空
        ERROR_CODE_SKU_PRICE_ERROR = 6; // 商品单价格式错误

        ERROR_CODE_SKU_ALIAS_LENGTH = 7; // 商品别名过长
        ERROR_CODE_SKU_ALIAS_MORE   = 8; // 商品别名超出5个

        ERROR_CODE_SHEET_UNIT_NOT_EXIST = 10; // 订价单位不存在，此时会存在 error_string

        ERROR_CODE_ORDER_UNIT_EMPTY     = 15; // 下单单位未填写
        ERROR_CODE_ORDER_UNIT_NOT_EXIST = 16; // 下单单位不存在，此时会存在 error_string

        ERROR_CODE_OTHER = 20; // 创建商品、更新商品、创建BasicPrice遇到的错误，此时会存在 error_string
    }

    message RowData {
        string sku_name            = 1; // 商品名称： 数据导入添加至已有别名时必填
        string sku_customized_code = 2; // 商品编码
        string sheet_unit_name     = 3; // 订价单位名称
        string order_unit_name     = 4; // 下单单位名称
        string price               = 5; // 下单价格： 数据导入必传
        bool   on_shelf            = 6; // 上架状态： 数据导入必传

        uint64 sku_id        = 8;  // 商品ID： 数据导入必传
        uint64 order_unit_id = 9;  // 下单单位： 数据导入必传
        uint64 sheet_unit_id = 10; // 订价单位： 数据导入必传 默认等于order_unit_id

        merchandise.Sku  force_sku  = 11; // 数据订正：创建商品
        merchandise.Unit group_unit = 12; // 数据订正：创建系统单位  商品不存在，其导入单位也不存在于系统单位中，要求创建商品必须传递此字段

        ErrorCode error_code   = 99;  // 错误编码
        string    error_string = 100; // 创建报价单错误：前端无用
    }

    string           file_url         = 1;
    bool             is_xls           = 2;
    uint64           quotation_id     = 3 [ (validate.rules).uint64 = {gte : 0} ];
    repeated RowData correct_row_data = 4;
    repeated RowData err_row_data     = 5;
}

message ExportExecuteBasicPrice {
    string customize_code              = 1;
    string name                        = 2;
    string category_name1              = 3;
    string category_name2              = 4;
    string category_name3              = 5;
    string current_price               = 6;
    string order_unit_id               = 7;
    string sheep_unit_id               = 8;
    string unit_price                  = 9;
    string minimum_order_number        = 10;
    string discount_rate               = 11;
    string before_unit_price           = 12;
    string on_shelf                    = 13;
    string quotation_price             = 14;
    string quotation_price_rate        = 15;
    string purchase_price              = 16;
    string purchase_price_rate         = 17;
    string in_stock_price              = 18;
    string in_stock_price_rate         = 19;
    string sku_desc                    = 20; // 商品描述
    string station_name                = 21; // 所属组织
    string reference_market_price      = 22;
    string reference_market_price_rate = 23;
    string last_product_in_stock_price              = 24; // 最近生产入库价
    string last_product_in_stock_price_rate         = 25; // 最近生产入库价利润率
    string last_in_stock_market_price              = 26; // 最近生产入库价
    string last_in_stock_market_price_rate         = 27; // 最近生产入库价利润率
}

//message GetCustomerMenuRequest {
//    uint64 customer_id = 1; //  客户ID,customer_id、menu_id二选一，同时存在优先取menu_id
//    // @inject_tag: gorm:"-"
//    bool need_menu_detail = 2; //  需要详情
//    // @inject_tag: gorm:"-"
//    bool need_menu_detail_sku = 3; //需要详情所属商品，need_menu_detail=true时有效
//    // @inject_tag: gorm:"-"
//    uint64 meal_date_start = 4; //用餐开始时间，need_menu_detail=true时有效
//    // @inject_tag: gorm:"-"
//    uint64 meal_date_end = 5; //用餐结束时间，need_menu_detail=true时有效
//    bool need_deleted   =   6;
//
//    uint64 menu_id  =   7;  //customer_id、menu_id二选一，同时存在优先取menu_id
//}
//message GetCustomerMenuResponse {
//    Menu menu = 1; //  菜谱
//}

// 行情数据
message MarketData {
    option (dao.partition_count) = 1;
    option (dao.primary_key)     = "market_data_id";

    enum SourcePlatform {
        MARKETDATA_SOURCEPLATFORM_UNSPECIFIED = 0;
        MARKETDATA_SOURCEPLATFORM_CJBJ        = 1; // 创价网
    }

    enum PriceType {
        MARKETDATA_PRICE_TYPE_UNSPECIFIED = 0;
        MARKETDATA_PRICE_TYPE_WHOLESALE   = 1; // 批发
        MARKETDATA_PRICE_TYPE_RETAIL      = 2; // 零售
    }

    //@inject_tag: gorm:"primaryKey"
    uint64 market_data_id = 1; // 同步数据方维护的行情数据唯一标识
    // @inject_tag: gorm:"uniqueIndex:third_sku_id_source_platform_time_price_type_market_name"
    uint64 third_sku_id = 2; // 同步数据方维护的商品唯一标识
    uint64 create_time  = 3; // 创建时间
    // @inject_tag: gorm:"INDEX:update_time"
    uint64 update_time = 4; // 修改时间
    uint64 delete_time = 5; // 删除时间，非0表示已删除

    // @inject_tag: gorm:"uniqueIndex:third_sku_id_source_platform_time_price_type_market_name"
    SourcePlatform source_platform = 21; // 数据来源平台
    string         customized_code = 22; // 数据来源平台维护的商品编号
    string         sku_name        = 23; // 商品名称
    string         standard        = 24; // 规格
    string         producing_area  = 25; // 产地
    // @inject_tag: gorm:"uniqueIndex:third_sku_id_source_platform_time_price_type_market_name"
    uint64 time = 26; // 行情价格时间
    // @inject_tag: gorm:"uniqueIndex:third_sku_id_source_platform_time_price_type_market_name"
    PriceType price_type = 27; // 行情价格类型
    // @inject_tag: gorm:"uniqueIndex:third_sku_id_source_platform_time_price_type_market_name"
    string market_name  = 28; // 市场名称
    string market_price = 29; // 价格数值
    string remark       = 30; // 备用字段
    // @inject_tag: gorm:"INDEX:is_latest;default:0"
    bool is_latest = 31;
    // @inject_tag: gorm:"-"
    repeated common.CustomField custom_fields = 100000 [ (common.es_properties_type) = ESPROPERTIESTYPE_JOIN ]; // 自定义字段，系统自动添加，请勿删除，编号用冲突可人工调整
}

message MatchResultDetail {
    string substring      = 1;
    uint32 start          = 2;
    uint32 end            = 3;
    string sku_name       = 4;
    string unit_name      = 5;
    string quantity       = 6;
    string price          = 13;
    uint32 sku_start      = 7;
    uint32 sku_end        = 8;
    uint32 quantity_start = 9;
    uint32 quantity_end   = 10;
    uint32 unit_start     = 11;
    uint32 unit_end       = 12;
    uint32 price_start    = 14;
    uint32 price_end      = 15;
}

// 返回修改成功的商品

message MerchandiseApolloConfig {
    int32  paging_sku_item_limit           = 1; // 分页查询sku的数量限制(用于构建es搜索条件)
    string mysql_for_group_ids             = 2; // 需要走mysql查询的group_id，多个用英文逗号分隔
    string match_sku_regexp_sku_name       = 3; // 智能识别里，商品名的正则表达式
    bool   change_basic_price_detail       = 4; // 切换至报价单新表
    bool   menory_search                   = 5; // 是否启用商品内容搜索，true启用，false停用
    string not_menory_search_for_group_ids = 6; // 不走商品内存搜索的groupid，主要是有大量商品的groupid，多个group_id用英文逗号分隔
    int32  menory_search_size              = 7; // 每个协程搜索的商品数，例如有20000个商品，将开启 20000 / 100 = 200 个携程
    uint64 multi_customer_price_app_id     = 8; // 客户多协议单绑定应用id(权限控制）
}

message OutsideSku {
    string customize_code = 1 [ (validate.rules).string = {min_len : 1} ]; // 自定义编码
    //基础信息
    string name = 2 [ (validate.rules).string = {min_len : 1, max_len : 40} ]; // sku名字 影响版本

    uint64 category_id = 3 [ (validate.rules).uint64 = {gt : 0} ]; // sku分类分类id

    uint64 base_unit_id           = 4 [ (validate.rules).uint64 = {gt : 0} ]; // 基本单位
    uint64 second_base_unit_id    = 5;                                        // 辅助单位
    string second_base_unit_ratio = 6;                                        // 辅助单位/基本单位的比率

    uint64 production_unit_id = 7; // 生产单位
    uint64 purchase_unit_id   = 9; //采购单位

    string bar_code  = 10; // 条形码
    string bar_code1 = 11; // 备用条形码1
    string bar_code2 = 12; // 备用条形码2

    string desc = 13; // 商品描述

    bool on_sale   = 14; // 可售/不可售
    bool is_weight = 15; // 是否称重

    //供应商协作模式
    Sku.SupplierCooperateModelType supplier_cooperate_model_type = 16; //供应商协作模式

    uint64 purchaser_id = 17;                                                   // 普通商品必传
    uint64 supplier_id  = 18;                                                   // 普通商品必传
    uint64 warehouse_id = 19;                                                   // 默认仓库ID
    uint64 loss_ratio   = 20 [ (validate.rules).uint64 = {gte : 0, lt : 100} ]; // 损耗比例

    uint32 expiry_date = 21; // 保质期(天)
    // 供应链信息，产地、品牌限制输入20字，售后标准、商品特征显示输入100字
    string origin_place            = 22; // 产地
    string brand                   = 23; // 品牌
    string after_sales_standards   = 24; // 售后标准
    string product_characteristics = 25; // 商品特征

    Sku.PackageSubSkuType    package_sub_sku_type   = 26; //耗材商品必填
    Sku.PackageCalculateType package_calculate_type = 27; // 换算方式
    double                   package_num            = 40; // 包材数量

    uint64 tax                 = 28; // 销项税率,output_tax
    uint64 input_tax           = 29; // 进项税率
    uint64 finance_category_id = 30; // 税率分类

    // 商品类：暂时用普通商品填充
    Sku.SkuType              sku_type                 = 41 [ (validate.rules).message = {required: true} ]; //sku类型
    Sku.NotPackageSubSkuType not_package_sub_sku_type = 31;                                                // 非耗材商品必填

    bool manual_purchase = 32; // 库存采购:是否手动采购

    common.Filters.Bool have_purchase_rule = 33; // 是否存在规则，默认false

    bool pre_sorting = 34; // 是否需要拣货   库销类型

    message UnitList {
        uint64 unit_id           = 1;  // 主键
        bool   is_temporary_unit = 91; // 是否是临时单位
        string name              = 20 [ (validate.rules).string = {min_len : 1} ];
        float  rate              = 21 [ (validate.rules).float = {gt : 0} ];   // id/parent_id 单位是「3斤/袋」的含义是 「3斤= 1袋」，所以比率（unit.rate） =「1袋/1斤 = 3」
        uint64 parent_id         = 23 [ (validate.rules).uint64 = {gte : 0} ]; // 基本单位
    }

    repeated UnitList units = 35 [ (validate.rules).repeated = {max_items : 3} ]; // 临时单位 自定义单位限制三个
}

message OutsideQuotation {
    string inner_name       = 20 [ (validate.rules).string = {min_len : 1} ]; // 对内（也就是 GroupUser）可见的报价单可见的名字；客户协议单的协议规则名
    string outer_name       = 21 [ (validate.rules).string = {min_len : 1} ]; // 最外（比如说 Customer）可见的报价单可见的名字；客户协议单关联的报价单
    string serial_no        = 22 [ (validate.rules).string = {min_len : 1} ]; // 编号
    string parent_serial_no = 23;                                             // 报价单父编号
    // string parent_child_inner_name = 8; // parent quotation inner name + "-" + child quotation inner name

    string           description = 26; // 描述
    bool             is_default  = 24; // 是否是默认报价单
    Quotation.Type   type        = 25 [ (validate.rules).message = {required: true} ];
    uint64           start_time  = 30;                                             // 开始时间
    uint64           end_time    = 31;                                             // 结束时间
    Quotation.Status status      = 32 [ (validate.rules).message = {required: true} ]; // 状态
    string           remark      = 35;                                             // 备注,暂时不用
}

/////////////////////////////////////////////最近报价、最近入库价、最近采购价、最近售价缓存////////////////////////////////////////
message GetSkuSalePricesCacheRequest {
    message CustomerSkuSalePriceFilter {
        uint64  receive_customer_id = 1; //收货人ID
        message SkuFilter {
            uint64 sku_id      = 1; //商品ID
            uint64 fee_unit_id = 2; //定价单位ID
        }
        repeated SkuFilter sku_filters = 2; //
        uint64             period      = 3; //最近多少条售价，最大30条
        //
        uint64 start_time = 4; //开始时间，按时间段，和period二选一，优先period，按时间段只会取每天最新的一条
        uint64 end_time   = 5; //结束时间，按时间段，和period二选一，优先period，按时间段只会取每天最新的一条
    }
    repeated CustomerSkuSalePriceFilter filters = 1;
}
message GetSkuSalePricesCacheResponse {
    message SkuSalePriceCaches {
        repeated SkuSalePriceCache sku_sale_prices = 1;
    }
    map<string, SkuSalePriceCaches> sku_sale_prices_map = 1; //key=receive_customer_id + "_" + sku_id + "_" + fee_unit_id
}
message SetSkuSalePricesCacheRequest {
    repeated SkuSalePriceCache sku_sale_price_caches = 1;
}
message SetSkuSalePricesCacheResponse {
}
//最近采购价
message GetSkuPurchasePricesCacheRequest {
    SkuReferencePriceFilter filter = 1;
}
message GetSkuPurchasePricesCacheResponse {
    map<string, SkuReferencePriceCaches> sku_reference_prices_map = 1; //key=supplier_id + "_" + sku_id + "_" + type
}
//最近入库价
message GetSkuInStockPricesCacheRequest {
    SkuReferencePriceFilter filter = 1;
}
message GetSkuInStockPricesCacheResponse {
    map<string, SkuReferencePriceCaches> sku_reference_prices_map = 1; //key=supplier_id + "_" + sku_id + "_" + type
}
//最近参考价
message GetSkuReferencePricesCacheRequest {
    SkuReferencePriceFilter filter = 1;
}
message GetSkuReferencePricesCacheResponse {
    map<string, SkuReferencePriceCaches> sku_reference_prices_map = 1; //key=supplier_id + "_" + sku_id + "_" + type
}
message GetSkuBasicPricesCacheRequest {
    message SkuBasicPriceFilter {
        uint64          quotation_id = 1; //报价单ID
        repeated uint64 sku_ids      = 2; //商品ID
        uint64          period       = 3; //最近多少条售价，最大30条
        //
        uint64 start_time = 4; //开始时间，按时间段，和period二选一，优先period，按时间段只会取每天最新的一条
        uint64 end_time   = 5; //结束时间，按时间段，和period二选一，优先period，按时间段只会取每天最新的一条
    }
    repeated SkuBasicPriceFilter filters = 1;
}
message GetSkuBasicPricesCacheResponse {
    message SkuBasicPriceCaches {
        repeated SkuBasicPriceCache sku_basic_prices = 1;
    }
    map<string, SkuBasicPriceCaches> sku_basic_prices_map = 1; //key=quotation_id + "_" + sku_id
}

message SearchSkuRequest {
    string q           = 1; //商品名称（模糊）、编码（精确）、商品名拼音首字母（模糊）、商品名全拼（模糊）、商品别名（模糊）、客户商品别名（模糊）、商品条码（精确）
    uint64 customer_id = 2; //客户ID，搜客户商品别名时毕传
    uint64 limit       = 3; //需要返回的结果数
}
message SearchSkuResponse {
    repeated uint64       sku_ids   = 1; //匹配到的sku_id，无序
    repeated SkuCacheSort sku_cache = 2; //已排好序，排序规则：index、order_count、search_count、sort_num
}

//////////////////////////////////////////////////////////////////////////////////////////////////

message OrderDetailEventListenerRequest {
    string          event_type       = 1;
    repeated uint64 order_detail_ids = 2;
}
message OrderDetailEventListenerResponse {
}
message CustomerProductConfigEventListenerRequest {
    string          event_type                  = 1;
    repeated uint64 customer_product_config_ids = 2;
}
message CustomerProductConfigEventListenerResponse {
}
message SkuEventListenerRequest {
    string           event_type  = 1;
    repeated uint64  sku_ids     = 2;
    map<uint64, Sku> old_sku_map = 3;
}
message SkuEventListenerResponse {
}

message InitSkuCacheRequest {
    repeated uint64 sku_ids = 1; //为空时初始化全部商品
}
message InitSkuCacheResponse {
    uint64 fail    = 1;
    uint64 success = 2;
}
message RefreshSkuCacheDataRequest {
    repeated uint64 group_ids = 1;
}
message RefreshSkuCacheDataResponse {
}

message GetSkuCacheRequest {
    repeated uint64 sku_ids     = 1;
    uint64          customer_id = 2;
}
message GetSkuCacheResponse {
    map<uint64, SkuCache>              sku_cache_map                = 1;
    map<uint64, SkuCustomerAliasCache> sku_customer_alias_cache_map = 2;
}

message InitSkuCustomerAliasCacheRequest {
    repeated uint64 sku_ids                     = 1;
    repeated uint64 customer_product_config_ids = 2;
}
message InitSkuCustomerAliasCacheResponse {
}

message SetSkuCountRequest {
    message SkuCount {
        uint64 sku_id = 1;
        uint64 count  = 2;
        uint64 type   = 3; //  1：order_count、2：search_count
    }
    repeated SkuCount sku_counts = 1;
}
message SetSkuCountResponse {
}
message GetSkuCountRequest {
    repeated uint64 sku_ids = 1;
}
message GetSkuCountResponse {
    map<uint64, SkuCount> sku_count_map = 1; //key = sku_id
}

///////////////////////////////////////////////////////////////////////////////////////////

message ListPackUnitRequest {

}
message ListPackUnitResponse {
    repeated PackUnit pack_units =   1;
}

message SavePackUnitRequest {
    repeated PackUnit pack_units =   1;
}
message SavePackUnitResponse {
    repeated PackUnit pack_units =   1;
}

message GetImportCombineSkuTemplateRequest {
}
message GetImportCombineSkuTemplateResponse {
    string file_url = 1; //模板地址
}
message ImportCombineSkuRequest {
    string file_url = 1;
}
message ImportCombineSkuData {
    message CombineSku {
        string                 name            = 1;
        string                 customize_code  = 2;
        string                 order_unit_name = 3;
        string                 on_sale         = 4;
        repeated IngredientSku ingredients     = 5;
    }
    message IngredientSku {
        string name             =   1;  //组成商品名称
        string order_unit_name  =   2;  //组成商品下单单位
        //
        string ratio            =   3;  //组成商品下单单位配比，停用
        string fee_unit_name    =   4;  //组成商品定价单位
        string fee_price        =   5;  //组成商品单价
        string ingredient_unit_name   =   6;  //组成商品配比单位
        string ingredient_ratio       =   7;    //组成商品配比数量
        string customize_code   = 8; // 组成商品编码

    }
    repeated CombineSku combine_skus = 1;
    //
    map<string, merchandise.Sku>  sku_name_map       = 2; //key = name
    map<string, merchandise.Sku>  sku_code_map       = 3; //key = customize_code
    map<uint64, merchandise.Unit> unit_map           = 4; //key = unitId
    map<uint64, string>           quotation_name_map = 5; //key = quotation_id
    //
    message Rows {
        repeated string row = 1;
    }
    repeated Rows error_rows = 100; //错误信息
}
message ImportCombineSkuResponse {
    asynctask.Task task = 1;
}
message ExportCombineSkuRequest {
    ListSkuV2Request filter = 1;
}
message ExportCombineSkuResponse {
    asynctask.Task task = 1;
}
///////////////////////////////////////////////////////////////////////////////////////////

message ListSkuByQueryForSearchRequest {
    string                    q                         = 1; //可搜索：商品名称(模糊)、商品拼音首字母(模糊)、别名(模糊)、编码(精确)、条码1(精确)、条码2(精确)、条码3(精确)，各字段之间是或的关系，默认只查询：商品名称、商品拼音首字母
    bool                      need_query_customize_code = 2; //需要查询编码
    bool                      need_query_alias_name     = 3; //需要查询别名
    bool                      need_query_bar_code       = 4; //需要查询条码
    bool                      need_query_deleted        = 5; //需要查询旧的数据
    ceres.common.PagingParams paging                    = 6;
}
message ListSkuByQueryForSearchResponse {
    repeated Sku              skus   = 1;
    ceres.common.PagingResult paging = 2;
}

message ListSimpleSkuRequest {
    repeated string           names                 = 1; //精确查找
    repeated string           customize_codes       = 2;
    repeated uint64           sku_ids               = 3;
    bool                      need_deleted          = 4;
    bool                      not_filter_station_id = 5; //不过滤station_id
    ceres.common.PagingParams paging                = 1000;
}

message ListSimpleSkuResponse {
    repeated Sku              skus   = 1;
    ceres.common.PagingResult paging = 2;
}

message ListSimpleQuotationRequest {
    repeated string           inner_names           = 1; //精确查找
    repeated string           outer_names           = 2; //精确查找
    repeated string           serial_nos            = 3;
    repeated uint64           quotation_ids         = 4;
    bool                      need_deleted          = 5;
    bool                      not_filter_station_id = 6; //不过滤station_id
    ceres.common.PagingParams paging                = 1000;
}

message ListSimpleQuotationResponse {
    repeated Quotation        quotations = 1;
    ceres.common.PagingResult paging     = 2;
}

message ImportSkuNutritionRequest {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}
message ImportSkuNutritionResponse {
    asynctask.Task task = 1;
}

message CleanSkuRemarkRequest {
    repeated uint64 sku_ids = 1;
}
message CleanSkuRemarkResponse {
}

message GetManySkuRemarkRequest {
    repeated uint64 sku_ids = 1;
}
message GetManySkuRemarkResponse {
    map<uint64, SkuRemarkCache> sku_remark_cache_map = 1;
}

message SaveSkuRemarkRequest {
    SkuRemark sku_remark = 1;
}
message SaveSkuRemarkResponse {
    SkuRemarkCache sku_remark_cache = 1;
}
message ListNutritionUnitRequest {
}
message ListNutritionUnitResponse {
    repeated string units = 1;
}
message GetSkuNutritionRequest {
    uint64 sku_id = 1;
}
message GetSkuNutritionResponse {
    repeated SkuNutrition sku_nutritions = 1;
}
message CleanSkuNutritionRequest {
    repeated uint64 sku_ids = 1;
}
message CleanSkuNutritionResponse {
}

message SaveSkuNutritionRequest {
    repeated SkuNutrition sku_nutritions = 1;
}
message SaveSkuNutritionResponse {
    repeated SkuNutrition sku_nutritions = 1;
}
message ListNutritionRequest {
}
message ListNutritionResponse {
    repeated Nutrition nutritions = 1;
}
message SaveNutritionRequest {
    Nutrition nutrition = 1;
}
message SaveNutritionResponse {
    Nutrition nutrition = 1;
}

message DeleteNutritionRequest {
    uint64 nutrition_id = 1;
}
message DeleteNutritionResponse {
}

// 价格计算伪代码

/*
价格计算伪代码
// 规则计算
price_rule_set_ids, rule_set_version  = get_CustomerPriceRuleCache(customer_id) //从缓存里获取里
disable_ssu = get_CustomerDisableSsuCache(customer_id)
is_rule_set_updated = get_one_update_rule_set(rule_set_version，quotation_id)
price_rule_set = None
if is_rule_set_updated:
    // 从db里获取并计算存到缓存里去, ssu_price_rule_formula 的格式是{ssu_id:rule_formula_text}
    all_price_rule_set_id, all_disable_ssu, ssu_price_rule_formula, price_rule_set_ids, new_rule_set_version = get_all_rule_set()
    set_CustomerPriceRuleCache(all_price_rule_set_id, new_rule_set_version)
    set_CustomerDisableSsuCache(disable_ssu)
    disable_ssu = all_disable_ssu(customer_id)
else:
    ssu_price_rule_formula = get_ssu_price_rule(price_rule_set_ids)

// 基础价格计算
ssu_basic_price = get_RuleSetIDPriceCache(format(price_rule_set_ids))
if not ssu_basic_pric:
    ssu_basic_price = get_all_ssu_basic_price(Quotation_id)
    set_RuleSetIDPriceCache({"":ssu_basic_price})
    is_ssu_price_updated = True
else:
    delete_ssu_basic_price, update_ssu_basic_price, is_ssu_price_updated = get_update_ssu_basic_price(version, Quotation)
    if is_ssu_price_updated:
        ssu_basic_price = merge(ssu_basic_price, delete_ssu_basic_price, update_ssu_basic_price)
        set_RuleSetIDPriceCache({"":ssu_basic_price})

// 计算返回价格
price_key = format(price_rule_set_ids)
if price_key != "" :
    old_price = get_RuleSetIDPriceCache(price_key)
    if not old_price:
        // 全量计算
        ssu_price = calculate(ssu_price_rule_formula, ssu_basic_price)
    else:
        //增量计算
        if is_rule_set_updated and is_ssu_price_updated:
            ssu_price = calculate(ssu_price_rule_formula, ssu_basic_price)
        elif is_rule_set_updated:
            ssu_price = calculate(ssu_price_rule_formula, ssu_basic_price)
        elif is_ssu_price_updated:
            ssu_price = calculate(ssu_price_rule_formula, ssu_basic_price, update_ssu_basic_price, old_price)
        else:
            ssu_price = old_price
else:
    ssu_price = ssu_basic_price

if disable_ssu:
    ssu_price = ssu_price.remove(disable_ssu)

return ssu_price

保存规则伪代码
for rule_ssu_id
    rule_ssu_id
ssu_id  = get_all_ssu_id_in_quotation(Quotation_id) //可以从缓存里取么
invalid_ssu_id = ssu_id - rule_ssu_id
if invalid_ssu_id:
    return invalid_ssu_id
*/

// 分类树算法 暂时用不到了

/*
// 商品库需要添加
message node {
    uint64 node_version = 1;
    uint64 node_id      = 2;
    uint64 ctime        = 3;
    uint64 mtime        = 4;

    uint32 group_id   = 10;
    string station_id = 11;
    uint64 tree_id    = 12;

    string name   = 20;
    uint32 optype = 21; //使用uint32做枚举
}

// 快照树的数据结构
// 节点表加存档点 ，如何减少category_tree_version
message Relation {
    uint64 id      = 1; // 这个ID没有实际的意义，当前使用autoIncrement，有没有什么办法把它改成不自增的
    uint64 node_id = 2; // 节点的ID，spu节点或者分类节点

    uint32 group_id   = 4;
    string station_id = 5;
    uint32 ctime      = 6;
    uint32 mtime      = 7;

    uint64 parent_id = 10;
    uint64 tree_id   = 12;

    Optype Optype = 21;
    uint32 level  = 22;
}

message TreeVersion {
    uint64 id = 1; // 这个ID没有实际的意义，当前使用autoIncrement，有没有什么办法把它改成不自增的

    uint32 group_id   = 4;
    string station_id = 5;
    uint32 ctime      = 6;
    uint32 mtime      = 7;

    uint64          tree_create_time = 21;
    repeated string node_version     = 22;
}

// 分类树信息表
message TreeInfo {
    uint32 tree_id   = 1;
    string name      = 2;
    uint32 status    = 3;
    string statio_id = 4;
    uint32 group_id  = 5;
    uint32 ctime     = 6;
    uint32 mtime     = 6;

    message module_list { // 这期要不要
        ModuleType module_type = 1;
    }
}

节点表
node_version node_id optype group_id station_id  ctime           mtime         tree_id   name
    1          1       0     123       123       1594440000.0    1594440000.0    1       "S1"
    2          2       0     123       123       1594443600.0    1594443600.0    1       "S2"
    3          3       0     123       123       1594443600.0    1594443600.0    1       "S3"
    4          4       0     123       123       1594447200.0    1594447200.0    1       "S4"
    5          5       0     123       123       1594447200.0    1594447200.0    1       "S5"
    6          6       0     123       123       1594447800.0    1594447800.0    1       "S6"
    7          7       0     123       123       1594447800.0    1594447800.0    1       "S7"

节点关系表
node_id group_id station_id  ctime         mtime         parent_id  tree_id  optype  level
  1        123      123      1594440000.0  1594440000.0    0          1        0       1
  2        123      123      1594443600.0  1594443600.0    1          1        0       2
  3        123      123      1594443600.0  1594443600.0    1          1        0       2
  4        123      123      1594447200.0  1594447200.0    2          1        0       3
  5        123      123      1594447200.0  1594447200.0    2          1        0       3
  6        123      123      1594447800.0  1594447800.0    3          1        0       3
  7        123      123      1594447800.0  1594447800.0    3          1        0       3


// 节点2改名字
// 节点表
node_version node_id optype group_id station_id  ctime           mtime            tree_id    name
  8           2        1      123      123       1594447920.0    1594447920.0      1         "S2_"

// 节点6改了分类
//节点关系表
node_id group_id station_id  ctime         mtime         parent_id  tree_id  optype level
  6        123      123      1594447980.0  1594447980.0    2          1        2      3

//树版本快照表
time           tree
1594440000.0   ['011']
1594447200.0   ['011', '022', '034', '035', '023']

//实际各个时刻的树版本，未存
time           tree
1594440000.0   ['011']
1594443600.0   ['011', '022', '023']
1594447200.0   ['011', '022', '034', '035', '023']
1594447800.0   ['011', '022', '034', '035', '023', '036', '037']
1594447920.0   ['011', '028', '034', '035', '023', '036', '037']
1594447980.0   ['011', '028', '036', '034', '035', '023', '037']

//算法
def tree(tree_time):
    prior_tree = session.query(TreeVersion).filter(TreeVersion.tree_time <= tree_time).Category_by(desc(TreeVersion.tree_time)).limit(1)

    changed_node_cursor = session.query(Node).filter(and_(Node.c_time > prior_tree.time, Node.c_time <= tree_time)).Category_by(Node.c_time)
    created_node_id_version = {}
    updated_node_id_version = {}
    deleted_node_id_version = {}

    for node_cursor in changed_node_cursor:
        if node_cursor.optype = Optype.CREATE:
            created_node_id_version[node_cursor.node_id] = node_cursor.node_version
        elif node_cursor.optype = Optype.update:
            updated_node_id_version[node_cursor.node_id] = node_cursor.node_version
        else:
            deleted_node_id_version[node_cursor.node_id] = node_cursor.node_version

    changed_relation = session.query(Relation).filter(and_(Relation.c_time > prior_tree.time, Relation.c_time <= tree_time))



uint32 node_type = 7; // 叶子节点还是树节点
 */

message GetCategoryRequest {
    uint64 category_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetCategoryResponse {
    Category category = 1;
}

//分类是group通用
message ListCategoryRequest {
    enum PagingField {
        UNSPECIFIED   = 0;
        CATEGORY_NAME = 1; // 分类名
        CATEGORY_ID   = 2; // 分类ID
    }
    repeated uint64     category_ids  = 1;
    string              q             = 2;
    common.PagingParams paging        = 3;
    common.Filters.Bool need_delete   = 4;
    repeated ceres.common.SortBy sort = 1000;
}

message ListCategoryResponse {
    repeated Category         categories = 1;
    ceres.common.PagingResult paging     = 2;
}

// 内部分类 仅用于同步部分客户定制化需求分类
message ListInternalCategoryRequest {
    repeated uint64     internal_category_ids = 1;
    string              q                     = 2;
    common.PagingParams paging                = 3 [ (validate.rules).message = {required : true} ];
}

message ListInternalCategoryResponse {
    repeated InternalCategory internal_categories = 1;
    ceres.common.PagingResult paging              = 2;
}

message CreateCategoryRequest {
    Category category = 1 [ (validate.rules).message = {required : true} ];
}

message CreateCategoryResponse {
    Category category = 1;
}

message CreateInternalCategoryRequest {
    InternalCategory internal_category = 1 [ (validate.rules).message = {required : true} ];
}

message CreateInternalCategoryResponse {
    InternalCategory internal_category = 1;
}

message UpdateCategoryRequest {
    Category category = 1 [ (validate.rules).message = {required : true} ];
}

message UpdateCategoryResponse {
    Category category = 1;
}

message UpdateManyCategoryRequest {
    repeated Category category_list = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message UpdateManyCategoryResponse {
    repeated Category category_list = 1;
}

message DeleteCategoryRequest {
    uint64 category_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteCategoryResponse {
    Category category = 1;
}

message GetCategoryTreeRequest {
    enum PagingField {
        UNSPECIFIED = 0; // 部分语言中枚举值有默认值 0，为了防止意料之外的情况，所以我们认为 0 没有含义
        SORT_NUM    = 1; // 按排序字段
    }
    uint64          quotation_id             = 1;  // bshop 根据报价单取获取的分类树, 没有登录的传个1
    uint64          station_id               = 2;  // bshop 根据客户拉取获取的分类树 必须把station_id传过来
    repeated uint64 sku_ids                  = 3;  // 根据sku_id拉取对应的分类树
    uint64          group_id                 = 4;  // bshop 未登录客户
    bool            has_delete               = 5;  // 拉取删除的分类 用于排序
    string          shared_token             = 6;  // 传分享时未登录态token
    bool            need_product_config_data = 7;  // 需要客户属性数据
    bool            category_name            = 8;  // 分类名称
    uint64          customer_id              = 9;  // 子店customer_id
    uint64          not_need_spu             = 10; // 是否需要查询spu，不需要传1
    uint32          level                    = 11; // 层级
    repeated uint64 not_in_category_ids      = 12; // 查询ids外的数据
    uint64          receive_time             = 13; // 当客户绑定的周期报价单为收货时间生效的类型时，传入此参数，用于确认收货时间点时生效的周期子报价单
    repeated ceres.common.SortBy sort_by     = 1001;
}

message GetCategoryTreeResponse {
    repeated Category categories                = 1;
    repeated Spu      spus                      = 2;
    repeated enterprise.ConfigInfo config_infos = 3; // 客户商品属性
}

message GetCategoryTreeOnCustomerPriceRequest {
    uint64 quotation_id = 1; // 根据客户协议单ID获取其关联的报价单的分类树
    bool   on_child     = 2; // 是否将父分类的计算规则展示在子分类上
}

message GetCategoryTreeOnCustomerPriceResponse {
    repeated Category categories = 1;
}

message DeltaUpdatePriceRuleOnCategoryRequest {
    uint64                            quotation_id         = 1;
    repeated uint64                   category_ids         = 2;
    BasicPriceItem.PriceCalculateRule price_calculate_rule = 3;
    BasicPriceItem.PriceIntervals     price_intervals      = 4; // 区间定价
    BasicPriceItem.PRICINGTYPE        pricing_type         = 5; // 定价类型
    BasicPriceItem.PRICINGFORMULA     pricing_formula      = 6; // 定价公式模式 如果非0则走预设公式逻辑,0则走公式定价逻辑
}

message DeltaUpdatePriceRuleOnCategoryResponse {
}

message BulkUpdateCalRuleOnCategoryRequest {
    uint64                            quotation_id         = 1;
    repeated uint64                   category_ids         = 2;
    BasicPriceItem.PriceCalculateRule price_calculate_rule = 3; // 客户协议价更新计算规则
    BasicPriceItem.PriceIntervals     price_intervals      = 4; // 区间定价
    BasicPriceItem.PRICINGTYPE        pricing_type         = 5; // 定价类型
    BasicPriceItem.PRICINGFORMULA     pricing_formula      = 6; // 定价公式模式 如果非0则走预设公式逻辑,0则走公式定价逻辑
}

message BulkUpdateCalRuleOnCategoryResponse {
    asynctask.Task task = 1;
}

message BatchUpdateCategorySortRequest {
    repeated Category category = 1;
}

message BatchUpdateCategorySortResponse {
}

message GetOfficialCategoryTreeRequest {
}

message GetOfficialCategoryTreeResponse {
    repeated Category categories = 1;
}

message ChangeMerchandiseRankRequest {
    enum NodeType {
        NT_UNSPECIFIED = 0;
        CATEGORY       = 1;
        SPU            = 2;
        SKU            = 3;
    }
    NodeType node_type = 1;
    uint32   rank      = 2;
    uint64   node_id   = 3;
}

message ChangeMerchandiseRankResponse {
}

message GetManyCategoryRequest {
    repeated uint64 category_ids                = 1; // 分类ID  「category_ids」和「special_parent_category_ids」只填一个，两个都填 只取 「category_ids」
    repeated uint64 special_parent_category_ids = 2; // 根据这个ID列表(可以是一级分类ID也可以是二级分类IID)获取叶子节点分类 「category_ids」和「special_parent_category_ids」只填一个，两个都填 只取 「category_ids」
    bool            need_delete                 = 3; // 是否查询已经删除的
}

message GetManyCategoryResponse {
    map<uint64, Category> category_map = 1;
}

message GetManyCategoryByRelationGroupRequest {
    repeated uint64 category_ids       = 1 [ (validate.rules).repeated = {min_items : 1} ];
    repeated uint64 relation_group_ids = 2;
}

message GetManyCategoryByRelationGroupResponse {
    map<string, Category> category_map = 1; // key: group_id-category_id
}

message GetSpuRequest {
    uint64 spu_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetSpuResponse {
    Spu spu = 1;
}

message InitFinanceCategoryRequest {
}

message InitFinanceCategoryResponse {
}

message GetFinanceCategoryTreeRequest {
    uint64 finance_category_id = 1;
}

message GetFinanceCategoryTreeResponse {
    repeated FinanceCategory categories = 1;
}

message GetManySpuRequest {
    repeated uint64 spu_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetManySpuResponse {
    map<uint64, Spu> spu_map = 1;
}

message ListSpuRequest {
    repeated uint64     spu_ids = 1;
    string              name    = 2;
    common.PagingParams paging  = 3;
}
message ListSpuResponse {
    repeated Spu              spus   = 1;
    ceres.common.PagingResult paging = 2;
}

message CreateSpuRequest {
    Spu spu = 1 [ (validate.rules).message = {required : true} ];
}

message CreateSpuResponse {
    Spu spu = 1;
}

message UpdateSpuRequest {
    Spu spu = 1 [ (validate.rules).message = {required : true} ];
}

message UpdateSpuResponse {
    Spu spu = 1;
}

message DeleteSpuRequest {
    uint64 spu_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteSpuResponse {
    Spu spu = 1;
}

message GetSkuRequest {
    uint64 sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetSkuResponse {
    Sku                   sku            = 1;
    repeated SsuInfo      ssu_infos      = 2;
    repeated CategoryInfo category_infos = 3; // [分类1, 分类2, spu]
    //    map<uint64, string>   quotation_name_map = 4; // key 是报价单id, value是报价单名字
}

message GetSkuV2Request {
    uint64 sku_id                       = 1 [ (validate.rules).uint64 = {gt : 0} ];
    bool   need_delete                  = 2;
    bool   need_sku_stock               = 3; // 商品库存
    bool   need_sku_acceptance_criteria = 4; // 需要商品验收标准
}

message GetSkuV2Response {
    Sku                                         sku                 = 1;
    map<uint64, CategoryTreeCache.CategoryInfo> category_map        = 2; // key 是分类ID, value是分类
    map<uint64, Sku>                            ingredient_map      = 3; // 组合商品的子商品
    repeated SkuSaleInventory                   sku_sale_inventorys = 4; // 商品销售库存
    repeated WarehouseStock                     sku_stocks          = 5; // 商品库存
}

// sort 没加，需要放到缓存里排序
message ListSkuRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        SSU            = 256;  // 2^8 是否返回SSU
        PRICE          = 512;  // 2^9 是否返回价格
        CATEGORY       = 1024; // 2^10 是否返回分类
        QUOTATION      = 2048; // 2^11 是否返回报价单
    }
    enum PagingField {
        UNSPECIFIED = 0;
        SPU_IDS     = 1; // 按照spu id的顺序排列 会拉出来
    }

    uint64                    category_id              = 1;
    repeated uint64           spu_ids                  = 2;
    repeated uint64           sku_ids                  = 3;
    repeated string           customize_codes          = 4;
    Sku.SkuType               sku_type                 = 6;
    string                    q                        = 7;
    uint32                    request_data             = 8; // enum RequestData
    common.Filters.Bool       process                  = 9;
    Sku.NotPackageSubSkuType  not_package_sub_sku_type = 10;
    Sku.PackageSubSkuType     package_sub_sku_type     = 11;
    ceres.common.PagingParams paging                   = 15 [ (validate.rules).message = {required : true} ];
    repeated uint64           shelf_ids                = 16; // 货位id
    repeated ceres.common.SortBy sort                  = 17;
    bool                         has_delete            = 18; // 拉取删除的sku数据
    repeated uint64              not_sku_ids           = 20; // 过滤skuid切片
}

message ListSkuResponse {
    message SkuInfo {
        repeated CategoryInfo category_infos = 1; // [分类1, 分类2, spu]
        Sku                   sku            = 2;
        repeated SsuInfo      ssu_infos      = 3; // todo 待上线完成后删除
        //        repeated BasicPrice   basic_prices   = 4;
    }
    repeated SkuInfo sku_infos = 1;
    //    map<uint64, string>       quotation_name_map   = 2; // key 是报价单id, value是报价单名字
    ceres.common.PagingResult paging               = 3;
    map<uint64, string>       finance_category_map = 4; // key 是finance_category_id, value是finance_category_id名字
}
//
//enum BasicPriceSortField {
//    BP_SORT_UNSPECIFIED = 0;
//    BASIC_PRICE_ID      = 1; // 按价格创建时间排序
//}

message BatchApprovetemporarySkuRequest {

    enum PagingField {
        UNSPECIFIED = 0; // 部分语言中枚举值有默认值 0，为了防止意料之外的情况，所以我们认为 0 没有含义
        SORT_NUM    = 1; // 按排序字段排序
        CREATE_TIME = 2; // 按创建时间排序
    }

    enum RequestData {
        RD_UNSPECIFIED     = 0;
        CATEGORY           = 512;  // 2^9 是否返回分类
        FINANCE_CATEGORY   = 1024; //  2^10 是否返回财务分类
        NEED_MIN_MAX_PRICE = 2048; //  2^11 是否返回最大价格最小价格
    }

    FilterParams              filter_params         = 1;
    uint32                    request_data          = 2; // enum RequestData
    bool                      need_delete_data      = 3; // 需要删除的数据
    ceres.common.PagingParams paging                = 4 [ (validate.rules).message = {required : true} ];
    common.SortBy             sort_by               = 5; // field 使用 SkuSortField
    repeated common.SortBy sort_by_list             = 6; // field 使用 SkuSortField
    bool                   need_product_config_data = 7; // 需要客户属性数据
}
message BatchApprovetemporarySkuResponse {
}
message ListSkuV2ForSearchRequest {

    enum PagingField {
        UNSPECIFIED = 0; // 部分语言中枚举值有默认值 0，为了防止意料之外的情况，所以我们认为 0 没有含义
        SORT_NUM    = 1; // 按排序字段排序
        CREATE_TIME = 2; // 按创建时间排序
    }

    enum RequestData {
        RD_UNSPECIFIED     = 0;
        CATEGORY           = 512;  // 2^9 是否返回分类
        FINANCE_CATEGORY   = 1024; //  2^10 是否返回财务分类
        NEED_MIN_MAX_PRICE = 2048; //  2^11 是否返回最大价格最小价格
    }

    FilterParams              filter_params                   = 1;
    uint32                    request_data                    = 2; // enum RequestData
    bool                      need_delete_data                = 3; // 需要删除的数据
    ceres.common.PagingParams paging                          = 4 [ (validate.rules).message = {required : true} ];
    common.SortBy             sort_by                         = 5; // field 使用 SkuSortField
    repeated common.SortBy sort_by_list                       = 6; // field 使用 SkuSortField
    bool                   need_product_config_data           = 7; // 需要客户属性数据
    bool                   need_default_quotation_basic_price = 8; // 默认报价单的价格
}

message ListSkuV2ForSearchResponse {
    repeated Sku                                skus                 = 1;
    map<uint64, string>                         finance_category_map = 2; // key 是finance_category_id, value是finance_category_id名字
    map<uint64, CategoryTreeCache.CategoryInfo> category_map         = 3; // key 是报价单id, value是分类
    map<uint64, Sku>                            ingredient_map       = 5; // 组合商品的子商品
    ceres.common.PagingResult                   paging               = 4;
    map<uint64, enterprise.ConfigInfo>          config_info_map      = 6; // key 是skuId, value是客户商品属性
    map<string, SkuSaleInventory>               sku_sale_inventorys  = 7; // 商品销售库存，key 是sku_id-order_unit_id
    map<uint64, string>                         supplier_sku_alias   = 8; // 商品供应商别名
    map<uint64, BasicPrice>                     basic_price_map      = 9;
    repeated SkuCacheSort                       sku_cache_sorts      = 10;
}

message ListSkuV2Request {

    enum PagingField {
        UNSPECIFIED = 0; // 部分语言中枚举值有默认值 0，为了防止意料之外的情况，所以我们认为 0 没有含义
        SORT_NUM    = 1; // 按排序字段排序
        CREATE_TIME = 2; // 按创建时间排序
    }

    enum RequestData {
        RD_UNSPECIFIED     = 0;
        CATEGORY           = 512;  // 2^9 是否返回分类
        FINANCE_CATEGORY   = 1024; //  2^10 是否返回财务分类
        NEED_MIN_MAX_PRICE = 2048; //  2^11 是否返回最大价格最小价格
    }

    FilterParams              filter_params                   = 1;
    uint32                    request_data                    = 2; // enum RequestData
    bool                      need_delete_data                = 3; // 需要删除的数据
    ceres.common.PagingParams paging                          = 4 [ (validate.rules).message = {required : true} ];
    common.SortBy             sort_by                         = 5; // field 使用 SkuSortField
    repeated common.SortBy sort_by_list                       = 6; // field 使用 SkuSortField
    bool                   need_product_config_data           = 7; // 需要客户属性数据
    bool                   need_default_quotation_basic_price = 8; // 默认报价单的价格
    bool                   need_sku_acceptance_criteria       = 9; // 需要商品验收标准
    bool                   need_account_code                  = 10; // 是否需要科目代码信息
    bool                   need_sku_supplier                  = 11; // 是否需要商品供应商信息
}

message ListSkuV2Response {
    repeated Sku                                skus                 = 1;
    map<uint64, string>                         finance_category_map = 2; // key 是finance_category_id, value是finance_category_id名字
    map<uint64, CategoryTreeCache.CategoryInfo> category_map         = 3; // key 是报价单id, value是分类
    map<uint64, Sku>                            ingredient_map       = 5; // 组合商品的子商品
    ceres.common.PagingResult                   paging               = 4;
    map<uint64, enterprise.ConfigInfo>          config_info_map      = 6; // key 是skuId, value是客户商品属性
    map<string, SkuSaleInventory>               sku_sale_inventorys  = 7; // 商品销售库存，key 是sku_id-order_unit_id
    map<uint64, string>                         supplier_sku_alias   = 8; // 商品供应商别名
    map<uint64, BasicPrice>                     basic_price_map      = 9;
    map<uint64, finance.AccountingSubject>      account_code_map     = 10; // 科目代码列表
    map<uint64, enterprise.Supplier>            sku_supplier_map     = 11; // 商品供应商名称map
}

message ListSkuWithInquiryPriceRequest {
    FilterParams              filter_params    = 1;
    bool                      need_delete_data = 3; // 需要删除的数据
    ceres.common.PagingParams paging           = 4 [ (validate.rules).message = {required : true} ];
    common.SortBy             sort_by          = 5; // field 使用 SkuSortField
    repeated common.SortBy sort_by_list        = 6; // field 使用 SkuSortField
}

message ListSkuWithInquiryPriceResponse {
    repeated Sku              skus   = 1;
    ceres.common.PagingResult paging = 4;
}

message GetSkuByNameUnitRequest {
    string q = 1 [ (validate.rules).string = {min_len : 1} ];

    uint64 unit_id   = 2;
    string unit_name = 3;
}

message GetSkuByNameUnitResponse {
    uint64 exact_sku_id = 1;

    repeated uint64 possible_sku_ids = 2;

    map<uint64, Sku> sku_map = 3;
}

message ListSkuByNameUnitRequest {
    string q           = 1 [ (validate.rules).string = {min_len : 1} ];
    uint64 unit_id     = 2;
    string unit_name   = 3;
    uint64 customer_id = 4;
}

message ListSkuByNameUnitResponse {
    repeated Sku skus = 1;
    // 例:"448556367356102683-测试商品-斤": {type:1,price:"3.00"}}
    map<string, SkuSuggestedPrice> suggested_price_map = 2; // key为{sku_id}-{sku_name}-{unit_name}

    uint64          exact_sku_id     = 3; // 精确匹配的sku_id
    repeated uint64 possible_sku_ids = 4; // 模糊匹配的sku_ids
    repeated uint64 recent_sku_ids   = 5; // 最近3天购买过匹配的sku_ids
}

message ListSkuSuggestedPriceByNameRequest {
    uint64           customer_id   = 1; // 非必填
    string           customer_name = 2; // 非必填
    repeated SkuInfo sku_infos     = 3;
    message          SkuInfo {
        uint64 sku_id    = 1;
        string sku_name  = 2;
        string unit_name = 3;
    }
    bool need_check_auto_price_config = 4; // 需要检测自动获取最近价格开关
}

message ListSkuSuggestedPriceByNameResponse {
    // 例:"448556367356102683-测试商品-斤": {type:1,price:"3.00"}}
    map<string, SkuSuggestedPrice> suggested_price_map = 1; // key为{sku_id}-{sku_name}-{unit_name}
}

message ListRecentSkuPricesRequest {
    uint64 customer_id = 1;
}

message ListRecentSkuPricesResponse {
    map<string, string> sku_price_map = 1; // key为{sku_name}-{unit_name},value为price
}

// 获取sku曾经使用的自定义单位
message GetSkuCustomUnitRequest {
    uint64 sku_id = 1;
}

message GetSkuCustomUnitResponse {
    map<uint64, Unit> custom_unit_map = 3; // key 是unit_id
}

// 获取sku当前在报价单中绑定的所有下单单位
message GetSkuBondOrderUnitRequest {
    uint64 sku_id = 1;
}

message GetSkuBondOrderUnitResponse {
    repeated uint64 bond_order_unit_ids = 1;
}

message ListSkuLiteRequest {
    enum RequestData {
        RD_UNSPECIFIED   = 0;
        CATEGORY         = 512;  // 2^9 是否返回分类
        FINANCE_CATEGORY = 1024; //  2^10 是否返回分类
    }

    FilterParams              filter_params = 1;
    uint32                    request_data  = 2; // enum RequestData
    ceres.common.PagingParams paging        = 4 [ (validate.rules).message = {required : true} ];
    common.SortBy             sort_by       = 5; // field 使用 SkuSortField
}

message ListSkuLiteResponse {
    repeated Sku                                skus                 = 1;
    map<uint64, string>                         finance_category_map = 2; // key 是finance_category_id, value是finance_category_id名字
    map<uint64, CategoryTreeCache.CategoryInfo> category_map         = 3; // key 是报价单id, value是分类
    map<uint64, BasicPrice>                     basic_price_map      = 4;
    ceres.common.PagingResult                   paging               = 5;
}

message ListOfficialSkuRequest {
    ListSkuV2Request req = 1;
}

message ListOfficialSkuResponse {
    ListSkuV2Response res = 1;
}

message ListSkuForBindingQuotationRequest {
    FilterParams              filter_params    = 1;
    ceres.common.PagingParams paging           = 2 [ (validate.rules).message = {required : true} ];
    common.SortBy             sort_by          = 3; // field 使用 SkuSortField
    bool                      exclude_bond_sku = 4; // 是否排除已经在报价单绑定的SKU
}

message ListSkuForBindingQuotationResponse {
    repeated Sku              skus          = 1;
    repeated uint64           bound_sku_ids = 2;
    ceres.common.PagingResult paging        = 4;
}

message ListSkuForBindCustomerQuotationRequest {
    FilterParams              filter_params = 1;
    ceres.common.PagingParams paging        = 2 [ (validate.rules).message = {required : true} ];
    common.SortBy             sort_by       = 3; // field 使用 SkuSortField
}

message ListSkuForBindCustomerQuotationResponse {
    repeated Sku              skus         = 1;
    repeated BasicPrice       basic_prices = 2;
    ceres.common.PagingResult paging       = 4;
}

message ListMaskSkuByQuotationRequest {
    FilterParams              filter_params = 1;
    ceres.common.PagingParams paging        = 2 [ (validate.rules).message = {required : true} ];
    common.SortBy             sort_by       = 3; // field 使用 SkuSortField
}

message ListMaskSkuByQuotationResponse {
    repeated Sku                                skus         = 1;
    ceres.common.PagingResult                   paging       = 2;
    map<uint64, CategoryTreeCache.CategoryInfo> category_map = 3; // key 是报价单id, value是分类
}

message GetManySkuV2Request {
    enum RequestData {
        RD_UNSPECIFIED   = 0;
        CATEGORY         = 512;  // 2^9 是否返回分类
        FINANCE_CATEGORY = 1024; //  2^10 是否返回分类
    }

    FilterParams filter_params = 1;
    uint32       request_data  = 2; // enum RequestData
}

message GetManySkuV2Response {
    map<uint64, Sku>                            sku_map              = 1;
    map<uint64, string>                         finance_category_map = 2; // key 是finance_category_id, value是finance_category_id名字
    map<uint64, CategoryTreeCache.CategoryInfo> category_map         = 3; // key 是分类ID, value是分类
    map<uint64, Sku>                            ingredient_map       = 4; // 组合商品的子商品
    map<string, SkuSaleInventory>               sku_sale_inventory   = 5; // key 是"sku_id-order_unit_id",value是商品对应的销售库存
}

message ExportSkuRequest {
    repeated uint64          category_ids             = 1;
    repeated uint64          spu_ids                  = 2;
    repeated uint64          sku_ids                  = 3;
    repeated string          customize_codes          = 4;
    Sku.SkuType              sku_type                 = 6;
    string                   q                        = 7;
    uint32                   request_data             = 8; // enum RequestData
    common.Filters.Bool      process                  = 9;
    Sku.NotPackageSubSkuType not_package_sub_sku_type = 10;
    Sku.PackageSubSkuType    package_sub_sku_type     = 11;

    //    Sku.ProcessType          process_type             = 12;
    repeated uint64 shelf_ids          = 13;
    repeated common.SortBy sort        = 14;
    repeated string        need_fields = 9999; // 需要导出的字段，传空表示全部
    uint64                 supplier_id = 15;
    repeated string        bar_codes   = 16; //
    
/*
need_fields:
SkuName:商品名称
SkuCustomizeCode:商品编码
Category1Name:一级分类名
Category2Name:二级分类名
Process:开启加工
ProcessType:加工类型
SkuDesc:商品描述
ExpiryDate:保质期

SupplierCustomizeCode:默认供应商编码
SupplierName:默认供应商名称
PurchaserAccount:默认采购员账号
PurchaseName:默认采购员名称
PurchaseSsuCustomizeCode:采购规格编码

SsuCustomizeCode:销售规格编码
SsuName:销售规格名
SsuDesc:销售规格描述
ShippingFeeUnit:定价方式
PackageUnitRate:销售规格
PackageUnitName:销售单位
MinimumOrderNumber:最小下单数
SaleStock:销售库存设置
Stock:库存
OnSale:上架状态
IsWeight:计重方式
DefaultPrice:菜谱中单价

FinanceCategory1:一级税收分类
FinanceCategory2:二级税收分类
Tax:销项税率
InputTax:进项税率
SupplierInputTax:供应商进项税率

Quotation: 报价单

*/
}

message ExportSkuResponse {
    asynctask.Task task = 1;
}

message ExportSkuV2Request {
    ListSkuV2Request list_sku_v2_request = 1;
    repeated string  need_fields         = 9999; // 需要导出的字段，传空表示全部。need_fields 会决定表头顺序
    uint64           supplier_id         = 2;
    
/*
    need_fields:
         CustomizeCode: 商品编码
         Name: 商品名称
         Alias: 商品别名
         CategoryName:分类名
         NotPackageSubSkuType: 商品类型
         MinPriceMaxPrice: 价格范围
         SkuDesc: 商品描述
         OnSale: 销售状态
         IsWeight: 分拣类型(计重/不计重)
         BaseUnitName: 基本单位名
         SecondBaseUnitName: 辅助单位名
         SecondBaseUnitRatio: 辅助单位换算比例
         PurchaseUnitName: 采购单位
         SaleStock:销售库存
         Stock:自定义库存数
         ManualPurchase: 库存采购
         SupplierCooperateModelType: 供应商协作模式
         SupplierId: 默认供应商
         PurchaserId: 默认采购员
         LossRatio: 损耗比例
         ExpiryDate: 保质期
         PackageSkuName: 包装材料
         PackageCalculateType: 换算方式
         PackageNum:  包材数量
         InputTax: 进项税率（填写0~100，填错格式或不填则不修改）
         SupplierInputTax: 供应商特殊税率(填写0~100的整数，如填写8，则特殊税率8%，不填则不设置特殊税率)

 */
}

message ExportSkuV2Response {
    asynctask.Task task = 1;
}

message ExportLiteSkuRequest {
    ListSkuV2Request list_sku_v2_request = 1;
    repeated string  need_fields         = 9999; // 需要导出的字段，传空表示全部。need_fields 会决定表头顺序
    uint64           supplier_id         = 2;
    
/*
    need_fields:
         CustomizeCode: 商品编码
         Name: 商品名称
         Alias: 商品别名
         CategoryName:分类名
         NotPackageSubSkuType: 商品类型
         MinPriceMaxPrice: 价格范围
         SkuDesc: 商品描述
         OnSale: 销售状态
         IsWeight: 分拣类型(计重/不计重)
         BaseUnitName: 基本单位名
         SecondBaseUnitName: 辅助单位名
         SecondBaseUnitRatio: 辅助单位换算比例
         PurchaseUnitName: 采购单位
         SaleStock:销售库存
         Stock:自定义库存数
         ManualPurchase: 库存采购
         SupplierCooperateModelType: 供应商协作模式
         SupplierId: 默认供应商
         PurchaserId: 默认采购员
         LossRatio: 损耗比例
         ExpiryDate: 保质期
         PackageSkuName: 包装材料
         PackageCalculateType: 换算方式
         PackageNum:  包材数量
         InputTax: 进项税率（填写0~100，填错格式或不填则不修改）
         SupplierInputTax: 供应商特殊税率(填写0~100的整数，如填写8，则特殊税率8%，不填则不设置特殊税率)

 */
}

message ExportLiteSkuResponse {
    asynctask.Task task = 1;
}

message ExportSkuExecuteData {
    uint64             supplier_id           = 1;
    ExportSkuV2Request export_sku_v2_request = 2;

    string excel_id   = 11;
    string sheet_name = 12;
}

// sort 没加，需要放到缓存里排序
message GetManySkuRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        SSU            = 256;  // 2^8 是否返回SSU
        PRICE          = 512;  // 2^9 是否返回价格
        CATEGORY       = 1024; // 2^10 是否返回分类
    }

    uint64                   category_id              = 1;
    repeated uint64          spu_ids                  = 2;
    repeated uint64          sku_ids                  = 3;
    repeated string          customize_codes          = 4;
    Sku.SkuType              sku_type                 = 6;
    string                   q                        = 7;
    uint32                   request_data             = 8; // enum RequestData
    common.Filters.Bool      process                  = 9;
    Sku.NotPackageSubSkuType not_package_sub_sku_type = 10;
    Sku.PackageSubSkuType    package_sub_sku_type     = 11;

    //    Sku.ProcessType          process_type             = 12;
    repeated uint64 shelf_ids   = 13;
    repeated common.SortBy sort = 14; // 为了实现接口SkuFilter
}

message GetManySkuResponse {
    message SkuInfo {
        repeated CategoryInfo category_infos = 41; // [分类1, 分类2 ]
        Sku                   sku            = 2;
        map<uint64, SsuInfo>  ssu_map        = 3; // key是unit_id
    }
    map<uint64, SkuInfo> sku_map = 1; // key是sku_id
}

message GetSkuSnapRequest {
    uint64 sku_id       = 1;
    uint64 sku_revision = 2;
}

message GetSkuSnapResponse {
    Sku sku = 1;
}

message GetManySkuSnapRequest {
    repeated SkuSnapID sku_snap_ids = 1;
}

message GetManySkuSnapResponse {
    map<string, Sku> sku_snap_map = 1; // key是 "{sku_id}-{sku_revision}"，例如 "1234111-1231111"
}

message UpdateManySkuSnapV2Request {
    repeated Sku skus = 1;
}

message UpdateManySkuSnapV2Response {
    map<string, Sku> sku_snap_map = 1; // key是 "{sku_id}_{sku_revision}"，例如 "1234111_1231111"
}

message QuerySkuSnapshotRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}
message QuerySkuSnapshotResponse {
    repeated Sku sku_snapshots       = 1;
    ceres.common.PagingResult paging = 100;
}

message GetManySkuSnapV2Request {
    repeated SkuSnapID sku_snap_ids = 1;
}

message GetManySkuSnapV2Response {
    map<string, Sku> sku_snap_map = 1; // key是 "{sku_id}_{sku_revision}"，例如 "1234111_1231111"
}

message CreateSkuV2Request {
    enum SkuSource {
        SKU_SOURCE_UNSPECIFIED = 0;
        SKU_SOURCE_STANDARD    = 1; // 标准版
        SKU_SOURCE_LITE        = 2; // 轻巧版
    }

    Sku                 sku          = 1 [ (validate.rules).message = {required : true} ];
    repeated BasicPrice basic_prices = 2; // 只有轻巧版才需要传此数据
    bool                create_spu   = 3; // 创建SPU, 轻巧版使用的是两层分类
    SkuSource           sku_source   = 4; // 商品来源（标准版、轻巧版）
}

message CreateSkuV2Response {
    Sku                 sku          = 1;
    repeated BasicPrice basic_prices = 2; // 只有轻巧版才需要传此数据
}

message CreateLiteSkuRequest {
    Sku                 sku          = 1 [ (validate.rules).message = {required : true} ];
    repeated BasicPrice basic_prices = 2; // 只有轻巧版才需要传此数据
    bool                create_spu   = 3; // 创建SPU, 轻巧版使用的是两层分类
}

message CreateLiteSkuResponse {
    Sku                 sku          = 1;
    repeated BasicPrice basic_prices = 2; // 只有轻巧版才需要传此数据
}

message CheckLiteSkuNameUnitExistRequest {
    string name         = 1;
    uint64 base_unit_id = 2; // 基本单位
}

message CheckLiteSkuNameUnitExistResponse {
    Sku sku = 1;
}

message UpsertSkuV2Request {
    Sku                 sku                     = 1 [ (validate.rules).message = {required : true} ];
    repeated BasicPrice basic_prices            = 2; // 只有轻巧版才需要传此数据
    bool                create_spu              = 3; // 创建SPU, 轻巧版使用的是两层分类
    bool                skip_create_basic_prise = 4; // 轻巧版创建订单不需要basic_price
    uint64              upsert_target_unit_id   = 5; // 需要处理的目标unitId,不根据改动sku.base_unit_id识别
}

message UpsertSkuV2Response {
    Sku                 sku          = 1;
    repeated BasicPrice basic_prices = 2; // 只有轻巧版才需要传此数据
    bool new                         = 3;
}

message UpsertManySkuV2Request {
    repeated UpsertSkuV2Request items = 1;
}

message UpsertManySkuV2Response {
    repeated UpsertSkuV2Response items = 1;
}

message BatchUpsertSkuV2Request {
    repeated UpsertSkuV2Request items = 1;
}

message BatchUpsertSkuV2Response {
    repeated UpsertSkuV2Response items = 1;
}

message CreateManySkuV2Request {
    //    review 复数
    repeated CreateSkuV2Request create_sku_requests = 1 [ (validate.rules).repeated = {min_items : 1, max_items : 10} ];
}

message CreateManySkuV2Response {
}

message UpdateSkuByMapV2Request {
    repeated uint64     sku_ids           = 1 [ (validate.rules).repeated = {min_items : 1} ];
    common.Filters.Bool has_purchase_rule = 2;
}

message UpdateSkuByMapV2Response {
}

message UpdateSkuLevelV2Request {
    uint64        sku_id    = 1 [ (validate.rules).uint64 = {gt : 0} ];
    Sku.SkuLevels sku_level = 2;
}

message UpdateSkuLevelV2Response {
    Sku sku = 1;
}

message UpdateSkuV2Request {
    Sku                       sku                      = 1 [ (validate.rules).message = {required : true} ];
    repeated BasicPrice       basic_prices             = 2; // 只有轻巧版才需要传此数据
    repeated BasicPrice       ingredient_basic_prices  = 3; // 组合商品的子商品绑定报价单, 使用增量更新的接口
    bool                      sync_combine_sku_on_sale = 4; //  同步更新组成商品对应的组合商品的可售状态
    bool                      not_create_snap          = 5; // true:不创建快照 false:创建快照
    repeated SkuSaleInventory sku_sale_inventorys      = 6; // 商品销售库存
}

message UpdateSkuV2Response {
    Sku                       sku                 = 1;
    repeated BasicPrice       basic_prices        = 2; // 只有轻巧版才需要传此数据
    repeated SkuSaleInventory sku_sale_inventorys = 3; // 商品销售库存
}

message GetSsuSnapRequest {
    uint64 sku_id       = 1;
    uint64 unit_id      = 2;
    uint64 ssu_revision = 3;
}

message GetSsuSnapResponse {
    Ssu ssu = 1;
}

message GetManySsuSnapRequest {
    repeated SsuSnapID ssu_snap_ids = 1;
}

message GetManySsuSnapResponse {
    map<string, Ssu> ssu_snap_map = 1; // key是 "{sku_id}_{unit_id}_{ssu_revision}"，例如 "1234111-2-1231111"
}

message GetSkuNameCacheV2Request {
    uint64 group_id    = 1;
    uint64 update_time = 2;
}

message GetSkuNameCacheV2Response {
    message NameAndAlias {
        string          sku_name     = 1;
        repeated string alias        = 2;
        uint64          base_unit_id = 3;
    }
    uint64                    update_time    = 1;
    map<uint64, string>       sku_names      = 2 [ deprecated = true ];
    map<uint64, NameAndAlias> name_and_alias = 3;
}

message GetGroupSkuSimpleInfoCacheRequest {
    uint64 group_id    = 1; // 客户ID
    uint64 update_time = 2; // 客户端侧记录的最近更新时间，如果小于服务端侧的更新时间，则服务端返回最新数据
}

message GetGroupSkuSimpleInfoCacheResponse {
    uint64          update_time           = 1; // 最近更新的时间戳
    repeated string sku_custom_unit_names = 2; // sku 自定义单位名称
    repeated string sku_names             = 3; // sku名称，包含别名
}

message DeleteSkuV2Request {
    uint64 sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteSkuV2Response {
    Sku sku = 1;
}

message RecoverSkuV2Request {
    uint64 sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message RecoverSkuV2Response {
    Sku sku = 1;
}

message UpdateDeletedSkuRequest {
    Sku sku = 1 [ (validate.rules).message = {required : true} ];
}

message UpdateDeletedSkuResponse {
    Sku sku = 1;
}

message RecoverBasicPriceBySkuRequest {
    repeated string sku_custom_code = 1;
    repeated uint64 sku_ids         = 2;
    repeated uint64 quotation_ids    = 3;
    uint64 start_time       = 4;
    uint64 end_time         = 5;
}

message RecoverBasicPriceBySkuResponse {
    repeated uint64 quotation_ids    = 1;
}

message BatchUpdateSkuSsuRequest {
    string file_url    = 1 [ (validate.rules).string = {min_len : 1} ];
    uint64 supplier_id = 2;
}

message BatchUpdateSkuSsuResponse {
    asynctask.Task task = 1;
}

message GetSsuRequest {
    SsuId ssu_id = 1;
    //    uint64 real_ssu_id    = 3; //
    //    string customize_code = 2; //
}

message GetSsuResponse {
    Ssu ssu = 1;
    //    repeated BasicPrice       basic_prices               = 2;
    //    map<string, SsuTotalInfo> ingredient_map             = 3; // key 是 sku_id_unit_id
    //    map<uint64, SsuTotalInfo> real_ssu_id_ingredient_map = 4; // key 是 ssu_id
}

// 批量新增/修改
message BulkImportSkuByExcelV2Request {
    enum BulkCreateCategorySkuV2Type {
        TIME_TYPE_UNSPECIFIED                 = 0;
        BULK_CREATE_CATEGORY_SKU_TYPE_DEFAULT = 1; // 标准版
        BULK_CREATE_CATEGORY_SKU_TYPE_LITE    = 2; // 轻巧版
    }
    BulkCreateCategorySkuV2Type type     = 9;
    string                      file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message BulkImportSkuByExcelV2Response {
    asynctask.Task task = 1;
}

message BulkCreateCategorySkuV2Request {
    enum BulkCreateCategorySkuV2Type {
        TIME_TYPE_UNSPECIFIED                 = 0;
        BULK_CREATE_CATEGORY_SKU_TYPE_DEFAULT = 1; // 标准版
        BULK_CREATE_CATEGORY_SKU_TYPE_LITE    = 2; // 轻巧版
    }
    BulkCreateCategorySkuV2Type type     = 9;
    string                      file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message BulkCreateCategorySkuV2Response {
    asynctask.Task task = 1;
}

message BulkCreateLiteCategorySkuRequest {
    BulkCreateCategorySkuV2Request.BulkCreateCategorySkuV2Type type     = 1;
    string                                                     file_url = 2 [ (validate.rules).string = {min_len : 1} ];
}

message BulkCreateLiteCategorySkuResponse {
    asynctask.Task task = 1;
}

message BulkCreateCategorySkuV2Data {
    string                                                     file_url                      = 1 [ (validate.rules).string = {min_len : 1} ]; //
    repeated Row                                               error_row_list                = 2;                                             // 错误数据
    BulkCreateCategorySkuV2Request.BulkCreateCategorySkuV2Type bulk_create_category_sku_type = 3;
    repeated string                                            header                        = 4;
    uint64                                                     last_sort_num                 = 5; //导入商品前最大的商品排序
}

message BulkUpdateSkuByExcelV2Request {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message BulkUpdateSkuByExcelV2Response {
    asynctask.Task task = 1;
}

message BulkUpdateLiteSkuByExcelRequest {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message BulkUpdateLiteSkuByExcelResponse {
    asynctask.Task task = 1;
}

message BulkUpdateSkuByExcelV2Data {
    BulkUpdateSkuByExcelV2Request bulk_update_sku_by_excel_v2_req = 1; //
    repeated Row                  error_row_list                  = 2; //
}

message BulkUpdateSkuV2Request {
    FilterParams        filter_params                            = 1;
    uint64              category_id                              = 2; // 修改分类ID
    common.Filters.Bool on_sale                                  = 3; // 上下架
    bool delete                                                  = 4; // 删除
    uint64                         shelf_id                      = 5; //默认货位
    Sku.SupplierCooperateModelType supplier_cooperate_model_type = 6; //供应商协作模式

    bool sync_combine_sku_on_sale = 10; // 同步更新组成商品对应的组合商品的可售状态

    uint64 stock_code       = 7;  // 存货科目代码
    uint64 sale_income_code = 8;  // 销售收入科目代码
    uint64 sale_cost_code   = 9;  // 销售成本科目代码
    string stock_type_code  = 11; // 存货类别编码
    string stock_type_name  = 12; // 存货类别名称
}

message BulkUpdateSkuV2Response {
    asynctask.Task task = 1;
}

message BulkUpdateSkuV2Param {
    BulkUpdateSkuV2Request    bulk_update_sku_request = 1;
    repeated ErrorAsyncResult error_async_results     = 2;
    uint64                    execute_sku_id          = 3; // 当前执行到的sku_id
}

message BulkUpdateBasicPriceV2Param {
    BulkUpdateBasicPriceV2Request bulk_update_basic_price_request = 1;
    repeated ErrorAsyncResult     error_async_results             = 2;
    uint64                        execute_basic_price_id          = 3; // 当前执行到的sku_id
}
message BulkUpdateCustomerBasicPriceV2Param {
    BulkUpdateCustomerBasicPriceV2Request bulk_update_customer_basic_price_request = 1;
    repeated ErrorAsyncResult             error_async_results                      = 2;
    uint64                                execute_basic_price_id                   = 3; // 当前执行到的sku_id
}

// 采购商按商品查看
message ListSsuRequest { // spu不算分类
    //    repeated uint64 category_ids = 1;
    //    repeated uint64 spu_ids      = 2;
    //    repeated uint64 sku_ids      = 3;
    //    string          q            = 4;
    // common.Filters.Bool       has_image                = 5; // 1：有图片，2：没有图片
    //    common.Filters.Bool      on_sale                  = 6; // 1：在售，2：下架
    //    Sku.SkuType              sku_type                 = 7; //
    //    Sku.NotPackageSubSkuType not_package_sub_sku_type = 8; // 1：在售，2：下架
    //    Sku.PackageSubSkuType    package_sub_sku_type     = 9; // 1：在售，2：下架
    repeated SsuId ssu_ids = 10;
    //    repeated uint64          real_ssu_ids             = 18; //
    //    common.Filters.Bool      process                  = 11; // 1：在售，2：下架
    //    repeated string          customize_codes          = 12;
    //    bool                     need_delete_data         = 13; // 需要删除的数据
    //    common.Filters.Bool      need_package_work        = 14; // 进入打包流程
    //    Ssu.Type                 type                     = 15; // ssu 类型
    // common.Filters.Bool       has_default_price        = 16; // 有默认价格的商品
    //    common.Filters.Bool       has_inquiry = 17; // 七日内询过价
    //    ceres.common.PagingParams paging      = 20 [ (validate.rules).message = {required : true} ];
}
// 采购商按商品查看
message ListSsuByRelationGroupRequest { // spu不算分类
    ListSsuRequest list_ssu_request  = 1;
    uint64         relation_group_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
}
// 采购商按商品查看
message ListSsuByRelationGroupResponse { // spu不算分类
    ListSsuResponse list_ssu_response = 1;
}

message ListSsuResponse { // spu不算分类
    repeated SsuInfo ssu_infos = 1;
    //    ceres.common.PagingResult paging    = 2;
    message SsuInfo {
        Ssu ssu = 1;
        //        repeated BasicPrice   basic_prices   = 2;
        Sku                   sku            = 3;
        repeated CategoryInfo category_infos = 4; // [分类1, 分类2, spu]
    }
    //    map<string, SsuTotalInfo> ingredient_map             = 3; // key 是 sku_id_unit_id
    //    map<uint64, SsuTotalInfo> real_ssu_id_ingredient_map = 4; // key 是 ssu_id
}

message CreateRuleSetRequest {
    RuleSet rule_set        = 1 [ (validate.rules).message = {required : true} ];
    bool    ignore_conflict = 2; // TRUE: 发生冲突时，将老规则里冲突的ssu删除，新规则生成成功；FALSE：发生冲突时，返回冲突，新规则生成失败
}

message CreateRuleSetResponse {
    RuleSet                       rule_set          = 1;
    map<uint64, RuleConflictData> conflict_data_map = 2; // 规则冲突了。ssu在当前报价单下且当前运营时间下,已经有规则。key 是rule_set_id,value 是这个rule_set下冲突的ConflictData
}

message UpdateRuleSetRequest {
    RuleSet rule_set        = 1 [ (validate.rules).message = {required : true} ];
    bool    ignore_conflict = 2; // TRUE: 发生冲突时，将老规则里冲突的ssu删除，新规则生成成功；FALSE：发生冲突时，返回冲突，新规则生成失败
}

message UpdateRuleSetResponse {
    RuleSet                       rule_set          = 1;
    map<uint64, RuleConflictData> conflict_data_map = 2; // 规则冲突了。ssu在当前报价单下且当前运营时间下,已经有规则。key 是rule_set_id,value 是这个rule_set下冲突的ConflictData
}

message DeleteRuleSetRequest {
    uint64 rule_set_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteRuleSetResponse {
    RuleSet rule_set = 1;
}

message GetRuleSetRequest {
    uint64 rule_set_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetRuleSetResponse {
    RuleSet rule_set = 1;
}

message ListRuleSetRequest {
    RuleSet.State             state  = 1; // 状态
    string                    q      = 2; // 搜索协议单名字
    ceres.common.PagingParams paging = 3;
}

message ListRuleSetResponse {
    repeated RuleSet          rule_set      = 1;
    map<uint64, Quotation>    quotation_map = 2; // 报价单map
    ceres.common.PagingResult paging        = 3;
}
message CreateUnitRequest {
    Unit unit = 1;
}

message CreateUnitResponse {
    Unit unit = 1;
}

message UpdateUnitRequest {
    Unit unit = 1;
}

message UpdateUnitResponse {
    Unit unit = 1;
}

message DeleteUnitRequest {
    uint64 unit_id = 1;
}

message DeleteUnitResponse {
    Unit unit = 1;
}

message ListUnitRequest {
    uint64          related_unit_id = 1; // 找出这个单位对应type的所有单位。比如吨的type是重量，这个字段传吨的ID，会返回所有重量相关的unit。
    repeated uint64 unit_ids        = 2; // 找到此id对应的单位
}

message ListUnitResponse {
    repeated Unit units = 1;
}

message ListGroupUnitRequest {
    uint64 min_id = 1; // 只返回id大于该值的数据
}

message ListGroupUnitResponse {
    repeated Unit units = 1;
}

message ListUnitOfGroupRequest {
    // 不返回系统预设单位
    bool without_preset_unit = 1;
}

message ListUnitOfGroupResponse {
    repeated Unit units = 1;
}

//message GetSetUnitByNameRequest {
//    Unit unit = 1;
//}
//
//message GetSetUnitByNameResponse {
//    Unit unit = 1;
//}

message InitCategoryImageRequest {
    bool testing = 1; // 如果 testing 为 true，则不会真的上传图片，用于单元测试的场景中。
}
message InitCategoryImageResponse {
}

message ListCategoryImageRequest {
}
message ListCategoryImageResponse {
    repeated CategoryImage images = 1;
}

// 查询商品是否存在客户报价单中
message GetFilterSkuInCustomerQuotationRequest {
    uint64                 customer_id  = 1; // 客户id
    repeated FilterSkuInfo sku_info     = 2; // 商品信息
    uint64                 receive_time = 3; // 收货时间
}
message GetFilterSkuInCustomerQuotationResponse {
    repeated FilterSkuInfo sku_info            = 1; // 商品信息
    bool                   has_valid_quotation = 2; // 在当前的收货时间客户是否有正在进行中报价单
}

// Quotation 报价单
message GetQuotationRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
    bool   filter_unvet = 2;
}

message GetQuotationResponse {
    Quotation           quotation                   = 1;
    repeated uint64     customer_ids                = 2;
    repeated MenuPeriod menu_periods                = 3;
    uint64              child_quotation_quantity    = 4; // 子报价单数量
    uint64              customer_quotation_quantity = 5; // 客户协议单的报价单数量
}

message GetDefaultQuotationRequest {
}

message GetDefaultQuotationResponse {
    Quotation quotation = 1;
}

message CreateQuotationRequest {
    Quotation       quotation    = 1 [ (validate.rules).message = {required : true} ];
    repeated uint64 customer_ids = 2; // todo 待删除
}

message CreateQuotationResponse {
    Quotation       quotation    = 1;
    repeated uint64 customer_ids = 2; // todo 待删除
}

message CreateQuotationV2Request {
    Quotation quotation = 1 [ (validate.rules).message = {required : true} ];
    bool      is_copy   = 2; // 是否是复制
}

message CreateQuotationV2Response {
    Quotation quotation = 1;
}

message UpdateQuotationRequest {
    Quotation quotation = 1 [ (validate.rules).message = {required : true} ];
    // repeated uint64 customer_ids = 2; // todo 待删除
}

message UpdateQuotationResponse {
    Quotation quotation = 1;
    // repeated uint64 customer_ids = 2; // todo 待删除
}

message UpdateQuotationV2Request {
    Quotation quotation = 1 [ (validate.rules).message = {required : true} ];
}

message UpdateQuotationV2Response {
    Quotation quotation = 1;
}

message BulkUpdateQuotationV2Request {
    FilterParams     filter_params    = 1;
    Quotation.Status quotation_status = 2;
    bool delete                       = 3;
}

message BulkUpdateQuotationV2Response {
    asynctask.Task task = 1;
}

message BulkUpdateQuotationV2Param {
    BulkUpdateQuotationV2Request bulk_update_quotation_request = 1;
    repeated ErrorAsyncResult    error_async_results           = 2;
    uint64                       execute_quotation_id          = 3; // 当前执行到的报价单ID
}

message BulkUnsetCustomerQuotationRelationV2Request {
    enterprise.ListCustomerRequest list_customer_request = 2;
}

message BulkUnsetCustomerQuotationRelationV2Response {
    asynctask.Task task = 1;
}

message BulkUnsetCustomerToCustomerQuotationRelationV2Request {
    enterprise.ListCustomerRequest list_customer_request = 2;
}

message BulkUnsetCustomerToCustomerQuotationRelationV2Response {
    asynctask.Task task = 1;
}

message BulkUpdateBasicPriceV2Request {
    FilterParams          filter_params  = 1;
    repeated BasicPriceId basic_price_id = 2;
    common.Filters.Bool   on_shelf       = 3;
    bool delete                          = 4;
    bool sync_combine_sku_on_shelf       = 10; // 同步更新组成商品对应的组合商品上下架状态
}

message BulkUpdateBasicPriceV2Response {
    asynctask.Task task = 1;
}

message BulkUpdateCustomerBasicPriceV2Request {
    FilterParams          filter_params                    = 1;
    repeated BasicPriceId basic_price_id                   = 2;
    bool delete                                            = 4;
    BasicPriceItem.PriceCalculateRule price_calculate_rule = 11; // 客户协议价更新计算规则
    BasicPriceItem.PriceIntervals     price_intervals      = 12; // 价格区间
    BasicPriceItem.PRICINGTYPE        pricing_type         = 13; // 定价类型
    BasicPriceItem.PRICINGFORMULA     pricing_formula      = 14; // 定价公式模式 如果非0则走预设公式逻辑,0则走公式定价逻辑
}

message BulkUpdateCustomerBasicPriceV2Response {
    asynctask.Task task = 1;
}

// 复制周期报价单
message CopyPeriodQuotationV2Param {
    CopyPeriodQuotationV2Request         copy_quotation_request = 1;
    repeated Quotation                   copy_quotations        = 2; // 需要被复制的周期报价单
    uint64                               execute_basic_price_id = 3; // 当前执行到的sku_id
    Sku.SkuType                          sku_type               = 4; // 当前执行到的商品类型
    uint64                               copy_basic_price_num   = 5; // 已经复制的basic条数
    map<uint64, CopySourceQuotationInfo> source_quotation       = 6; // 新的报价单id =》 需要复制的报价单信息
}

message CopyPeriodQuotationV2Request {
    uint64    source_quotation_id = 1;
    Quotation quotation           = 2;
}

message CopyPeriodQuotationV2Response {
    asynctask.Task task = 1;
}

message CopyQuotationV2Request {
    uint64    source_quotation_id = 1;
    Quotation quotation           = 2;
}

message CopyQuotationV2Response {
    asynctask.Task task = 1;
}

message CopyQuotationV2Param {
    CopyQuotationV2Request    copy_quotation_request = 1;
    repeated ErrorAsyncResult error_async_results    = 2;
    uint64                    execute_basic_price_id = 3; // 当前执行到的sku_id
    Sku.SkuType               sku_type               = 4; // 当前执行到的商品类型
}

message DeleteQuotationRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteQuotationResponse {
    Quotation quotation = 1;
}

message DeleteQuotationV2Request {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteQuotationV2Response {
    Quotation quotation = 1;
}

message DeleteLiteQuotationRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteLiteQuotationResponse {
    Quotation quotation = 1;
}

message BindMaskSkuToCustomerQuotationRequest {
    uint64          quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
    repeated uint64 mask_sku_ids = 2; // 需要被屏蔽的商品Sku_id
}

message BindMaskSkuToCustomerQuotationResponse {
}

message UnBindMaskSkuToCustomerQuotationRequest {
    uint64          quotation_id   = 1 [ (validate.rules).uint64 = {gt : 0} ];
    repeated uint64 unmask_sku_ids = 2; // 需要解除屏蔽的商品Sku_id
}

message UnBindMaskSkuToCustomerQuotationResponse {
}

//message GetCustomerPriceQuotationRequest {
//    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ]; // 普通报价单
//    uint64 customer_id  = 2;                                        // 需要解除屏蔽的商品Sku_id
//}
//
//message GetCustomerPriceQuotationResponse {
//    Quotation valid_customer_quotation = 1; // 生效的协议单
//    Quotation parent_quotation         = 2; // 被关联的报价单
//}

message GetFilterCustomerIdsRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ]; // 客户协议报价单
}

message GetFilterCustomerIdsResponse {
    repeated uint64 exclude_customer_ids = 1;
}

message BulkUpdateMaskSkuToCustomerQuotationRequest {
    FilterParams    filter_params  = 1;
    repeated uint64 unmask_sku_ids = 2;
    bool delete                    = 3;
}

message BulkUpdateMaskSkuToCustomerQuotationResponse {
    asynctask.Task task = 1;
}

message BulkUpdateMaskSkuToCustomerQuotationParam {
    BulkUpdateMaskSkuToCustomerQuotationRequest bulk_update_mask_sku_to_customer_quotation_request = 1;
    repeated ErrorAsyncResult                   error_async_results                                = 2;
    uint64                                      execute_sku_id                                     = 3; // 当前执行到的sku_id
}

message ListQuotationRequest {
    string              inner_name = 1; // 报价单对内名称
    common.Filters.Bool is_active  = 2; // 是否激活
    //    bool                need_ssu_on_sale_num = 3; //需要在售商品数
    common.PagingParams paging       = 4 [ (validate.rules).message = {required : true} ];
    Quotation.Type      type         = 5;
    uint64              quotation_id = 6;
    common.Filters.Bool is_default   = 8; // 是否默认报价单
    enum TimeType {
        TIME_TYPE_UNSPECIFIED      = 0;
        TIME_TYPE_CREATE_QUOTATION = 1; // 建单时间
        TIME_TYPE_AGREEMENT        = 2; // 协议价开始时间
    }
    TimeType time_type                     = 9;
    string   serial_no                     = 10;
    repeated Quotation.Status statuses     = 11;
    repeated uint64           supplier_ids = 12;

    uint64          start_time       = 13; // 协议价格开始时间
    uint64          end_time         = 14; // 协议价格结束时间
    uint64          purchase_user_id = 15; // 采购员id
    repeated uint64 quotation_ids    = 16;
}

message ListQuotationResponse {

    repeated Quotation quotations = 1;
    //    map<uint64, int32>                ssu_on_sale_num_map = 2; // key:quotation_id, value:在售商品数量
    common.PagingResult               paging            = 3;
    map<uint64, enterprise.Supplier>  supplier_relation = 4;
    map<uint64, enterprise.GroupUser> group_users       = 5;
}

message ListQuotationV2Request {
    FilterParams        filter_params = 1;
    bool                filter_unvet  = 2; // 是否需要精确计算报价单中关联的有效客户
    common.PagingParams paging        = 50 [ (validate.rules).message = {required : true} ];
    repeated common.SortBy sort_by    = 51; // field 使用 QuotationSortField
}

message ListQuotationV2Response {
    repeated Quotation                quotations        = 1;
    common.PagingResult               paging            = 2;
    map<uint64, enterprise.Supplier>  supplier_relation = 4;
    map<uint64, enterprise.GroupUser> group_users       = 5;
}

// 传入客户和生效的时刻，获取在当时生效的报价单类型，只到普通报价单和周期报价单的子报价单层面，不深入到客户协议单层面
message GetValidQuotationByCustomerIdRequest {
    uint64 customer_id           = 1; // 客户
    uint64 period_time           = 2; // 生效的时刻
    bool   need_valid_time_range = 3; // 是否需要生效时间范围
}

message GetValidQuotationByCustomerIdResponse {
    Quotation.Type          quotation_type      = 1; // 客户绑定的是周期报价单还是子报价单
    Quotation.ValidTimeType valid_time_type     = 2; // 如果是周期报价单的话，生效时间类型
    bool                    has_valid_quotation = 3; // 这个客户在那个时间点是否有生效的报价单
    uint64                  valid_quotation_id  = 4; // 生效报价单的quotation_id:周期子报价单/普通报价单； has_valid_quotation = true:valid_quotation_id > 0
    message                 ValidTimeRange {
        uint64 begin_time = 1; // 开始时间
        uint64 end_time   = 2; // 结束时间
    }
    repeated ValidTimeRange valid_time_ranges = 5;
}

message ListQuotationForBindingSkuRequest {
    FilterParams        filter_params = 1;
    common.PagingParams paging        = 4 [ (validate.rules).message = {required : true} ];
    repeated common.SortBy sort_by    = 51; // field 使用 QuotationSortField
}

message ListQuotationForBindingSkuResponse {
    repeated Quotation     quotations            = 1;
    repeated uint64        bound_quotation_ids   = 2;
    common.PagingResult    paging                = 3;
    map<uint64, Quotation> parent_quotations_map = 4;
}

// 根据选中的商品聚合关联的报价单列表，用于批量维护报价
message ListQuotationForBatchUpdateBasicPriceRequest {
    FilterParams        filter_params = 1;
    common.PagingParams paging        = 2 [ (validate.rules).message = {required : true} ];
}

message ListQuotationForBatchUpdateBasicPriceResponse {
    repeated Quotation     quotations            = 1; // 返回聚合的报价单列表
    map<uint64, Quotation> parent_quotations_map = 2; // 返回父报价单信息
    common.PagingResult    paging                = 3;
}

// 历史报价页面查询商品历史的下单单位+与此对应的生效中的报价单
message ListQuotationForHistoryBasicPricesRequest {
    uint64 sku_id                 = 1; // sku_id;
    uint64 order_unit_id          = 2; // 下单单位与商品相关联
    uint64 basic_price_start_time = 3; // 查询 开始时间
    uint64 basic_price_end_time   = 4; // 查询 结束时间
}

message ListQuotationForHistoryBasicPricesResponse {
    // 当q为空时，默认返回报价日期改价最频繁的商品及其信息，和"商品+下单单位"关联的任意3个报价单
    message IvalidQuotations {
        repeated Quotation quotations = 1; // 当前生效的报价单及生效的周期子报价单
    }
    Sku                           sku_info       = 1; // 精确搜索对应的商品，返回商品信息
    repeated uint64               order_unit_ids = 2; // 商品历史报价使用过的下单单位
    map<uint64, IvalidQuotations> quotations_map = 3; // key是order_unit_ids 中对应的order_unit_id
}

// 采购商拉取SSU需要拉取对应的报价单
message GetManyQuotationRequest {
    repeated uint64 quotation_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetManyQuotationResponse {
    map<uint64, Quotation>           quotation_map = 1;
    map<uint64, enterprise.Supplier> suppliers     = 2;
}

message GetManyQuotationByNameRequest {
    repeated string quotation_inner_names = 1;
}

message GetManyQuotationByNameResponse {
    repeated uint64 quotation_ids = 1;
}

message SetCustomerQuotationRelationRequest {
    repeated RelationElement relations = 1;
}

message SetCustomerQuotationRelationResponse {
    // 不返回
}

message SetLiteDefaultQuotationRequest {
    uint64 customer_id = 1;
}

message SetLiteDefaultQuotationResponse {
    // 不返回
}

message UnsetCustomerQuotationRelationRequest {
    repeated RelationElement relations = 1;
}

message UnsetCustomerQuotationRelationResponse {
    // 不返回
}

message DeleteCustomerQuotationRelationRequest {
    repeated uint64 customer_ids = 1;
}

message DeleteCustomerQuotationRelationResponse {
    // 不返回
}

message UpdateQuotationSortNumRequest {
    uint64 quotation_id = 1;
    enum OperationType {
        OPERATION_TYPE_UNSPECIFIED = 0;
        OPERATION_TYPE_TOP         = 1; // 置顶
        OPERATION_TYPE_MOVE_UP     = 2; // 上移
        OPERATION_TYPE_MOVE_DOWN   = 3; // 下移
    }
    OperationType operation_type = 2; // 操作类型
}

message UpdateQuotationSortNumResponse {
}

message GetCustomerIdsByQuotationIdRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetCustomerIdsByQuotationIdResponse {
    repeated uint64 customer_ids = 1;
}

message GetCustomerIdsByQuotationIdsRequest {
    repeated uint64 quotation_ids = 1;
}

message GetCustomerIdsByQuotationIdsResponse {
    message CustomerIds {
        repeated uint64 customer_ids = 1;
    }
    map<uint64, CustomerIds>         quotation_id_customer_ids_map = 1;
    map<uint64, enterprise.Customer> customer_map                  = 2;
}

message GetQuotationByCustomerIdRequest {
    uint64 customer_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 station_id  = 2;
}

message GetQuotationByCustomerIdResponse {
    repeated Quotation  quotation    = 1;
    repeated MenuPeriod menu_periods = 3;
}

message GetQuotationIdsByCustomerIdsRequest {
    repeated uint64 customer_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetQuotationIdsByCustomerIdsResponse {
    map<uint64, common.Uint64Set> relation_map  = 1; // key  是 CustomerId；value 是 QuotationIds
    map<uint64, Quotation>        quotation_map = 2; //  key 是 QuotationId
}

message GetCustomerQuotationRelationRequest {
    repeated uint64     quotation_ids  = 1; // 如果不为空，则返回和这些 ID 有关的所有关系。quotation_ids 和 customer_ids 两个参数至少传一个。
    repeated uint64     customer_ids   = 2; // 如果不为空，则返回和这些 ID 有关的所有关系。quotation_ids 和 customer_ids 两个参数至少传一个。
    Quotation.Type      quotation_type = 3;
    common.Filters.Bool bind_quotation = 4;
}

message GetCustomerQuotationRelationResponse {
    repeated RelationElement relations = 1;
}

message SetBasicPriceRequest {
    repeated BasicPrice basic_prices = 1;
    MenuDetail          menu_detail  = 3;
}

message SetBasicPriceResponse {
    repeated BasicPrice basic_prices = 1;
}

// 全量更新
// 如果 没有对应的 sku_id+quotation_id 的 basicPrice，会新增一条basicPrice
// 如果 存在对应的 sku_id+quotation_id 的 basicPrice，会覆盖式更新basicPrice下的Items.BasicPriceItems
// 当basicPrice的len(Items.BasicPriceItems)==0时，会默认删除这个basicPrice
message SetBasicPriceV2Request {
    repeated BasicPrice basic_prices              = 1;
    repeated BasicPrice ingredient_basic_prices   = 2; // 子商品规格未绑定报价单，需要绑定报价单
    bool                sync_combine_sku_on_shelf = 4; // 同步更新组成商品对应的组合商品上下架状态
    uint64              receive_time              = 5; // 下单时将非报价单商品反绑到报价单时的收货时间
}

message SetBasicPriceV2Response {
}

// 增量更新
// 如果 没有对应的 sku_id+quotation_id 的 basicPrice，会新增一条basicPrice
// 如果 存在对应的 sku_id+quotation_id 的 basicPrice，会增量更新basicPrice下的Items.BasicPriceItems。
// 如果Items.BasicPriceItems.OrderUnitId存在，会更新此条BasicPriceItem；如果不存在，会新增对应OrderUnitId 的BasicPriceItem
message DeltaUpdateBasicPriceV2Request {
    repeated BasicPrice basic_prices              = 1;
    repeated BasicPrice ingredient_basic_prices   = 2; // 子商品规格未绑定报价单，需要绑定报价单
    bool                sync_combine_sku_on_shelf = 3; // 同步更新组成商品对应的组合商品上下架状态
    uint64              receive_time              = 4; // 下单时将非报价单商品的单位反绑到报价单时的收货时间
}

message DeltaUpdateBasicPriceV2Response {
}

// 定向删除
// 如果Items.BasicPriceItems.OrderUnitId存在，会删除指定的此条BasicPriceItem；如果不存在，不影响
message DeltaDeleteBasicPriceV2Request {
    BasicPriceId basic_price_id = 1; // 此时传入的需删除的指定下单单位的item
    //    repeated BasicPrice ingredient_basic_prices = 2; // Todo 子商品规格未绑定报价单，需要绑定报价单
}

message DeltaDeleteBasicPriceV2Response {
}

// 覆盖式更新同一个sku_id+quotation_id 下的价格条目
message SetSpecialBasicPriceV2Request {
    message SpecialBasicPriceInfo {
        uint64     customer_id = 1;
        BasicPrice basic_price = 2;
    }
    repeated SpecialBasicPriceInfo special_basic_price_infos              = 1;
    bool                           is_forbid_sync_default_quotation_price = 2; //是否禁止默认报价单同步协议价
}

message SetSpecialBasicPriceV2Response {
}

// 覆盖式更新同一个sku_id+quotation_id 下的价格条目
message UpdateLiteBasicPriceRequest {
    message SpecialBasicPriceInfo {
        uint64     customer_id = 1;
        BasicPrice basic_price = 2;
    }
    repeated SpecialBasicPriceInfo special_basic_price_infos              = 1;
    bool                           is_forbid_sync_default_quotation_price = 2; //是否禁止默认报价单同步协议价
}

message UpdateLiteBasicPriceResponse {
}

// 获取商品对应的销售库存
message GetManySkuSaleInventoryRequest {
    repeated uint64 sku_ids = 1;
}

message GetManySkuSaleInventoryResponse {
    map<string, SkuSaleInventory> sku_sale_inventory_map = 1; // key是sku_id-order_unit_id，value是销售库存
}

// 商品对应的销售库存以请求中参数为准，全量覆盖更新
message MultiReplaceSkuSaleInventoryRequest {
    repeated SkuSaleInventory sku_sale_inventorys = 1;
    Sku                       sku_info            = 2;
}

message MultiReplaceSkuSaleInventoryResponse {
}

// 商品对应的销售库存以请求中参数为准，如果没有则增量更新，如果有则修改
message MultiDeltaSkuSaleInventoryRequest {
    repeated SkuSaleInventory sku_sale_inventorys = 1;
    Sku                       sku_info            = 2;
}

message MultiDeltaSkuSaleInventoryResponse {
}

// 用户新增辅助单位和自定义单位时根据设置要求自动将此新增单位绑定至该商品已绑定的的报价单上
// 价格取基本单位的价格，没有基本单位的价格则取辅助单位的价格
message AddUnitToBondQuotationsRequest {
    uint64          sku_id       = 1; // 商品ID
    repeated uint64 new_unit_ids = 2; // 新增的单位们
}

message AddUnitToBondQuotationsResponse {
    asynctask.Task task = 1;
}

// 通过定价公式计算价格
message CalBasicPriceV2ByPricingFormulaRequest {
    repeated BasicPrice basic_prices = 1;
}
message CalBasicPriceV2ByPricingFormulaResponse {
    repeated BasicPrice basic_prices = 1;
}

//// 通过定价公式计算价格
//message CalBasicPriceItemByPricingFormulaRequest {
//    repeated MultiQuotationBasicPriceItem multi_quotation_basic_price_items = 1;
//}
//message CalBasicPriceItemByPricingFormulaResponse {
//    repeated MultiQuotationBasicPriceItem multi_quotation_basic_price_items = 1;
//}

message CalculatePricingFormulaRequest {
    uint64         sku_id           = 1;
    BasicPriceItem basic_price_item = 2;
}
message CalculatePricingFormulaResponse {
    string result = 1;
}

message BatchPresetPricingFormulaRequest {
    DeltaUpdateBasicPriceV2ByPricingFormulaRequest request = 1;
}

message BatchPresetPricingFormulaResponse {
    asynctask.Task task = 1;
}

message BatchCalculatePricingFormulaRequest {
    DeltaUpdateBasicPriceV2ByPricingFormulaRequest request = 1;
}

message BatchCalculatePricingFormulaResponse {
    asynctask.Task task = 1;
}

//message BatchSetCustomerPriceCalRuleRequest {
//    DeltaUpdateBasicPriceV2ByPricingFormulaRequest request = 1;
//}
//
//message BatchSetCustomerPriceCalRuleResponse {
//    asynctask.Task task = 1;
//}

message ListSpecialBasicPriceV2Request {
    uint64                    customer_id = 1 [ (validate.rules).uint64 = {gt : 0} ]; // 客户ID
    string                    search_text = 2;                                        // sku编码，sku名模糊搜索
    uint64                    category_id = 3;
    ceres.common.PagingParams paging      = 4 [ (validate.rules).message = {required : true} ];
}

message ListSpecialBasicPriceV2Response {
    repeated BasicPrice       basic_prices           = 1;
    map<uint64, Quotation>    quotation_map          = 2; // key 是报价单id, value是报价单名字
    map<uint64, Sku>          sku_map                = 3; // key 是sku_id, value 是sku。有sku 和子商品
    map<uint64, Uint64List>   customer_id_map        = 4; // key 是报价单id, value 是绑定本报价单的customer_id列表
    map<string, BasicPrice>   ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    ceres.common.PagingResult paging                 = 6;
}

// 获取批量导入客户协议价错误数据请求参数
message ListErrSpecialBasicPriceV2Request {
    uint64 task_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 获取批量导入客户协议价错误数据请求响应
message ListErrSpecialBasicPriceV2Response {
    repeated ImportSpecialBasicPriceData.ImportSpecialBasicPriceInfo err_list = 1;
}

message ListSimpleBasicPriceRequest {
    repeated uint64 basic_price_ids  =   1;
}
message ListSimpleBasicPriceResponse {
    repeated BasicPrice basic_prices =   1;
}

message ListBasicPriceV2Request {
    FilterParams              filter_params = 1;
    ceres.common.PagingParams paging        = 2;
    uint32                    request_data  = 3;
    enum RequestData {
        RD_UNSPECIFIED              = 0;
        SKU                         = 256;  // 2^8 是否返回SKU
        QUOTATION                   = 512;  // 2^9 是否返回价格
        QUOTATION_CUSTOMER_RELATION = 1024; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    string shared_token             = 4; // 传分享时未登录态token
    uint64 without_basic_price_id   = 5; // 不包括此basicPriceId
    uint64 group_id                 = 11;
    uint64 station_id               = 12;
    bool   need_product_config_data = 13; // 需要客户属性数据
    bool   need_customer_rate       = 14; // 是否需要用户的折扣率

    enum PagingField {
        UNSPECIFIED     = 0; // 部分语言中枚举值有默认值 0，为了防止意料之外的情况，所以我们认为 0 没有含义
        BASIC_PRICE_ID  = 1; // 按价格创建时间排序
        NAME            = 2; // 按照商品名称排序
        SORT_NUM        = 3; // 按照商品排序字段排序
        CATEGORY_FIRST  = 4; // 按照一级分类排序
        CATEGORY_SECOND = 5; // 按照二级分类排序
    }

    repeated ceres.common.SortBy sort_by = 100;
}

message ListBasicPriceV2Response {
    repeated BasicPrice                         basic_prices           = 1; //全部报价
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value是报价单名字
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id, value 是sku。有sku 和子商品
    map<uint64, Uint64List>                     customer_id_map        = 4; // key 是报价单id, value 是绑定本报价单的customer_id列表
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price，子商品的报价
    ceres.common.PagingResult                   paging                 = 6;
    map<uint64, enterprise.Supplier>            supplier_map           = 7; // key 是供应商id, value是供应商信息
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 8; // key 是报价单id, value是分类
    map<uint64, enterprise.GroupUser>           group_user_map         = 9;
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 10; // key 是sku_id, value 是客户商品属性别名
    repeated BasicPrice                         parent_basic_prices    = 11; // 协议单关联的报价单中的价格，用于页面上新增条目
}

message ListBasicPriceDetailRequest {
    FilterParams              filter_params = 1;
    ceres.common.PagingParams paging        = 2;
    uint32                    request_data  = 3;
    enum RequestData {
        RD_UNSPECIFIED              = 0;
        SKU                         = 256;  // 2^8 是否返回SKU
        QUOTATION                   = 512;  // 2^9 是否返回价格
        QUOTATION_CUSTOMER_RELATION = 1024; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    string shared_token             = 4; // 传分享时未登录态token
    uint64 without_basic_price_id   = 5; // 不包括此basicPriceId
    uint64 group_id                 = 11;
    uint64 station_id               = 12;
    bool   need_product_config_data = 13; // 需要客户属性数据
    bool   need_customer_rate       = 14; // 是否需要用户的折扣率

    enum PagingField {
        UNSPECIFIED     = 0; // 部分语言中枚举值有默认值 0，为了防止意料之外的情况，所以我们认为 0 没有含义
        BASIC_PRICE_ID  = 1; // 按价格创建时间排序
        NAME            = 2; // 按照商品名称排序
        SORT_NUM        = 3; // 按照商品排序字段排序
        CATEGORY_FIRST  = 4; // 按照一级分类排序
        CATEGORY_SECOND = 5; // 按照二级分类排序
    }

    repeated ceres.common.SortBy sort_by = 100;
}

message ListBasicPriceDetailResponse {
    repeated BasicPrice                         basic_prices           = 1;
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value是报价单名字
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id, value 是sku。有sku 和子商品
    map<uint64, Uint64List>                     customer_id_map        = 4; // key 是报价单id, value 是绑定本报价单的customer_id列表
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    ceres.common.PagingResult                   paging                 = 6;
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 8;  // key 是报价单id, value是分类
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 10; // key 是sku_id, value 是客户商品属性别名
    repeated BasicPrice                         parent_basic_prices    = 11; // 协议单关联的报价单中的价格，用于页面上新增条目
}

message ListLiteBasicPriceRequest {
    FilterParams              filter_params = 1;
    ceres.common.PagingParams paging        = 2;
    uint32                    request_data  = 3;
    enum RequestData {
        RD_UNSPECIFIED              = 0;
        SKU                         = 256;  // 2^8 是否返回SKU
        QUOTATION                   = 512;  // 2^9 是否返回价格
        QUOTATION_CUSTOMER_RELATION = 1024; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    string shared_token             = 4; // 传分享时未登录态token
    uint64 without_basic_price_id   = 5; // 不包括此basicPriceId
    uint64 group_id                 = 11;
    uint64 station_id               = 12;
    bool   need_product_config_data = 13; // 需要客户属性数据
    bool   need_customer_rate       = 14; // 是否需要用户的折扣率

    enum PagingField {
        UNSPECIFIED    = 0; // 部分语言中枚举值有默认值 0，为了防止意料之外的情况，所以我们认为 0 没有含义
        BASIC_PRICE_ID = 1; // 按价格创建时间排序
        NAME           = 2; // 按照商品名称排序
        SORT_NUM       = 3; // 按照商品排序字段排序
    }

    repeated ceres.common.SortBy sort_by = 100;
}

message ListLiteBasicPriceResponse {
    repeated BasicPrice                                        basic_prices           = 1;
    map<uint64, Quotation>                                     quotation_map          = 2; // key 是报价单id, value是报价单名字
    map<uint64, Sku>                                           sku_map                = 3; // key 是sku_id, value 是sku。有sku 和子商品
    map<uint64, Uint64List>                                    customer_id_map        = 4; // key 是报价单id, value 是绑定本报价单的customer_id列表
    map<string, BasicPrice>                                    ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    ceres.common.PagingResult                                  paging                 = 6;
    map<uint64, enterprise.Supplier>                           supplier_map           = 7; // key 是供应商id, value是供应商信息
    map<uint64, CategoryTreeCache.CategoryInfo>                category_map           = 8; // key 是报价单id, value是分类
    map<uint64, enterprise.GroupUser>                          group_user_map         = 9;
    map<uint64, enterprise.ConfigInfo>                         config_info_map        = 10; // key 是sku_id, value 是客户商品属性别名
    repeated BasicPrice                                        parent_basic_prices    = 11; // 协议单关联的报价单中的价格，用于页面上新增条目
    map<string, GetSkuReferencePricesResponse.ReferencePrices> reference_price_map    = 12; // key是quotation_id-sku_id-unit_id-order_unit_id, value是参考价
}

message ListHistoryBasicPriceRequest {
    FilterParams              filter_params = 1;
    ceres.common.PagingParams paging        = 2;
    uint32                    request_data  = 3;
    enum RequestData {
        RD_UNSPECIFIED              = 0;
        SKU                         = 256;  // 2^8 是否返回SKU
        QUOTATION                   = 512;  // 2^9 是否返回价格
        QUOTATION_CUSTOMER_RELATION = 1024; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    string shared_token             = 4; // 传分享时未登录态token
    uint64 without_basic_price_id   = 5; // 不包括此basicPriceId
    uint64 group_id                 = 11;
    uint64 station_id               = 12;
    bool   need_product_config_data = 13; // 需要客户属性数据
}

message ListHistoryBasicPriceResponse {
    repeated BasicPrice                         basic_prices           = 1;
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value是报价单名字
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id, value 是sku。有sku 和子商品
    map<uint64, Uint64List>                     customer_id_map        = 4; // key 是报价单id, value 是绑定本报价单的customer_id列表
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    ceres.common.PagingResult                   paging                 = 6;
    map<uint64, enterprise.Supplier>            supplier_map           = 7; // key 是供应商id, value是供应商信息
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 8; // key 是报价单id, value是分类
    map<uint64, enterprise.GroupUser>           group_user_map         = 9;
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 10; //  key 是sku_id, value 是客户商品属性别名
}

// 商品价格参考 报价/采购价/入库价
message ListSkuHistoryBasicPriceRequest {
    message Filter {
        uint64         sku_id         = 1; // 商品id
        uint64         unit_id        = 2; // 报价单位 fee_unit_id.unit_id
        uint64         order_unit_id  = 3; // 下单单位 order_unit_id
        uint64         quotation_id   = 4; // 报价单id。1、普通报价单传报价单id；2、周期报价单传入周期子报价单id
        Quotation.Type quotation_type = 5; // 报价单类型
    }
    repeated Filter sku_unit_filter = 1;
    uint64          start_time      = 5; // 查询 开始时间
    uint64          end_time        = 6; // 查询 结束时间
}

message ListSkuHistoryBasicPriceResponse {
    message QuotationReferencePrice {
        string quotation_name = 1; // 普通报价单名/周期子报价单的名字格式: xx报价单(2022-xx-xx~2022-xx-xx);
        uint64 time           = 2; // 最近报价时间
        // 普通报价单与时间time结合对应一条报价
        // 对于周期报价来说time维度不重要，其时间维度已经在quotation_name中一并展示
        UnitValue prices            = 3; // 原始数据报价
        uint64    quotation_id      = 4; // 报价单id。1、普通报价单=报价单id；2、周期报价单=子报价单id
        UnitValue to_fee_unit_price = 5; // 转换为定价单位后报价
        bool      current_price     = 6; // 是否是时价
    }
    message ReferencePrices {
        repeated QuotationReferencePrice quotation_reference_prices = 1; // 历史报价
    }
    map<string, ReferencePrices> reference_price_map = 1; // key是quotation_id-sku_id-unit_id-order_unit_id, value是参考价
}

message ListHistoryBasicPriceByCustomerIDRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        FAVORITE_SKU   = 256; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    uint32                    request_data             = 1;
    FilterParams              filter_params            = 3;
    bool                      need_product_config_data = 4; // 需要客户属性数据
    ceres.common.PagingParams paging                   = 10;
}

message ListHistoryBasicPriceByCustomerIDResponse {
    repeated BasicPrice                         basic_prices           = 1;
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value 是报价单
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id,  value 是sku
    map<uint64, FavoriteSkuList>                favorite_sku_map       = 4; // key 是sku_id,  value 是favorite_sku_list
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 6; // key 是报价单id, value是分类
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 7; //  key 是sku_id, value 是客户商品属性别名
    ceres.common.PagingResult                   paging                 = 10;
}

// 生成采购订单时，采购单价根据供应商+商品+单位取状态为生效的协议价
message GetManyQuotationBasicPriceV2Request {
    message SupplierSku {
        uint64 supplier_id = 1; // 供应商ID
        uint64 sku_id      = 2; // 商品ID
        uint64 unit_id     = 3; // 采购需要选择的单位
    }
    repeated SupplierSku supplier_skus = 1;
}

message GetManyQuotationBasicPriceV2Response {
    map<string, BasicPrice> basic_prices = 1; // key 是"supplier_id_sku_id_unit_id",三个字段的值用"_"拼接，value是basic_price
}

// 按商品+下单单位聚合所选商品在所选报价单内条目展示，可以批量选择进行公式定价，可编辑所有条目，保存后同步到报价单
message ListBasicPriceForBatchUpdateRequest {
    FilterParams              filter_params = 1;
    ceres.common.PagingParams paging        = 1000;
}

message ListBasicPriceForBatchUpdateResponse {
    repeated MultiQuotationBasicPriceItem multi_quotation_basic_price_items = 1;
    map<uint64, Quotation>                quotation_map                     = 2; // key 是报价单id, value 是报价单
    map<uint64, Sku>                      sku_map                           = 3; // key 是sku_id,  value 是sku
    ceres.common.PagingResult             paging                            = 1000;
}

// 根据选中的商品更新报价
message UpdateBasicPriceBySkuRequest {
    repeated MultiQuotationBasicPriceItem multi_quotation_basic_price_items = 1; // 内部走增量更新的接口，对应下单单位的条目有修改则修改，无此下单单位则新增【前端暂无新增条目的需求】
}

message UpdateBasicPriceBySkuResponse {
}

// 根据选中的商品条目进行批量预设公式
message UpdateBasicPriceItemByPricingFormulaRequest {
    repeated MultiQuotationBasicPriceItem multi_quotation_basic_price_items = 1;
    BasicPriceItem.PRICINGTYPE            pricing_type                      = 2; // 定价公式类型
    bool                                  chosen_all                        = 3; // 为false则basicPriceitemInfo长度必不为0
    string                                formula                           = 4; // 定价公式
    BasicPriceItem.PriceIntervals         price_intervals                   = 5; // 价格区间
    BasicPriceItem.PRICINGFORMULA         pricing_formula                   = 6; // 定价公式模式 如果非0则走预设公式逻辑,0则走公式定价逻辑
}

message UpdateBasicPriceItemByPricingFormulaResponse {
}

message ListBasicPriceByCustomerIDRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        FAVORITE_SKU   = 256; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    uint32                    request_data                = 1;
    FilterParams              filter_params               = 3;
    bool                      need_product_config_data    = 4; // 需要客户属性数据
    bool                      need_default_quotation_data = 5; // 需要默认报价单的商品信息
    bool                      only_origin_quotation_data  = 6; // 只查出原报价单的条目，不叠加客户协议价的结果
    ceres.common.PagingParams paging                      = 10;
}

message ListBasicPriceByCustomerIDResponse {
    repeated BasicPrice                         basic_prices           = 1;
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value 是报价单
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id,  value 是sku
    map<uint64, FavoriteSkuList>                favorite_sku_map       = 4; // key 是sku_id,  value 是favorite_sku_list
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 6; // key 是报价单id, value是分类
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 7; //  key 是sku_id, value 是客户商品属性别名
    ceres.common.PagingResult                   paging                 = 10;
    map<string, SkuSaleInventory>               sku_sale_inventory     = 11; // key 是"sku_id-order_unit_id",value是商品对应的销售库存
    repeated uint64                             exclude_sku_ids        = 12; // 已经被屏蔽的sku
    map<string, string>                         customer_price_info    = 13; // customer_id-sku_name-unit_name: string
    bool                                        auto_get_recent_price  = 14; // 自动获取最近价格
}

message ListLiteBasicPriceByCustomerIDRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        FAVORITE_SKU   = 256; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    uint32                    request_data                 = 1;
    FilterParams              filter_params                = 3;
    bool                      need_product_config_data     = 4; // 需要客户属性数据
    bool                      need_default_quotation_data  = 5; // 需要默认报价单的商品信息
    bool                      need_check_auto_price_config = 6; // 需要检测自动获取最近价格开关
    ceres.common.PagingParams paging                       = 10;
}

message ListLiteBasicPriceByCustomerIDResponse {
    repeated BasicPrice                         basic_prices           = 1;
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value 是报价单
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id,  value 是sku
    map<uint64, FavoriteSkuList>                favorite_sku_map       = 4; // key 是sku_id,  value 是favorite_sku_list
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 6; // key 是报价单id, value是分类
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 7; //  key 是sku_id, value 是客户商品属性别名
    ceres.common.PagingResult                   paging                 = 10;
    map<string, SkuSaleInventory>               sku_sale_inventory     = 11; // key 是"sku_id-order_unit_id",value是商品对应的销售库存
    repeated uint64                             exclude_sku_ids        = 12; // 已经被屏蔽的sku
    map<string, string>                         customer_price_info    = 13; // customer_id-sku_name-unit_name: string
    map<string, string>                         sku_price_info         = 15; // sku_name-unit_name: string
    bool                                        auto_get_recent_price  = 14; // 自动获取最近价格
}

message ListBasicPriceDetailByCustomerIDRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        FAVORITE_SKU   = 256; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    uint32                    request_data                = 1;
    FilterParams              filter_params               = 3;
    bool                      need_product_config_data    = 4; // 需要客户属性数据
    bool                      need_default_quotation_data = 5; // 需要默认报价单的商品信息
    bool                      only_refresh_cache          = 6; // 只刷新完整缓存
    bool                      only_origin_quotation_data  = 7; // 只查出原报价单的条目，不叠加客户协议价的结果
    ceres.common.PagingParams paging                      = 10;
}

message ListBasicPriceDetailByCustomerIDResponse {
    repeated BasicPrice                         basic_prices           = 1;
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value 是报价单
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id,  value 是sku
    map<uint64, FavoriteSkuList>                favorite_sku_map       = 4; // key 是sku_id,  value 是favorite_sku_list
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 6; // key 是报价单id, value是分类
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 7; //  key 是sku_id, value 是客户商品属性别名
    ceres.common.PagingResult                   paging                 = 10;
    map<string, SkuSaleInventory>               sku_sale_inventory     = 11; // key 是"sku_id-order_unit_id",value是商品对应的销售库存
    repeated uint64                             exclude_sku_ids        = 12; // 已经被屏蔽的sku
}

message ListBasicPriceDetailByCustomerIDForSearchRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        FAVORITE_SKU   = 256; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    uint32                    request_data                = 1;
    FilterParams              filter_params               = 3;
    bool                      need_product_config_data    = 4; // 需要客户属性数据
    bool                      need_default_quotation_data = 5; // 需要默认报价单的商品信息
    bool                      only_refresh_cache          = 6; // 只刷新完整缓存
    ceres.common.PagingParams paging                      = 10;
}

message ListBasicPriceDetailByCustomerIDForSearchResponse {
    repeated BasicPrice                         basic_prices           = 1;
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value 是报价单
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id,  value 是sku
    map<uint64, FavoriteSkuList>                favorite_sku_map       = 4; // key 是sku_id,  value 是favorite_sku_list
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 6; // key 是报价单id, value是分类
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 7; //  key 是sku_id, value 是客户商品属性别名
    ceres.common.PagingResult                   paging                 = 10;
    map<string, SkuSaleInventory>               sku_sale_inventory     = 11; // key 是"sku_id-order_unit_id",value是商品对应的销售库存
    repeated uint64                             exclude_sku_ids        = 12; // 已经被屏蔽的sku

    repeated SkuCacheSort sku_cache_sorts = 13; //商品排序，距离最短（index升序）、下单频次（order_count倒序）、搜索频次（search_count倒序）、商品自身排序（sort_num倒序）
}

message ListSkuAndBasicPriceDetailForSearchRequest {
    FilterParams              filter_params            = 1;
    bool                      need_product_config_data = 2; // 需要客户属性数据
    ceres.common.PagingParams paging                   = 3;
}
message ListSkuAndBasicPriceDetailForSearchResponse {
    repeated BasicPrice                         basic_prices           = 1;
    map<uint64, Quotation>                      quotation_map          = 2; // key 是报价单id, value 是报价单
    map<uint64, Sku>                            sku_map                = 3; // key 是sku_id,  value 是sku
    map<uint64, FavoriteSkuList>                favorite_sku_map       = 4; // key 是sku_id,  value 是favorite_sku_list
    map<string, BasicPrice>                     ingredient_basic_price = 5; // key 是"sku_id-quotation_id", value是basic_price
    map<uint64, CategoryTreeCache.CategoryInfo> category_map           = 6; // key 是报价单id, value是分类
    map<uint64, enterprise.ConfigInfo>          config_info_map        = 7; //  key 是sku_id, value 是客户商品属性别名
    ceres.common.PagingResult                   paging                 = 10;
    map<string, SkuSaleInventory>               sku_sale_inventory     = 11; // key 是"sku_id-order_unit_id",value是商品对应的销售库存
    repeated uint64                             exclude_sku_ids        = 12; // 已经被屏蔽的sku
    repeated SkuCacheSort                       sku_cache_sorts        = 13; //商品排序，下单频次（order_count倒序）、距离最短（index升序）、搜索频次（search_count倒序）、商品自身排序（sort_num倒序）
    repeated Sku                                skus                   = 14;
}

message ListFormulaFromSkuBindingQuotationsRequest {
    ListSkuV2Request list_sku_v2_request = 1;
}
message ListFormulaFromSkuBindingQuotationsResponse {
    message FormulaInfo {
        uint64 sku_id    = 1;
        string sku_name  = 2;
        string unit_name = 3;
        string formula   = 4;
    }
    repeated FormulaInfo formula_infos = 1;
}

message ExportBasicPriceByCustomerIdRequest {
    FilterParams filter_params = 1; //当前前端只传「customer_id」
}

message ExportBasicPriceByCustomerIdResponse {
    asynctask.Task task = 1;
}

message ExportSpecialBasicPriceRequest {
    // 客户Id
    uint64 customer_id = 1;
}

message ExportSpecialBasicPriceResponse {
    asynctask.Task task = 1;
}

message ImportSpecialBasicPriceRequest {
    uint64   customer_id                                                                   = 1 [ (validate.rules).uint64 = {gt : 0} ];
    string   file_url                                                                      = 2;
    repeated ImportSpecialBasicPriceData.SetSpecialBasicPriceInfo special_basic_price_info = 3;
    uint64                                                        quotation_id             = 4 [ (validate.rules).uint64.gt = 0 ];
}

message ImportSpecialBasicPriceResponse {
    asynctask.Task task = 1;
}


// message DeleteBasicPriceRequest {
//     BasicPriceId          basic_price_id       = 1;
//     repeated BasicPriceId basic_price_ids      = 2;
// }
//
// message DeleteBasicPriceResponse {
//     BasicPrice            basic_price     = 1;
//     repeated BasicPriceId basic_price_ids = 2;
// }

message AsyncDeleteManySpecialBasicPriceV2Request {
    ListSpecialBasicPriceV2Request list_special_basic_price_v2_request = 1 [ (validate.rules).message.required = true ];
}

message AsyncDeleteManySpecialBasicPriceV2Response {
    asynctask.Task task = 1;
}

message DeleteManyBasicPriceV2Request {
    repeated BasicPriceId basic_price_ids = 2 [ (validate.rules).repeated.min_items = 1 ];
}

message DeleteManyBasicPriceV2Response {
    repeated BasicPriceId basic_prices = 2;
}

message ListMenuPeriodGroupRequest {
    repeated uint64           station_ids = 1; // 多站点
    ceres.common.PagingParams paging      = 1000 [ (validate.rules).message.required = true ];
}

message ListMenuPeriodGroupResponse {
    repeated MenuPeriod       menu_period = 1;
    ceres.common.PagingResult paging      = 1000;
}

message GetManyMenuPeriodGroupRequest {
    repeated uint64 menu_period_group_ids = 1;
}

message GetManyMenuPeriodGroupResponse {
    map<uint64, MenuPeriodGroup> menu_period_group = 1;
}

message GetManyMenuPeriodGroupByNameRequest {
    repeated string menu_period_group_names = 1;
}

message GetManyMenuPeriodGroupByNameResponse {
    map<string, MenuPeriodGroup> menu_period_group = 1; // key是餐次名称
}

message CreateMenuPeriodGroupRequest {
    repeated MenuPeriod menu_period = 1 [ (validate.rules).repeated.min_items = 1 ];
}

message CreateMenuPeriodGroupResponse {
    repeated MenuPeriod menu_period = 1;
}

message UpdateMenuPeriodGroupRequest {
    repeated MenuPeriod menu_period = 1 [ (validate.rules).repeated.min_items = 1 ];
}

message UpdateMenuPeriodGroupResponse {
    repeated MenuPeriod menu_period = 1;
}

message DeleteMenuPeriodGroupRequest {
    repeated uint64 service_period_ids    = 1 [ (validate.rules).repeated.min_items = 1 ];
    repeated uint64 menu_period_group_ids = 2 [ (validate.rules).repeated.min_items = 1 ];
}

message DeleteMenuPeriodGroupResponse {
}

message ListMenuDetailRequest {
    // 情况1：menu_id ，menu_from_time，menu_to_time
    // 情况2：menu_id ，menu_time
    // 情况3：menu_id, menu_detail_ids
    // 情况4：menu_detail_ids
    uint64           quotation_id         = 1 [ (validate.rules).uint64 = {gte : 0} ];
    uint64           menu_from_time       = 2;
    uint64           menu_to_time         = 3;
    repeated uint64  menu_detail_ids      = 4;
    repeated uint64  menu_time            = 5;
    MenuDetail.State state                = 6;
    bool             need_reference_price = 7; // 需要参考成本价格
}

message ListMenuDetailResponse {
    repeated MenuDetail    menu_details        = 1;
    repeated BasicPrice    basic_prices        = 2;
    map<uint64, Sku>       sku_map             = 4; // key 是 sku_id
    map<uint64, Sku>       ingredient_map      = 3; // key 是子商品 sku_id
    map<uint64, Unit>      unit_map            = 5; // key 是 unit_id
    map<uint64, UnitValue> reference_price_map = 6; // 对应需要的参考成本
}

message ListMenuDetailV2Request {
    // 情况1：menu_id ，menu_from_time，menu_to_time
    // 情况2：menu_id ，menu_time
    // 情况3：menu_id, menu_detail_ids
    // 情况4：menu_detail_ids
    uint64           quotation_id         = 1 [ (validate.rules).uint64 = {gte : 0} ];
    uint64           menu_from_time       = 2;
    uint64           menu_to_time         = 3;
    repeated uint64  menu_detail_ids      = 4;
    repeated uint64  menu_time            = 5;
    MenuDetail.State state                = 6;
    bool             need_reference_price = 7; // 需要参考成本价格
}

message ListMenuDetailV2Response {
    repeated MenuDetail    menu_details        = 1;
    Quotation              quotation           = 3;
    repeated BasicPrice    basic_prices        = 4; // 价格
    map<uint64, Category>  category_map        = 5; // key 是
    map<uint64, Sku>       sku_map             = 6; // key 是 sku_id，组合商品+原料
    map<uint64, UnitValue> reference_price_map = 7; // key 是 sku_id
}

message CreateMenuDetailRequest {
    MenuDetail menu_detail = 1;
}

message CreateMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

message UpdateMenuDetailRequest {
    MenuDetail menu_detail = 1;
}

message UpdateMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

message CopyBasicPriceRequest {
    uint64          quotation_id          = 1;
    uint64          copy_start_time       = 2;
    uint64          copy_end_time         = 3;
    uint64          paste_start_time      = 4;
    repeated uint64 menu_period_group_ids = 5;
}

message CopyBasicPriceResponse {
    asynctask.Task task = 1;
}

message ExportMenuDetailRequest {
    ListMenuDetailRequest list_menu_detail_request = 1;
}

message ExportMenuDetailResponse {
    asynctask.Task task = 1;
}

message ImportMenuDetailRequest {
    string file_url     = 1 [ (validate.rules).string = {min_len : 1} ];
    uint64 quotation_id = 2;
}

message ImportMenuDetailResponse {
    asynctask.Task task = 1;
}

message CreateFavoriteRequest {
    Favorite favorite = 1;
}

message CreateFavoriteResponse {
    Favorite favorite = 1;
}

message UpdateFavoriteRequest {
    Favorite favorite = 1;
}

message UpdateFavoriteResponse {
    Favorite favorite = 1;
}

message DeleteFavoriteRequest {
    uint64 favorite_id = 1;
    uint64 customer_id = 2;
}

message DeleteFavoriteResponse {
    Favorite favorite = 1;
}

message ListFavoriteRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        FAVORITE_SSU   = 256; // 2^8 是否返回SSU
    }
    uint32 request_data = 1; // enum RequestData
    uint64 customer_id  = 2; //指门店的id
}

message ListFavoriteResponse {
    repeated Favorite   favorites            = 1;
    map<uint64, uint64> favorite_ssu_num_map = 2; // key 是收藏夹ID，值是收藏夹下的商品数量
}

message GetFavoriteRequest {
    uint64 favorite_id = 1;
}

message CreateManyFavoriteSkuV2Request {
    repeated FavoriteSku favorite_sku_list = 1;
    uint64               customer_id       = 2;
}

message CreateManyFavoriteSkuV2Response {
    repeated FavoriteSku favorite_sku_list = 1;
}

message DeleteManyFavoriteSkuV2Request {
    repeated uint64 favorite_sku_ids = 1;
}

message DeleteManyFavoriteSkuV2Response {
    repeated uint64 favorite_sku_ids = 1;
}

message ListFavoriteSkuV2Request {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        FAVORITE_SKU   = 256; // 2^10 是否返回报价单对应的CUSTOMER_IDS
    }
    uint32              request_data             = 1;
    uint64              favorite_id              = 2;
    common.PagingParams paging                   = 3 [ (validate.rules).message = {required : true} ];
    bool                need_product_config_data = 4; // 需要客户属性数据
    uint64              customer_id              = 5; // 子店customer_id
}

message ListFavoriteSkuV2Response {
    repeated BasicPrice                basic_prices       = 1;
    map<uint64, Sku>                   sku_map            = 2;
    map<uint64, FavoriteSkuList>       favorite_sku_map   = 3; // key 是sku_id,  value 是favorite_sku_list
    ceres.common.PagingResult          paging             = 4;
    map<uint64, enterprise.ConfigInfo> config_info_map    = 5; // key 是sku_id,  value 是客户商品属性
    map<string, SkuSaleInventory>      sku_sale_inventory = 6; // key 是"sku_id-order_unit_id",value是商品对应的销售库存
    map<string, BasicPrice>            ingredient_basic_price = 7; // key 是"sku_id-quotation_id", value是basic_price
}

message GetManyBasicPriceRequest {
    repeated BasicPriceId basic_price_keys = 1;
    bool                  need_deleted     = 2;
}

message GetManyBasicPriceResponse {
    map<string, BasicPrice> basic_price_map = 1; // key是request里面的字段按顺序拼起来的字符串
}

//message ImportCombineSsuRequest {
//    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
//}
//
//message ImportCombineSsuResponse {
//    asynctask.Task task = 1;
//}

//message BulkUpdateCombineSsuRequest {
//    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
//}
//
//message BulkUpdateCombineSsuResponse {
//    asynctask.Task task = 1;
//}

message GetManyFinanceCategoryRequest {
    repeated uint64 finance_category_ids = 1;
}

message GetManyFinanceCategoryResponse {
    map<uint64, FinanceCategory> finance_categorys = 1;
}

//message ExportCombineSsuRequest {
//    ListSsuRequest list_ssu_request = 1;
//}
//
//message ExportCombineSsuResponse {
//    asynctask.Task task = 1;
//}

message CreateBasicPriceRequest {
    BasicPrice basic_price       = 1;
    uint64     customer_group_id = 2; // 采购商的groupid
    uint64     customer_id       = 3; // 采购商的
}

message CreateBasicPriceResponse {
    BasicPrice basic_price = 1;
}

message ListMarketSsuRequest {
    repeated SsuId            ssu_ids = 10;
    ceres.common.PagingParams paging  = 20 [ (validate.rules).message = {required : true} ];
}

message ListMarketSsuResponse {
    repeated merchandise.Ssu  ssus   = 1;
    ceres.common.PagingResult paging = 1000;
}
//
message CreateReleationCustomerAndSupplierRequest {
    uint64 customer_group_id = 2; // 采购商的groupid
    uint64 customer_id       = 3; // 采购商的
}

message CreateReleationCustomerAndSupplierResponse {
}

message ImportQuotationRequest {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message ImportQuotationResponse {
    asynctask.Task task = 1;
}

message ExportQuotationRequest {
    uint64 quotation_id = 1;
}

message ExportQuotationResponse {
    asynctask.Task task = 1;
}

message ImportQuotationCreateBySsuRequest {
    string          file_url     = 1 [ (validate.rules).string = {min_len : 1} ];
    repeated uint64 supplier_ids = 2;
}

message ImportQuotationCreateBySsuResponse {
}

message ImportQuotationChangeBySsuRequest {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message ImportQuotationChangeBySsuResponse {
}

message ExportQuotationBySsuRequest {
    ListBasicPriceRequest request = 1;
}

message ExportQuotationBySsuResponse {
    asynctask.Task task = 1;
}

message CreateQuotationBasicPriceRequest {
    message ProtocolSheet {
        Quotation quotation = 1 [ (validate.rules).message.required = true ];
        // repeated BasicPrice basic_prices = 2 [ (validate.rules).repeated = {min_items : 0, max_items : 400} ];
        repeated BasicPrice basic_prices = 2;
    }
    map<string, ProtocolSheet> sheets = 1; // key格式为  供应商id:开始时间:结束时间
}

message CreateQuotationBasicPriceResponse {

    map<string, CreateQuotationBasicPriceRequest.ProtocolSheet> sheets = 1; // key格式为  供应商id:开始时间:结束时间

}

// 供外部调用，目的是规避原接口中采购协议价商品冲突的情况
message CreateQuotationBasicPriceV2Request {
    map<string, CreateQuotationBasicPriceRequest.ProtocolSheet> sheets = 1; // key格式为  供应商id:开始时间:结束时间
}

message CreateQuotationBasicPriceV2Response {

    map<string, CreateQuotationBasicPriceRequest.ProtocolSheet> sheets = 1; // key格式为  供应商id:开始时间:结束时间

    bool has_conflict = 2; // 是否存在冲突
    repeated string conflict_quotation_serial_nos = 3; // 冲突的协议单单号
    repeated uint64 conflict_ids = 4; // 冲突的sheet的行号
}

message UpdateQuotationBasicPriceRequest {
    Quotation quotation = 1;
    // repeated BasicPrice basic_prices = 2 [ (validate.rules).repeated = {min_items : 0, max_items : 400} ];
    repeated BasicPrice basic_prices     = 2;
    bool                sync_update_only = 3; // 只会创建或修改,不会删除


    // message SupplierFilter {
    //     uint64 supplier_id = 1;
    //     uint64 start_time = 2;
    //     uint64 end_time = 3;
    // }
    // SupplierFilter supplier_filter = 4; // 不通过quotationId查询的情况
}

message UpdateQuotationBasicPriceResponse {
    Quotation           quotation    = 1;
    repeated BasicPrice basic_prices = 2;

}

// 供外部调用，目的是规避原接口中采购协议价商品冲突的情况
message UpdateQuotationBasicPriceV2Request {
    Quotation quotation = 1;
    // repeated BasicPrice basic_prices = 2 [ (validate.rules).repeated = {min_items : 0, max_items : 400} ];
    repeated BasicPrice basic_prices     = 2;
    bool                sync_update_only = 3; // 只会创建或修改,不会删除


    // message SupplierFilter {
    //     uint64 supplier_id = 1;
    //     uint64 start_time = 2;
    //     uint64 end_time = 3;
    // }
    // SupplierFilter supplier_filter = 4; // 不通过quotationId查询的情况
}

message UpdateQuotationBasicPriceV2Response {
    Quotation           quotation    = 1;
    repeated BasicPrice basic_prices = 2;

    bool has_conflict = 3; // 是否存在冲突
    repeated string conflict_quotation_serial_nos = 4; // 冲突的协议单单号
    repeated uint64 conflict_ids = 5; // 冲突的sheet的行号
}

message ListBasicPriceRequest {
    enum PagingField {
        SORT_UNSPECIFIED = 0;
        SORT_NUM         = 1;
    }
    uint64   start_time                     = 1; // 报价单生效时间
    uint64   end_time                       = 2;
    string   sku_q                          = 3; // 自已定编码与商品名
    repeated Quotation.Status statuses      = 4; // 报价单状态
    repeated uint64           spu_ids       = 5; // spu id
    repeated uint64           supplier_ids  = 6; // 供应商
    repeated SsuId            ssu_ids       = 7;
    common.PagingParams       paging        = 8 [ (validate.rules).message = {required : true} ];
    uint64                    category_id   = 9;  // 分类id
    Quotation.Type            price_type    = 10; // 价格类型
    repeated uint64           quotation_ids = 11; // 协议单id

    uint64 customer_group_id = 12; // 拉取报价的采购商group ID 供应商侧需要填写对应的供应商group

    uint64 basic_price_start_time = 13; // 价格创建开始时间
    uint64 basic_price_end_time   = 14; // 价格创建结束时间

    bool need_snapshot_basic_price = 20; // 拉取历史报价
    enum SnapshotBasicPrice {
        UNSPECIFIED                       = 0;
        SNAPSHOT_BASIC_PRICE_BY_QUOTATION = 1; // 按照报价单
        SNAPSHOT_BASIC_PRICE_BY_SSU       = 2; // 按照ssu
    }
    SnapshotBasicPrice snap_shot_basic_price  = 23; // 拉取的历史报价的key值
    bool               is_favorite_group      = 21; // 过滤收藏的供应商的报价
    bool               need_count_today_offer = 22; // 统计今日报价数量
    bool               need_delete_ssu        = 24; // 拉取被删除的ssu
    bool               purchase_user          = 25; // 采购员拉取报价
    BasicPrice.Source  source                 = 26; // 询价来源

    repeated common.SortBy sort_by = 999; // todo 合代码 排序字段
}

message ListBasicPriceResponse {
    repeated BasicPrice               basic_prices        = 1; // 拉取报价商品不会重复
    repeated Sku                      skus                = 2;
    map<uint64, Quotation>            quotation_relation  = 3;
    map<uint64, enterprise.Supplier>  supplier_relation   = 4;
    map<uint64, Category>             category_map        = 5;
    map<uint64, enterprise.GroupUser> group_user_relation = 6;
    message                           Price {
        repeated BasicPrice basic_prices = 1;
    }
    //    如果在ListBasicPriceSnapshotRequest请求中
    map<string, Price>  basic_prices_snapshot = 12; // sku id的历史报价 拉取列表则使用sku unit 拉取单个商品则为报价单ID
    map<uint64, uint64> count_today_offer     = 13; // 今日报价次数 key 为quotation_id 值为次数

    common.PagingResult paging = 10;
}

message GetBasicPriceRequest {
    uint64 supplier_id = 1;
    SsuId  ssu_id      = 2;
}

message GetBasicPriceResponse {
    BasicPrice                           basic_price       = 1;
    repeated BasicPrice                  basic_prices      = 2;
    map<string, ListSsuResponse.SsuInfo> ssu_info_relation = 3; // key skuid:unitid
    map<uint64, enterprise.Supplier>     supplier_relation = 4; // sku:unit
}

message GetImportQuotationBasicPriceTemplateRequest {
    uint64          supplier_id  = 1 [ deprecated = true ]; // 暂时忽略
    repeated uint64 supplier_ids = 2;                       // 暂时忽略
    enum Template {
        UNSPECIFIED      = 0;
        TMP_BY_QUOTATION = 1; // 下载按供应商导入模版
        TMP_BY_SSU       = 2; // 下载按ssu导入模版
    }
    Template template = 3; // 模版类型
}

message GetImportQuotationBasicPriceTemplateResponse {
    asynctask.Task task = 2;
}

// message ListBasicPriceSnapshotRequest {
//     repeated merchandise.SsuId ssu_ids = 1;
//     uint64 customer_group_id = 2  [ (validate.rules).uint64 = {gte : 0} ]; // 拉取报价的采购商group ID
//     bool today_has_offer     = 3; // 今日有报价
//     bool favorite_group      = 4; // 收藏
//     common.PagingParams paging      = 8 [ (validate.rules).message = {required : true} ];
// }
//
// message ListBasicPriceSnapshotResponse {
//     message Price {
//         repeated BasicPrice basic_prices = 1;
//     }
//     //    如果在ListBasicPriceSnapshotRequest请求中
//     map<string, Price> basic_prices_snapshot = 1; // ssuid的历史报价
//     repeated BasicPrice basic_prices =  2; // ssu
//     map<string,ListSsuResponse.SsuInfo> ssu_info_relation = 3; // key skuid:unitid
//     common.PagingResult paging      = 10;
//
// }

message GetBasicPriceSnapshotRequest {
    repeated merchandise.SsuId ssu_ids           = 1;
    uint64                     customer_group_id = 2 [ (validate.rules).uint64 = {gte : 0} ]; // 拉取报价的采购商group ID
    bool                       today_has_offer   = 3;                                         // 今日有报价
    bool                       favorite_group    = 4;                                         // 收藏
    common.PagingParams        paging            = 8 [ (validate.rules).message = {required : true} ];
}

message GetBasicPriceSnapshotResponse {
    message Price {
        repeated BasicPrice basic_prices = 1;
    }
    //    如果在ListBasicPriceSnapshotRequest请求中
    map<string, Price>  basic_prices_snapshot = 1; // ssuid的历史报价
    repeated Ssu        ssus                  = 2; // ssu
    common.PagingResult paging                = 10;
}

// BasicPrice 原本结构不适合商户报价这里 这里会多次报价记一个ssu会在一个quotation中有多次报价
// 报价需要在采购商和供应商侧写相应的报价
message CreateBasicPriceSnapshotRequest {
    repeated BasicPrice basic_prices      = 1;
    uint64              customer_group_id = 2 [ (validate.rules).uint64 = {gte : 0} ];
}

message CreateBasicPriceSnapshotResponse {
}

message InitMerchandiseRequest {
    repeated uint64 group_ids = 1; // 传group_id后，会把这些group_id初始化全量同步好；不传group_id的话，后台会增量同步所有group的数据
}

message InitMerchandiseResponse {
    asynctask.Task task = 1;
}

message CreateManySkuSyncFromYMTRequest {
    repeated uint64 sku_ids = 1;
}

message CreateManySkuSyncFromYMTResponse {
}

message CreateMerchandiseCategoryRequest {
    repeated uint64 group_ids = 1; // 传group_id后，会把这些group_id初始化全量同步好；不传group_id的话，后台会增量同步所有group的数据
}

message CreateMerchandiseCategoryResponse {
}

message CleanCategoryRequest {
}

message CleanCategoryResponse {
}

message CleanSpuRequest {
}

message CleanSpuResponse {
}

message CleanSkuRequest {
}

message CleanSkuResponse {
}

message CleanQuotationRequest {
}

message CleanQuotationResponse {
}

message CleanSsuRequest {
}

message CleanSsuResponse {
}

message CleanCustomerQuotationRelationRequest {
}

message CleanCustomerQuotationRelationResponse {
}

message CleanBasicPriceRequest {
}

message CleanBasicPriceResponse {
}

message CleanFavoriteRequest {
}

message CleanFavoriteResponse {
}

message CleanFavoriteSkuRequest {
}

message CleanFavoriteSkuResponse {
}

message CleanMenuPeriodGroupRequest {
}

message CleanMenuPeriodGroupResponse {
}

message CleanMenuDetailRequest {
}

message CleanMenuDetailResponse {
}

message CreateBasicPriceByPurchaseUserRequest {
    message PriceItem {
        uint64 ssu_id  = 1; // 规格SSu id
        uint64 sku_id  = 2; // sku id
        uint64 unit_id = 3; // 规格ID
        //        string            price        = 4; // 价格
        UnitValue         unit_price   = 4; // 价格 todo 前端 修改
        uint64            supplier_id  = 5; // 供应商ID
        BasicPrice.Source source       = 6; // 来源
        string            origin_place = 7; // 产地
        string            remark       = 8; //
    }
    repeated PriceItem price_items = 1; // 价格列表
}

message CreateBasicPriceByPurchaseUserResponse {
}

// for sap linx@2021.6.1

message GetCategoryByCategoryNameRequest {
    uint64 parent_id = 1 [ (validate.rules).uint64 = {gte : 0} ]; // 一级分类的parent_id 是 0
    string name      = 2 [ (validate.rules).string = {min_len : 1} ];
}

// for sap linx@2021.6.1

message GetCategoryByCategoryNameResponse {
    Category category = 1;
}

message ListCategoryByNameRequest {
    string name = 1 [ (validate.rules).string = {min_len : 1} ];
}
message ListCategoryByNameResponse {
    repeated Category categories = 1;
}

message GetSpuBySpuNameRequest {
    uint64 parent_id = 1 [ (validate.rules).uint64 = {gte : 0} ]; // 一级分类的parent_id 是 0
    string name      = 2 [ (validate.rules).string = {min_len : 1} ];
}

message GetSpuBySpuNameResponse {
    Spu spu = 1;
}

message SetReferencePriceRequest {
    repeated ReferencePrice reference_prices = 1;
    bool                    force_update     = 2; // 强制更新
}

message SetReferencePriceResponse {
    repeated ReferencePrice reference_prices = 1;
}

message SetReferencePriceV2Request {
    message RefPriceData {
        uint64   sku_id                                                      = 1; // sku id
        repeated ReferencePrice.Type              del_price_type_data        = 2; // 要删除的参考价类型数据
        ReferencePrice.ReferencePriceMap          upsert_normal_price_data   = 3; // 要更新的普通参考价数据
        ReferencePrice.SupplierReferencePriceData upsert_supplier_price_data = 4; // 要更新的供应商参考价数据
        bool                                      force_upsert               = 5; // 是否强制upsert，强制upsert时不比对时间
    }
    repeated RefPriceData reference_prices = 1; // 增量删除或更新的数据
}

message SetReferencePriceV2Response {
}

message GetManyReferencePriceRequest {
    repeated uint64 sku_ids      = 1;
    bool            need_bom_ref = 3;
}

message GetManyReferencePriceResponse {
    map<uint64, UnitValue> reference_price_map = 1; // 对应需要的参考成本
}

message GetSkuReferencePricesFromPeriodicQuotationRequest {
    uint32 period                = 1; // 周期筛选 "3","6"
    uint64 sku_id                = 2;
    uint64 periodic_quotation_id = 3; // 周期子报价单id
}

message GetSkuReferencePricesFromPeriodicQuotationResponse {
    message PeriodicPrice {
        string unit  = 1; // 下单单位
        string price = 2; // 商品单价 元/XX
    }
    message PeriodicQuotationReferencePrice {
        string                 periodic_quotation_name = 1; // 周期子报价单名字 格式: xx报价单(2022-xx-xx~2022-xx-xx)
        repeated PeriodicPrice periodic_prices         = 2;
    }
    repeated PeriodicQuotationReferencePrice periodic_quotation_reference_prices = 1; // 周期报价单参考价
}

// 商品价格参考 报价/采购价/入库价
message GetSkuReferencePricesRequest {
    // 是商品+报价单位（fee_unit_id.unit_id）维度查询。
    // 如果单位不同在前端需要转化为报价单位，比如：采购单位=箱，报价单位=听，单位就自动把箱转化为听，对应价格也转化
    message Filter {
        uint64         sku_id         = 1; // 商品id
        uint64         unit_id        = 2; // 报价单位/定价单位 fee_unit_id.unit_id
        uint64         order_unit_id  = 3; // 下单单位 order_unit_id，最近入库价、最近采购价可以传0
        uint64         quotation_id   = 4; // 报价单id。1、普通报价单传报价单id；2、周期报价单传入周期子报价单id，最近入库价、最近采购价可以传0
        Quotation.Type quotation_type = 5; // 报价单类型，最近入库价、最近采购价可以传0
    }
    repeated Filter sku_unit_filter = 1;
    uint32          period          = 4; // 周期筛选 "3","6"；"最近" = 只需要一条数据返回时，周期取"1"
    // 折线图时，以查询时间优先级最高，周期period只对周期报价单历史报价有效
    uint64 start_time = 5; // 查询 开始时间
    // 在折线图查询历史价格时需注意不能选择今天作为截止日期，只能选择今天00:00:00之前的数据
    uint64 end_time     = 6; // 查询 结束时间
    string shared_token = 7; // 传分享时未登录态token
    //
    bool no_need_quotation_reference_prices   = 8;  // 需要最近报价
    bool no_need_purchase_reference_prices    = 9;  // 需要最近采购价    type = 13
    bool no_need_in_stock_reference_prices    = 10; // 需要最近采购入库价 type = 1
    bool no_need_reference_market_prices      = 11; // 需要商品参考市场价 type = 15
    bool no_need_last_product_in_stock_prices = 12; // 需要最近生产入库价 type = 16
    bool no_need_last_in_stock_market_prices  = 13; // 需要最近生产入库价 type = 12
}

message GetSkuReferencePricesResponse {
    message QuotationReferencePrice {
        string quotation_name = 1; // 普通报价单名/周期子报价单的名字格式: xx报价单(2022-xx-xx~2022-xx-xx);
        uint64 time           = 2; // 最近报价时间
        // 普通报价单与时间time结合对应一条报价
        // 对于周期报价来说time维度不重要，其时间维度已经在quotation_name中一并展示
        UnitValue prices            = 3; // 原始数据报价
        uint64    quotation_id      = 4; // 报价单id。1、普通报价单=报价单id；2、周期报价单=子报价单id
        UnitValue to_fee_unit_price = 5; // 转换为定价单位后报价
    }
    // 历史采购价/入库价等快照信息
    message ReferencePrice {
        string    supplier_name     = 1; // 供应商名
        uint64    supplier_id       = 5; // 供应商ID
        uint64    time              = 2; // 采购、入库等的时间
        UnitValue prices            = 3; // 采购价、入库价等
        UnitValue to_fee_unit_price = 4; // 转换为定价单位后报价
        uint64    source_id         = 6; // 单据来源ID
        uint64    snapshot_time     = 7; // 快照时间
    }
    message ReferencePrices {
        repeated QuotationReferencePrice quotation_reference_prices   = 1; // 历史报价
        repeated ReferencePrice          purchase_reference_prices    = 2; // 历史采购价参考价
        repeated ReferencePrice          in_stock_reference_prices    = 3; // 历史入库参考价
        repeated ReferencePrice          market_reference_prices      = 4; // 参考市场价
        repeated ReferencePrice          last_product_in_stock_prices = 5; // 最近生产入库价
        repeated ReferencePrice          last_in_stock_market_prices  = 6; // 采购入库价（市场自采）
    }

    map<string, ReferencePrices> reference_price_map = 1; // key是quotation_id-sku_id-unit_id-order_unit_id, value是参考价
    map<uint64, Sku>             sku_map             = 2; // key 是sku_id, proto 是sku
}

message GetSkuReferPurAndInPricesRequest {
    // 是商品+报价单位（fee_unit_id.unit_id）维度查询。
    // 如果单位不同在前端需要转化为报价单位，比如：采购单位=箱，报价单位=听，单位就自动把箱转化为听，对应价格也转化
    message Filter {
        uint64 sku_id        = 1; // 商品id
        uint64 unit_id       = 2; // 报价单位 fee_unit_id.unit_id
        uint64 order_unit_id = 3; // 下单单位 order_unit_id
    }
    repeated Filter     sku_unit_filter = 1;
    ReferencePrice.Type price_type      = 2; // 11:最近入库价（供应商直供） 13:最近采购价（供应商直供）
}

message GetSkuReferPurAndInPricesResponse {
    // 历史采购价/入库价
    message ReferencePrice {
        string    supplier_name     = 1; // 供应商名
        uint64    supplier_id       = 2; // 供应商ID
        uint64    time              = 3; // 采购、入库等的时间
        UnitValue prices            = 4; // 采购价、入库价等
        UnitValue to_fee_unit_price = 5; // 转换为定价单位后报价
    }
    message ReferencePrices {
        repeated ReferencePrice default_supplier_prices = 1; // 商品对应的默认供应商最近采购价/入库价
        repeated ReferencePrice other_supplier_prices   = 2; // 商品其他供应商最近采购价/入库价
        repeated ReferencePrice market_reference_prices = 3; // 商品的市场参考价
    }

    map<string, ReferencePrices> reference_price_map = 1; // key是sku_id-unit_id-order_unit_id, value是参考价
}

message GetSkuReferencePricesByTypeRequest {
    message SupplierSkus {
        uint64 supplier_id = 1; // 供应商id
        uint64 sku_id      = 2; // sku id
        uint64 unit_id     = 3; // 参考价需要的单位ID
    }
    ReferencePrice.Type   price_type    = 1; // 参考价类型
    repeated SupplierSkus supplier_skus = 2; // 供应商+skuID组合数据
}

message GetSkuReferencePricesByTypeResponse {
    message RefPriceValue {
        string val       = 1; // 参考价值
        uint64 unit_id   = 2; // 参考价单位ID
        uint64 input_tax = 3; // 进项税率，仅对'供应商协议价'有用
    }

    map<string, RefPriceValue> reference_prices = 1; // key为'{supplier_id}_{sku_id}' 形式字符串
}

message GetManyMealCalendarRequest {
    uint64 meal_from_time = 1 [ (validate.rules).uint64.gt = 0 ];
    uint64 meal_end_time  = 2 [ (validate.rules).uint64.gt = 0 ];
    uint64 customer_id    = 3 [ (validate.rules).uint64.gt = 0 ];
}

message GetManyMealCalendarResponse {
    repeated MealCalendar meal_calendars = 1;
}

message CreateOrUpdateMealCalendarRequest {
    repeated MealCalendar meal_calendars = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message CreateOrUpdateMealCalendarResponse {
    repeated MealCalendar meal_calendars = 1;
}

message BulkUpdateSkuSupplierCooperateRequest {
    merchandise.ListSkuRequest list_sku_request              = 1;
    bool                       all                           = 2;
    uint32                     supplier_cooperate_model_type = 3;
    bool                       process                       = 4; //是否加工。命名有点奇怪，sku里是这样全名的。
}

message BulkUpdateSkuSupplierCooperateResponse {
}

message BulkUpdateSkuSupplierPercentageRequest {
    message Item {
        uint64 sku_id = 1;
        bool   set    = 2;
    }
    repeated Item items = 1;
}

message BulkUpdateSkuSupplierPercentageResponse {
}

// 修改单个sku的默认货位
message UpdateSkuShelfRequest {
    uint64 sku_id   = 1; // 要修改的sku_id
    uint64 shelf_id = 2; // 指定的默认货位.可以为0 ,0为"未指定" 必填
}

message UpdateSkuShelfResponse {
    uint64 sku_id   = 1; // 勾选部分sku, 或其他sku_id已确定的情况,填写该参数 和1 二选一 已该参数为准
    uint64 shelf_id = 2; // 指定的默认货位.可以为0 ,0为"未指定" 必填
}

// message SkuFilterParams {
//     repeated uint64          category_ids             = 1;
//     repeated uint64          spu_ids                  = 2;
//     repeated uint64          sku_ids                  = 3;
//     repeated string          customize_codes          = 4;
//     Sku.SkuType              sku_type                 = 5;
//     string                   q                        = 6;
//     common.Filters.Bool      process                  = 7;
//     Sku.NotPackageSubSkuType not_package_sub_sku_type = 8;
//     Sku.PackageSubSkuType    package_sub_sku_type     = 9;  //
//     Sku.ProcessType          process_type             = 10; // 加工类型
//     repeated uint64          shelf_ids                = 11; // 货位id
//     common.Filters.Bool      on_sale                  = 12; // 可售
// }

//
// message BasicPriceFilterParams {
//     uint64              quotation_id = 1; // 报价单ID
//     uint64              sku_id       = 2; // sku_id
//     common.Filters.Bool on_shelf     = 3; // 上下架
//     // review 45和12重复了呀，6又是什么鬼
//     repeated uint64     sku_ids              = 4; // sku_ids
//     repeated uint64     quotation_ids        = 5; // quotation_ids
//     common.Filters.Bool on_shelf_and_on_sale = 6; // 上架并且在售
// }
//
// message QuotationFilterParams {
//     uint64           quotation_id   = 1; // quotation_ids
//     repeated uint64  quotation_ids  = 2; // quotation_ids
//     Quotation.Type   quotation_type = 3; // 报价单类型
//     Quotation.Status status         = 4; // 状态
//     string           q              = 5;
// }

message LockMenuPeriodGroupRequest {
    uint64 menu_period_group_id = 1;
}

message LockMenuPeriodGroupResponse {
    // 没有返回
}

message UnlockMenuPeriodGroupRequest {
    uint64 menu_period_group_id = 1;
}

message UnlockMenuPeriodGroupResponse {
    // 没有返回
}

message BatchUpdateSkuPackUnitRequest {
    ListSkuV2Request filter =   1;
    PackUnit pack_unit  =   2;
}
message BatchUpdateSkuPackUnitData {
    message Result {
        string sku_name =   1;
        string msg  =   2;
    }
    repeated Result results  =   1;
}
message BatchUpdateSkuPackUnitResponse {
    asynctask.Task task =   1;
}

message BatchUpdateSkuSupplierRequest {
    ListSkuV2Request filter =   1;
    uint64 supplier_id  =   2; // 供应商id
}
message BatchUpdateSkuSupplierData {
    message Result {
        string sku_name =   1;
        string msg  =   2;
    }
    repeated Result results  =   1;
}
message BatchUpdateSkuSupplierResponse {
    asynctask.Task task =   1;
}

message ListBestSaleSkuRequest {
    uint64 customer_id              = 1 [ (validate.rules).uint64.gt = 0 ];
    uint64 quotation_id             = 2 [ deprecated = true ];
    uint64 limit                    = 3 [ (validate.rules).uint64.gt = 0 ];
    bool   need_product_config_data = 4; // 特殊分类信息
    bool   is_on_shelf_all          = 5; // 上下架 true 查询全部 false 只查询=true的
    uint64 receive_time             = 6; // 收货时间
}

message ListBestSaleSkuResponse {

    repeated BasicPrice                basic_prices           = 1;
    map<uint64, Quotation>             quotation_map          = 2; // key 是报价单id, value是报价单名字
    map<uint64, Sku>                   sku_map                = 3; // key 是sku_id, proto 是sku
    map<string, BasicPrice>            ingredient_basic_price = 4; // key 是"sku_id-quotation_id", value是basic_price
    map<uint64, enterprise.ConfigInfo> config_info_map        = 5; // key 是"sku_id", value是特殊分类信息
    map<string, string>                customer_price_info    = 6; // customer_id-sku_name-unit_name: string
    bool                               auto_get_recent_price  = 7; // 自动获取最近价格
}

message BulkImportBasicPriceV2Request {
    string file_url     = 1 [ (validate.rules).string = {min_len : 1} ];
    uint64 quotation_id = 2 [ (validate.rules).uint64 = {gte : 0} ];
}

message BulkImportBasicPriceV2Response {
    asynctask.Task task = 1;
}

message BulkImportBasicPriceV2Data {
    repeated Row                  error_row_list              = 2; // 错误数据
    BulkImportBasicPriceV2Request bulk_import_basic_price_req = 3;
}

message BulkImportBasicPriceV2LiteRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gte : 0} ];
    string file_url     = 2;

    repeated BulkImportBasicPriceV2LiteMiddle.RowData import_date = 3;
}

message BulkImportBasicPriceV2LiteResponse {
    asynctask.Task task = 1;
}

message GetBulkImportBasicPriceV2LiteErrRequest {
    uint64 task_id = 1;
}

message GetBulkImportBasicPriceV2LiteErrResponse {
    Quotation quotation                                            = 1;
    repeated BulkImportBasicPriceV2LiteMiddle.RowData err_row_data = 2;
    map<uint64, Sku>                                  sku_map      = 3;
}

message BulkImportCustomerBasicPriceV2Request {
    string file_url     = 1 [ (validate.rules).string = {min_len : 1} ];
    uint64 quotation_id = 2 [ (validate.rules).uint64 = {gte : 0} ];
}

message BulkImportCustomerBasicPriceV2Response {
    asynctask.Task task = 1;
}

message BulkImportCustomerBasicPriceV2Data {
    repeated Row                          error_row_list                       = 2; // 错误数据
    BulkImportCustomerBasicPriceV2Request bulk_import_customer_basic_price_req = 3;
}

message ExportBasicPriceV2Request {
    ListBasicPriceV2Request list_basic_price_v2_request = 1;
    uint64                  supplier_id                 = 2;
    uint32                  export_template             = 3; // 客户列表，报价单导出= 1, 其他0
}

message ExportBasicPriceV2Response {
    asynctask.Task task = 1;
}

message ExportBasicPriceExecuteData {
    string                    excel_id                      = 1;
    string                    sheet_name                    = 2;
    ExportBasicPriceV2Request export_basic_price_v2_request = 10;
}

message ExportCustomerBasicPriceV2Request {
    ListBasicPriceV2Request list_basic_price_v2_request = 1;
    uint64                  supplier_id                 = 2;
}

message ExportCustomerBasicPriceV2Response {
    asynctask.Task task = 1;
}

message ExportSkuHistoryBasicPriceRequest {
    ListSkuHistoryBasicPriceRequest list_sku_history_basic_price_request = 1;
}

message ExportSkuHistoryBasicPriceResponse {
    asynctask.Task task = 1;
}

message ExportHistoryBasicPriceRequest {
    ListHistoryBasicPriceRequest list_history_basic_price_request = 1;
    uint64                       supplier_id                      = 2;
}

message ExportHistoryBasicPriceResponse {
    asynctask.Task task = 1;
}

message GetBasicPriceV2Request {
    uint64 basic_price_id = 1;
}

message GetBasicPriceV2Response {
    BasicPrice basic_price = 1;
}

message BatchSyncPriceToOtherQuotationRequest {
    uint64          basic_price_id          = 1;
    repeated uint64 to_sync_basic_price_ids = 2;
    uint64          sku_id                  = 3;
    uint64          quotation_id            = 4;
}

message BatchSyncPriceToOtherQuotationResponse {
    asynctask.Task task = 1;
}

message DeltaUpdateBasicPriceV2ByPricingFormulaRequest {
    message BasicPriceItemInfo {
        uint64 sku_id        = 1;
        uint64 order_unit_id = 2;
        string price         = 3;
    }
    uint64                        quotation_id             = 1 [ (validate.rules).uint64 = {gt : 0} ]; // 报价单id;必填;存在全选的情况,但因为分页的存在,前端获取不到所有数据
    BasicPriceItem.PRICINGTYPE    pricing_type             = 2;                                        // 定价公式类型
    bool                          chosen_all               = 3;                                        // 为false则basicPriceitemInfo长度必不为0
    repeated BasicPriceItemInfo   basic_price_item_infos   = 4;
    string                        formula                  = 5; // 定价公式
    BasicPriceItem.PriceIntervals price_intervals          = 6; // 价格区间
    BasicPriceItem.PRICINGFORMULA pricing_formula          = 7; // 定价公式模式 如果非0则走预设公式逻辑,0则走公式定价逻辑
    ListBasicPriceV2Request       list_basic_price_request = 8; //过滤筛选
}

message DeltaUpdateBasicPriceV2ByPricingFormulaResponse {
    repeated BasicPrice basic_prices = 1;
}
message GetManyEshopMenuPeriodGroupRequest {
    repeated uint64 menu_period_group_ids = 1;
}
message GetManyEshopMenuPeriodGroupResponse {
    map<uint64, MenuPeriodGroup> menu_period_groups = 1;
}

message ListEshopMenuPeriodGroupRequest {
    // @inject_tag: field:"menu_period_group_id" compare:"in"
    repeated uint64           menu_period_group_ids = 1;
    MenuPeriodGroup.Type      type                  = 2;
    ceres.common.PagingParams paging                = 1000 [ (validate.rules).message.required = true ];
}
message ListEshopMenuPeriodGroupResponse {
    repeated MenuPeriodGroup  menu_period_groups = 1;
    ceres.common.PagingResult paging             = 1000;
}

message CreateEshopMenuPeriodGroupRequest {
    MenuPeriodGroup menu_period_group = 1;
}
message CreateEshopMenuPeriodGroupResponse {
    MenuPeriodGroup menu_period_group = 1;
}

message BatchCreateEshopMenuPeriodGroupRequest {
    repeated MenuPeriodGroup menu_period_groups = 1;
}
message BatchCreateEshopMenuPeriodGroupResponse {
    repeated MenuPeriodGroup menu_period_groups = 1;
}

message UpdateEshopMenuPeriodGroupRequest {
    MenuPeriodGroup menu_period_group = 1;
}
message UpdateEshopMenuPeriodGroupResponse {
    MenuPeriodGroup menu_period_group = 1;
}

message DeleteEshopMenuPeriodGroupRequest {
    // @inject_tag: field:"menu_period_group_id" compare:"in"
    repeated uint64 menu_period_group_ids = 1;
}
message DeleteEshopMenuPeriodGroupResponse {
}

message GetMenuRequest {
    uint64 menu_id = 1;
}
message GetMenuResponse {
    Menu menu = 1;
}
message GetManyMenuRequest {
    repeated uint64 menu_ids = 1;
}
message GetManyMenuResponse {
    map<uint64, Menu> menu_map = 1;
}

message ListSimpleMenuRequest {
    enum PagingField {
        UNSPECIFIED = 0;
        INNER_NAME  = 1; // 菜谱名称
        SERIAL_NO   = 2; // 菜谱号
        CLASS_COUNT = 3; // 班级数
        DAY_COUNT   = 4; // 天数
        IS_ACTIVE   = 5; // 状态
        CREATE_TIME = 6; //创建时间
    }

    repeated uint64 menu_ids      = 1;
    repeated uint64 menu_meal_ids = 2;
    bool            need_deleted  = 3;

    ceres.common.PagingParams paging = 1000;

    repeated ceres.common.SortBy sort_bys = 1001;
}
message ListSimpleMenuResponse {
    repeated Menu             menus  = 1;
    ceres.common.PagingResult paging = 1000;
}

message ListMenuRequest {
    enum PagingField {
        UNSPECIFIED = 0;
        INNER_NAME  = 1; // 菜谱名称
        SERIAL_NO   = 2; // 菜谱号
        CLASS_COUNT = 3; // 班级数
        DAY_COUNT   = 4; // 天数
        IS_ACTIVE   = 5; // 状态
        CREATE_TIME = 6; //创建时间
    }

    // @inject_tag: field:"menu_id" compare:"in"
    repeated uint64 menu_ids = 1;
    // @inject_tag: gorm:"-"
    common.Filters.Bool is_default = 2;
    // @inject_tag: gorm:"-"
    string q = 3; // 检索inner_name/serial_no
    // @inject_tag: gorm:"-"
    common.Filters.Bool is_active   = 4;
    bool                need_delete = 5;
    // @inject_tag: field:"menu_meal_id" compare:"in"
    repeated uint64 menu_meal_ids = 6;

    ceres.common.PagingParams paging = 1000 [ (validate.rules).message.required = true ];
    // @inject_tag: gorm:"-"
    repeated ceres.common.SortBy sort_bys = 1001;
}
message ListMenuResponse {
    repeated Menu             menus  = 1;
    ceres.common.PagingResult paging = 1000;
}
message DeleteWideMenuRequest {
    repeated uint64 menu_ids      = 1;
    repeated uint64 menu_meal_ids = 2;
}
message DeleteWideMenuResponse {
}
message CheckMenuCategoryForWideMenuRequest {
    repeated uint64 menu_category_ids = 1;
}
message CheckMenuCategoryForWideMenuResponse {
    map<uint64, string> menu_name_map = 1; //key = menu_category_id
}
message SaveWideMenuRequest {
    Menu            menu                  = 1;
    repeated uint64 relation_customer_ids = 2;
}
message SaveWideMenuResponse {
    Menu menu = 1;
}
message CreateMenuRequest {
    Menu menu = 1;
}
message CreateMenuResponse {
    Menu menu = 1;
}

message UpdateMenuRequest {
    Menu menu = 1;
}
message UpdateMenuResponse {
    Menu menu = 1;
}

message BatchUpdateMenuRequest {
    repeated uint64     menu_ids  = 1;
    common.Filters.Bool is_active = 2; // 激活状态
    bool delete                   = 3; // 是否删除
}
message BatchUpdateMenuResponse {
}

message DeleteMenuRequest {
    uint64 menu_id = 1;
}
message DeleteMenuResponse {
    Menu menu = 1;
}

message GetEshopMenuDetailRequest {
    uint64 menu_detail_id = 1;
}
message GetEshopMenuDetailResponse {
    MenuDetail menu_detail = 1;
}
message ListSimpleMenuDetailRequest {
    repeated uint64 menu_detail_ids = 1;
    bool            need_deleted    = 2;
}
message ListSimpleMenuDetailResponse {
    repeated MenuDetail menu_details = 1;
}

message ListEshopMenuDetailRequest {
    // @inject_tag: field:"menu_detail_id" compare:"in"
    repeated uint64 menu_detail_ids = 1;
    // @inject_tag: field:"meal_date" compare:"ge"
    uint64 meal_date_start = 2; // 菜谱开始日期
    // @inject_tag: field:"meal_date" compare:"le"
    uint64 meal_date_end        = 3; // 菜谱结束日期
    uint64 menu_id              = 4;
    uint64 meal_date            = 5;
    uint64 menu_period_group_id = 6;

    bool only_detail = 7; // 只返回MenuDetail
    // @inject_tag: field:"menu_id" compare:"in"
    repeated uint64 menu_ids = 8;

    ceres.common.PagingParams paging = 1000 [ (validate.rules).message.required = true ];
}
message ListEshopMenuDetailResponse {
    repeated MenuDetail       menu_details = 1;
    ceres.common.PagingResult paging       = 1000;
}

message SaveEshopMenuDetailRequest {
    MenuDetail menu_detail = 1;
}
message SaveEshopMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

message CreateEshopMenuDetailRequest {
    MenuDetail menu_detail = 1;
}
message CreateEshopMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

message UpdateEshopMenuDetailRequest {
    MenuDetail menu_detail = 1;
}
message UpdateEshopMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

message DeleteEshopMenuDetailRequest {
    uint64 menu_detail_id = 1;
}
message DeleteEshopMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

message BatchSaveEshopMenuDetailRequest {
    repeated MenuDetail menu_details = 1;
}
message BatchSaveEshopMenuDetailResponse {
}

message GetMenuDetailSkuRequest {
    uint64 menu_detail_sku_id = 1;
}
message GetMenuDetailSkuResponse {
    MenuDetailSku menu_detail_sku = 1;
}

message ListMenuDetailSkuRequest {
    // @inject_tag: field:"menu_detail_sku_id" compare:"in"
    repeated uint64 menu_detail_sku_ids = 1;
    uint64          menu_detail_id      = 2;
    // @inject_tag: field:"menu_detail_id" compare:"in"
    repeated uint64           menu_detail_ids = 3;
    ceres.common.PagingParams paging          = 1000 [ (validate.rules).message.required = true ];
}
message ListMenuDetailSkuResponse {
    repeated MenuDetailSku    menu_detail_skus = 1;
    map<uint64, Sku>          sku_map          = 2; // key为sku_id
    ceres.common.PagingResult paging           = 1000;
}

message CreateMenuDetailSkuRequest {
    MenuDetailSku menu_detail_sku = 1;
}
message CreateMenuDetailSkuResponse {
    MenuDetailSku menu_detail_sku = 1;
}

message UpdateMenuDetailSkuRequest {
    MenuDetailSku menu_detail_sku = 1;
}
message UpdateMenuDetailSkuResponse {
    MenuDetailSku menu_detail_sku = 1;
}

message DeleteMenuDetailSkuRequest {
    repeated uint64 menu_detail_sku_ids = 1;
}
message DeleteMenuDetailSkuResponse {
}

message SaveCustomerMenuRelationForCustomersRequest {
    repeated uint64 customer_ids         = 1;
    uint64          menu_id              = 2;
    uint64          menu_period_group_id = 3;
}
message SaveCustomerMenuRelationForCustomersResponse {
}
message SaveCustomerMenuRelationForMenusRequest {
    message MenuPeriodGroupMenu {
        uint64 menu_period_group_id = 1;
        uint64 menu_id              = 2;
    }
    uint64                       customer_id             = 1;
    repeated MenuPeriodGroupMenu menu_period_group_menus = 2;
}
message SaveCustomerMenuRelationForMenusResponse {
}

message SetCustomerMenuRelationRequest {
    repeated CustomerMenuRelation relations = 1;
    uint64                        menu_id   = 2;
}
message SetCustomerMenuRelationResponse {
    // 不返回
}

message ListCustomerMenuRelationRequest {
    repeated uint64 menu_ids              = 1;
    repeated uint64 customer_ids          = 2;
    repeated uint64 menu_period_group_ids = 3;
}
message ListCustomerMenuRelationResponse {
    repeated CustomerMenuRelation customer_menu_relations = 1;
}

message UnsetCustomerMenuRelationRequest {
    uint64 menu_id = 1; // 菜谱id
    // @inject_tag: field:"customer_id" compare:"in"
    repeated uint64 customer_ids = 2; // 客户id，学生餐是班级id
}
message UnsetCustomerMenuRelationResponse {
    // 不返回
}

message GetCustomerMenuRelationRequest {
    // 两个参数至少传一个
    // @inject_tag: field:"menu_id" compare:"in"
    repeated uint64 menu_ids = 1;
    // @inject_tag: field:"customer_id" compare:"in"
    repeated uint64 customer_ids = 2;
}
message GetCustomerMenuRelationResponse {
    repeated CustomerMenuRelation relations = 1;
}

//message GetManyCustomerMenuRequest {
//    repeated uint64 customer_ids = 1; //  客户ID
//    bool need_menu_detail = 2; //  需要详情
//    bool need_menu_detail_sku = 3; //需要详情所属商品，need_menu_detail=true时有效
//    uint64 meal_date_start = 4; //用餐开始时间，need_menu_detail=true时有效
//    uint64 meal_date_end = 5; //用餐结束时间，need_menu_detail=true时有效
//    bool need_deleted   =   6;
//}
//message GetManyCustomerMenuResponse {
//    map<uint64,Menu> menu_map   =   1;  //key=customer_id
//}
message GetManyCustomerMenusRequest {
    repeated uint64 customer_ids = 1; //  客户ID,customer_ids
    bool            need_deleted = 2;
}
message GetManyCustomerMenusResponse {
    repeated Menu       menus                      = 1; //  菜谱
    map<uint64, string> customer_menu_relation_map = 2; //客户菜谱关联关系，key=customer_id，value=menu_id1,menu_id2,menu_id3
}
message GetCustomersForMenuRelationRequest {
    repeated uint64 menu_ids = 1;
}
message GetCustomersForMenuRelationResponse {
    repeated uint64 customer_ids = 1;
}
message GetCustomerMenusRequest {
    uint64 customer_id  = 1; //  客户ID,customer_id
    bool   need_deleted = 2;
}
message GetCustomerMenusResponse {
    repeated Menu menus = 1; //  菜谱
}

message ListEshopMenuRequest {
    repeated uint64 menu_ids = 1; //  客户ID,customer_id、menu_id二选一，同时存在优先取menu_id
    // @inject_tag: gorm:"-"
    bool need_menu_detail = 2; //  需要详情
    // @inject_tag: gorm:"-"
    bool need_menu_detail_sku = 3; //需要详情所属商品，need_menu_detail=true时有效
    // @inject_tag: gorm:"-"
    uint64 meal_date_start = 4; //用餐开始时间，need_menu_detail=true时有效
    // @inject_tag: gorm:"-"
    uint64 meal_date_end = 5; //用餐结束时间，need_menu_detail=true时有效
    bool   need_deleted  = 6;
}
message ListEshopMenuResponse {
    repeated Menu menus = 1; //  菜谱
}

message SyncMarketDataRequest {
    repeated MarketData market_datas = 1;
}
message SyncMarketDataResponse {
}

message ListMarketDataRequest {
    uint64                    third_sku_id    = 1; // 同步数据方维护的商品唯一标识
    uint64                    time            = 2; // 行情价格时间
    MarketData.SourcePlatform source_platform = 3; // 数据来源平台名称
    // @inject_tag: gorm:"-"
    string               q           = 4; // 商品名称 编码 模糊搜索
    MarketData.PriceType price_type  = 5; // 行情价格类型
    string               market_name = 6; // 市场名称
    common.PagingParams  paging      = 7 [ (validate.rules).message = {required : true} ];
    // @inject_tag: gorm:"-"
    uint64 begin_time = 8; // 行情价格起始时间
    // @inject_tag: gorm:"-"
    uint64 end_time = 9; // 行情价格结束时间
    // @inject_tag: gorm:"INDEX:is_latest;default:0"
    bool is_latest = 31;
}

message ListMarketDataResponse {
    repeated MarketData market_datas = 1;
    common.PagingResult paging       = 2;
}

message BatchUpdateMinOrderNumberRequest {
    message MinOrderNumber {
        string sku_customized_code = 1;
        string min_order_number    = 2;
    }
    repeated MinOrderNumber min_order_numbers = 1;
}

message BatchUpdateMinOrderNumberResponse {
}

// 批量更新报价单信息
message BatchUpdateBasicPriceItemInfoRequest {
    message BasicPriceItemInfo {
        uint64 sku_id        = 1;
        uint64 order_unit_id = 2;
    }
    uint64                                 quotation_id             = 1 [ (validate.rules).uint64 = {gt : 0} ]; //报价单id
    bool                                   is_all                   = 2;                                        // 是否更新全部
    ListBasicPriceV2Request                list_basic_price_request = 3;                                        // 过滤筛选
    repeated BasicPriceItemInfo            basic_price_item_infos   = 4;                                        // 需要更新的列表
    string                                 min_order_number         = 5;                                        // 最小起订数
    MultiQuotationBasicPriceItem.PRICETYPE pricing_type             = 6;                                        // 价格类型
}

message BatchUpdateBasicPriceItemInfoResponse {
    asynctask.Task task = 1;
}

// 批量关联商品
message BatchRelatedAllSkuRequest {
    enum ShelfStatus {
        SHELF_STATUS_UNSPECIFIED = 0;
        SHELF_STATUS_TOP         = 1; // 上架
        SHELF_STATUS_DOWN        = 2; // 下架
    }

    enum UnitType {
        UNIT_TYPE_UNSPECIFIED = 0;
        UNIT_TYPE_BASE        = 1; // 基本单位
        UNIT_TYPE_ASSIST      = 2; // 辅助单位
        UNIT_TYPE_CUSTOM      = 3; // 自定义单位
    }

    uint64               quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ]; //报价单id
    repeated ShelfStatus shelf_status = 2;                                        // 上架状态
    repeated UnitType    unit_types   = 3;                                        // 单位
}

message BatchRelatedAllSkuResponse {
    asynctask.Task task = 1;
}

message BatchCleanSkuDiyUnitRequest {

    repeated uint64 group_ids = 1;
}

message BatchCleanSkuDiyUnitResponse {
}

message AgreementPriceCheckRequest {
    message SkuSimpleInfo {
        uint64 sku_id             = 1;
        uint64 unit_id            = 2;
        string price              = 3;
        bool   is_agreement_price = 4;
    }
    repeated SkuSimpleInfo sku_simple_info = 1 [ (validate.rules).repeated.min_items = 1 ];
    uint64                 customer_id     = 2 [ (validate.rules).uint64.gt = 0 ];
}

message AgreementPriceCheckResponse {
    repeated AgreementPriceCheckRequest.SkuSimpleInfo sku_simple_infos = 1;
}

message ManualSyncTemporaryProducAndUnitToOrderRequest {
    uint64 sku_id = 1;
}
message ManualSyncTemporaryProducAndUnitToOrderResponse {
    asynctask.Task task = 1;
}

message RepeatedSkuUnitRateRequest {
    SkuSnapID sku_snap_id    = 1 [ (validate.rules).message.required = true ];
    uint64    src_unit_id    = 2 [ (validate.rules).uint64.gt = 0 ];
    uint64    target_unit_id = 3 [ (validate.rules).uint64.gt = 0 ];
}

message RepeatedSkuUnitRateResponse {
    string rate = 1;
}

message MatchSkuRequest {
    string input_str    = 1 [ (validate.rules).string.min_len = 1 ];
    uint64 customer_id  = 2;
    uint64 receive_time = 3; // 收货时间
}

message SameSkuUnitRateRequest {
    message SkuSnapUnit {
        uint64 sku_revision = 1;
        uint64 unit_id      = 2;
    }
    uint64      sku_id     = 1;
    SkuSnapUnit src_ssu    = 2;
    SkuSnapUnit target_ssu = 3;
}

message SameSkuUnitRateResponse {
    string rate = 1;
}

message MatchSkuResponse {

    enum SkuNameType {
        SKU_NAME_TYPE_UNSPECIFIED = 0;
        // 商品本身的名字
        SKU_NAME_TYPE_NAME = 1;
        // 商品别名
        SKU_NAME_TYPE_ALIAS = 2;
        // 客户配置名
        SKU_NAME_TYPE_CUSTOMER_CONFIG = 3;
    }

    // 匹配出来的 SKU
    message Item {
        Sku       sku            = 1;
        UnitValue fee_unit_price = 2;
        uint64    basic_price_id = 3;
        uint64    priority       = 4;
        // 匹配到的商品名称
        string matched_name = 5;
        // 匹配到的商品名称的类型
        SkuNameType matched_name_type = 6;
    }
    // 优先级分组
    message ItemGroup {
        repeated Item items    = 1;
        uint64        priority = 2;
    }
    message MatchResult {
        string             input_str = 1;
        repeated ItemGroup groups    = 2;
        MatchResultDetail  detail    = 3;
    }
    repeated MatchResult               match_results      = 1;
    map<uint64, BasicPrice>            basic_price_map    = 2;
    map<uint64, Quotation>             quotation_map      = 3;
    map<uint64, enterprise.ConfigInfo> product_config_map = 4; //key=skuId
}

message WriteBackSkuCostRequest {
    message SkuCost {
        uint64 sku_id = 1;
        string cost   = 2;
    }

    repeated SkuCost sku_cost = 1 [ (validate.rules).repeated.min_items = 1 ];
}

message WriteBackSkuCostResponse {
}

message CopySkuFieldToTargetSkuRequest {
    uint64          source_sku_id  = 1 [ (validate.rules).uint64.gt = 0 ];
    repeated uint64 target_sku_ids = 2 [ (validate.rules).repeated.min_items = 1 ];

    repeated string fields = 3 [ (validate.rules).repeated.min_items = 1 ];
}

message CopySkuFieldToTargetSkuResponse {
    repeated Sku skus = 1;
}

message ListSkuWithQuotationByCustomerIdRequest {
    FilterParams              filter_params               = 1; // 必传
    bool                      need_default_quotation_data = 2; // 需要默认报价单的商品信息,客户绑定报价单价格会覆盖默认报价单价格
    ceres.common.PagingParams paging                      = 3; // 必传
}

message ListSkuWithQuotationByCustomerIdResponse {
    repeated BasicPrice       basic_prices = 1;
    map<uint64, Sku>          sku_map      = 2; // key 是sku_id,  value 是sku
    ceres.common.PagingResult paging       = 3;
}
message SyncMenuDetailRequest {
    uint64          menu_id         = 1 [ (validate.rules).uint64.gt = 0 ];           // 原餐谱
    repeated uint64 menu_detail_ids = 2 [ (validate.rules).repeated.min_items = 1 ]; // 待同步餐次详细
    repeated uint64 dst_menu_ids    = 3 [ (validate.rules).repeated.min_items = 1 ]; // 目标菜谱
    bool            is_merge        = 4;                                              // 菜品是否合并，true 合并去重，false 覆盖
}

message SyncMenuDetailResponse {
}

message SyncUpdateCategoryRequest {
    Category category = 1 [ (validate.rules).message = {required : true} ];
}

message SyncUpdateCategoryResponse {
    Category category = 1;
}

message SyncQuotationBasicPriceRequest {

    message BasicPrice {
        string sku_customized_code = 1 [ (validate.rules).string = {min_len : 1} ]; // 商品编码(采购单位在同步商品时已创建)
        uint64 input_tax           = 5;                                             // 税率 更新是必填,存在默认值0,否则无法知道是否更新
        string val_amount          = 4;                                             //含税协议价
    }

    message ExtQuotation {
        string              supplier_customized_code = 1 [ (validate.rules).string = {min_len : 1} ];     // 供应商编码
        uint64              start_time               = 3;                                                 // 开始时间 时间戳
        uint64              end_time                 = 4;                                                 // 结束时间 时间戳
        repeated BasicPrice basic_prices             = 6 [ (validate.rules).repeated = {min_items : 1} ]; // 商品项
        string              serial_no                = 7;                                                 // 编号(如果是更新则需要传)
        Quotation.Status    status                   = 8;                                                 // 编辑状态，已生效变更(已生效/已终止)
        string              remark                   = 9;                                                 // 备注
    }
    ExtQuotation ext_quotation = 1 [ (validate.rules).message.required = true ];
}

message SyncQuotationBasicPriceResponse {
    Quotation quotation = 1; // 采购协议价
}

// 第三方商品请求
message SyncCreateSkuRequest {
    OutsideSku sku = 1 [ (validate.rules).message.required = true ];
}

// 第三方商品返回
message SyncCreateSkuResponse {
    Sku sku = 1;
}

// 商品更新请求
message SyncUpdateSkuRequest {
    OutsideSku sku = 1 [ (validate.rules).message.required = true ];
}

// 第三方商品返回
message SyncUpdateSkuResponse {
    Sku sku = 1;
}

// 商品删除请求
message GetDetailSkuRequest {
    string customize_code = 1; // 自定义编码
    uint64 sku_id         = 2; // 商品ID
}

// 商品删除返回
message GetDetailSkuResponse {
    Sku                   sku            = 1;
    repeated SsuInfo      ssu_infos      = 2;
    repeated CategoryInfo category_infos = 3; // [分类1, 分类2, spu]
    //    map<uint64, string>   quotation_name_map = 4; // key 是报价单id, value是报价单名字
}

// 商品删除请求
message SyncDeleteSkuRequest {
    string customize_code = 1 [ (validate.rules).string = {min_len : 1} ]; // 自定义编码
}

// 商品删除返回
message SyncDeleteSkuResponse {
}

// 第三方商品请求
message SyncCreateQuotationRequest {
    OutsideQuotation quotation = 1 [ (validate.rules).message.required = true ];
}

// 第三方商品返回
message SyncCreateQuotationResponse {
    Quotation quotation = 1;
}

// 商品更新请求
message SyncUpdateQuotationRequest {
    OutsideQuotation quotation = 1 [ (validate.rules).message.required = true ];
}

// 第三方商品返回
message SyncUpdateQuotationResponse {
    Quotation quotation = 1;
}

// 商品删除请求
message SyncDeleteQuotationRequest {
    string serial_no = 1 [ (validate.rules).string = {min_len : 1} ]; // 自定义编码
}

// 商品删除返回
message SyncDeleteQuotationResponse {
}

//  报价单
message GetDetailQuotationRequest {
    string serial_no = 1 [ (validate.rules).string = {min_len : 1} ];
}

message GetDetailQuotationResponse {
    Quotation           quotation                = 1;
    repeated uint64     customer_ids             = 2;
    repeated MenuPeriod menu_periods             = 3;
    uint64              child_quotation_quantity = 4; // 子报价单数量
}

//  商品绑定报价单
message BindQuotationBasicPriceRequest {

    message QuotationBasicPrice {
        string                          quotation_serial_no = 1 [ (validate.rules).string = {min_len : 1} ];                      // 报价单编号
        repeated QuotationBasicPriceSku sku                 = 2 [ (validate.rules).repeated = {min_items : 1, max_items : 100} ]; // 商品报价信息
    }

    message QuotationBasicPriceSku {
        string                  sku_customize_code = 1 [ (validate.rules).string = {min_len : 1} ];     // 报价单编号
        repeated BasicPriceItem basic_price_items  = 3 [ (validate.rules).repeated = {min_items : 1} ]; //商品行价格
    }
    QuotationBasicPrice basic_price = 1 [ (validate.rules).message.required = true ]; // 绑定报价单商品
}

message BindQuotationBasicPriceResponse {
}

//  删除绑定报价单商品
message DeleteBindQuotationBasicPriceRequest {
    message DeleteQuotationBasicPrice {
        string             quotation_serial_no = 1 [ (validate.rules).string = {min_len : 1} ];                     // 报价单编号
        repeated DeleteSku sku                 = 2 [ (validate.rules).repeated = {min_items : 1, max_items : 10} ]; // 商品
    }

    message DeleteSku {
        string sku_customize_code = 1 [ (validate.rules).string = {min_len : 1} ]; // 商品Code
        uint64 unit_id            = 2 [ (validate.rules).uint64 = {gt : 0} ];      // 下单单位ID
    }
    DeleteQuotationBasicPrice basic_price = 1 [ (validate.rules).message.required = true ]; // 报价单商品
}

message DeleteBindQuotationBasicPriceResponse {
}

//  客户绑定报价单
message BindQuotationCustomerRequest {

    message QuotationCustomer {
        string          quotation_serial_no      = 1 [ (validate.rules).string = {min_len : 1} ];                     // 报价单编号
        repeated string customer_customized_code = 2 [ (validate.rules).repeated = {min_items : 1, max_items : 50} ]; // 商品报价信息
    }

    QuotationCustomer relation = 1 [ (validate.rules).message.required = true ]; // 绑定报价单商品
}

message BindQuotationCustomerResponse {
}

//  删除绑定报价单客户
message DeleteBindQuotationCustomerRequest {
    message DeleteQuotationCustomer {
        string          quotation_serial_no      = 1 [ (validate.rules).string = {min_len : 1} ];                     // 报价单编号
        repeated string customer_customized_code = 2 [ (validate.rules).repeated = {min_items : 1, max_items : 50} ]; // 商品
    }

    DeleteQuotationCustomer relation = 1 [ (validate.rules).message.required = true ]; // 报价单商品
}

message DeleteBindQuotationCustomerResponse {
}

// 系统自动添加，请勿删除
message GetUnitRequest {
    uint64 unit_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetUnitResponse {
    Unit unit = 1;
}

// 系统自动添加，请勿删除
message QueryUnitRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryUnitResponse {
    repeated Unit             units  = 1;
    ceres.common.PagingResult paging = 100;
}

// 系统自动添加，请勿删除
message QueryCategoryRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryCategoryResponse {
    repeated Category         categorys = 1;
    ceres.common.PagingResult paging    = 100;
}

// 系统自动添加，请勿删除
message GetInternalCategoryRequest {
    uint64 internal_category_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetInternalCategoryResponse {
    InternalCategory internal_category = 1;
}

// 系统自动添加，请勿删除
message QueryInternalCategoryRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryInternalCategoryResponse {
    repeated InternalCategory internal_categorys = 1;
    ceres.common.PagingResult paging             = 100;
}

// 系统自动添加，请勿删除
message UpdateInternalCategoryRequest {
    InternalCategory internal_category = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateInternalCategoryResponse {
    InternalCategory internal_category = 1;
}

// 系统自动添加，请勿删除
message DeleteInternalCategoryRequest {
    // @inject_tag: field:"internal_category_id" compare:"in"
    repeated uint64 internal_category_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteInternalCategoryResponse {
    repeated InternalCategory internal_categorys = 1;
}

// 系统自动添加，请勿删除
message GetFinanceCategoryRequest {
    uint64 finance_category_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetFinanceCategoryResponse {
    FinanceCategory finance_category = 1;
}

// 系统自动添加，请勿删除
message ListFinanceCategoryRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"finance_category_id" compare:"in"
    repeated uint64 finance_category_ids = 1;

    bool need_deleted = 50; // 是否查询已删除的

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListFinanceCategoryResponse {
    repeated FinanceCategory  finance_categorys = 1;
    ceres.common.PagingResult paging            = 2;
}

// 系统自动添加，请勿删除
message QueryFinanceCategoryRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryFinanceCategoryResponse {
    repeated FinanceCategory  finance_categorys = 1;
    ceres.common.PagingResult paging            = 100;
}

// 系统自动添加，请勿删除
message CreateFinanceCategoryRequest {
    FinanceCategory finance_category = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateFinanceCategoryResponse {
    FinanceCategory finance_category = 1;
}

// 系统自动添加，请勿删除
message UpdateFinanceCategoryRequest {
    FinanceCategory finance_category = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateFinanceCategoryResponse {
    FinanceCategory finance_category = 1;
}

// 系统自动添加，请勿删除
message DeleteFinanceCategoryRequest {
    // @inject_tag: field:"finance_category_id" compare:"in"
    repeated uint64 finance_category_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteFinanceCategoryResponse {
    repeated FinanceCategory finance_categorys = 1;
}

// 系统自动添加，请勿删除
message QuerySpuRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QuerySpuResponse {
    repeated Spu              spus   = 1;
    ceres.common.PagingResult paging = 100;
}

// 系统自动添加，请勿删除
message QuerySkuRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QuerySkuResponse {
    repeated Sku              skus   = 1;
    ceres.common.PagingResult paging = 100;
}

// 系统自动添加，请勿删除
message CreateSkuRequest {
    Sku sku = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateSkuResponse {
    Sku sku = 1;
}

// 系统自动添加，请勿删除
message UpdateSkuRequest {
    Sku sku = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateSkuResponse {
    Sku sku = 1;
}

// 系统自动添加，请勿删除
message DeleteSkuRequest {
    // @inject_tag: field:"sku_id" compare:"in"
    repeated uint64 sku_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteSkuResponse {
    repeated Sku skus = 1;
}

// 系统自动添加，请勿删除
message ListSkuNutritionRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"sku_nutrition_id" compare:"in"
    repeated uint64 sku_nutrition_ids = 1;
    // @inject_tag: field:"sku_id" compare:"in"
    repeated uint64 sku_ids = 2;

    bool need_deleted = 50; // 是否查询已删除的

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListSkuNutritionResponse {
    repeated SkuNutrition     sku_nutritions = 1;
    ceres.common.PagingResult paging         = 2;
}

// 系统自动添加，请勿删除
message QuerySkuNutritionRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QuerySkuNutritionResponse {
    repeated SkuNutrition     sku_nutritions = 1;
    ceres.common.PagingResult paging         = 100;
}

// 系统自动添加，请勿删除
message CreateSkuNutritionRequest {
    SkuNutrition sku_nutrition = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateSkuNutritionResponse {
    SkuNutrition sku_nutrition = 1;
}

// 系统自动添加，请勿删除
message UpdateSkuNutritionRequest {
    SkuNutrition sku_nutrition = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateSkuNutritionResponse {
    SkuNutrition sku_nutrition = 1;
}

// 系统自动添加，请勿删除
message DeleteSkuNutritionRequest {
    // @inject_tag: field:"sku_nutrition_id" compare:"in"
    repeated uint64 sku_nutrition_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteSkuNutritionResponse {
    repeated SkuNutrition sku_nutritions = 1;
}

// 系统自动添加，请勿删除
message GetNutritionRequest {
    uint64 nutrition_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetNutritionResponse {
    Nutrition nutrition = 1;
}

// 系统自动添加，请勿删除
message QueryNutritionRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryNutritionResponse {
    repeated Nutrition        nutritions = 1;
    ceres.common.PagingResult paging     = 100;
}

// 系统自动添加，请勿删除
message CreateNutritionRequest {
    Nutrition nutrition = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateNutritionResponse {
    Nutrition nutrition = 1;
}

// 系统自动添加，请勿删除
message UpdateNutritionRequest {
    Nutrition nutrition = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateNutritionResponse {
    Nutrition nutrition = 1;
}

// 系统自动添加，请勿删除
message GetSkuSaleInventoryRequest {
    uint64 sku_sale_inventory_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetSkuSaleInventoryResponse {
    SkuSaleInventory sku_sale_inventory = 1;
}

// 系统自动添加，请勿删除
message ListSkuSaleInventoryRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"sku_sale_inventory_id" compare:"in"
    repeated uint64 sku_sale_inventory_ids = 1;
    // @inject_tag: field:"sku_id" compare:"in"
    repeated uint64 sku_ids = 2;

    bool need_deleted = 50; // 是否查询已删除的

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListSkuSaleInventoryResponse {
    repeated SkuSaleInventory sku_sale_inventorys = 1;
    ceres.common.PagingResult paging              = 2;
}

// 系统自动添加，请勿删除
message QuerySkuSaleInventoryRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QuerySkuSaleInventoryResponse {
    repeated SkuSaleInventory sku_sale_inventorys = 1;
    ceres.common.PagingResult paging              = 100;
}

// 系统自动添加，请勿删除
message CreateSkuSaleInventoryRequest {
    SkuSaleInventory sku_sale_inventory = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateSkuSaleInventoryResponse {
    SkuSaleInventory sku_sale_inventory = 1;
}

// 系统自动添加，请勿删除
message UpdateSkuSaleInventoryRequest {
    SkuSaleInventory sku_sale_inventory = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateSkuSaleInventoryResponse {
    SkuSaleInventory sku_sale_inventory = 1;
}

// 系统自动添加，请勿删除
message DeleteSkuSaleInventoryRequest {
    // @inject_tag: field:"sku_sale_inventory_id" compare:"in"
    repeated uint64 sku_sale_inventory_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteSkuSaleInventoryResponse {
    repeated SkuSaleInventory sku_sale_inventorys = 1;
}

// 系统自动添加，请勿删除
message QueryQuotationRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryQuotationResponse {
    repeated Quotation        quotations = 1;
    ceres.common.PagingResult paging     = 100;
}

// 系统自动添加，请勿删除
message GetCustomerPriceOnCategoryRequest {
    uint64 customer_price_on_category_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetCustomerPriceOnCategoryResponse {
    CustomerPriceOnCategory customer_price_on_category = 1;
}

// 系统自动添加，请勿删除
message ListCustomerPriceOnCategoryRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"customer_price_on_category_id" compare:"in"
    repeated uint64 customer_price_on_category_ids = 1;

    bool need_deleted = 50; // 是否查询已删除的

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListCustomerPriceOnCategoryResponse {
    repeated CustomerPriceOnCategory customer_price_on_categorys = 1;
    ceres.common.PagingResult        paging                      = 2;
}

// 系统自动添加，请勿删除
message QueryCustomerPriceOnCategoryRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryCustomerPriceOnCategoryResponse {
    repeated CustomerPriceOnCategory customer_price_on_categorys = 1;
    ceres.common.PagingResult        paging                      = 100;
}

// 系统自动添加，请勿删除
message CreateCustomerPriceOnCategoryRequest {
    CustomerPriceOnCategory customer_price_on_category = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateCustomerPriceOnCategoryResponse {
    CustomerPriceOnCategory customer_price_on_category = 1;
}

// 系统自动添加，请勿删除
message UpdateCustomerPriceOnCategoryRequest {
    CustomerPriceOnCategory customer_price_on_category = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateCustomerPriceOnCategoryResponse {
    CustomerPriceOnCategory customer_price_on_category = 1;
}

// 系统自动添加，请勿删除
message DeleteCustomerPriceOnCategoryRequest {
    // @inject_tag: field:"customer_price_on_category_id" compare:"in"
    repeated uint64 customer_price_on_category_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteCustomerPriceOnCategoryResponse {
    repeated CustomerPriceOnCategory customer_price_on_categorys = 1;
}

// 系统自动添加，请勿删除
message GetCustomerPriceMaskSkuRequest {
    uint64 customer_price_mask_sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetCustomerPriceMaskSkuResponse {
    CustomerPriceMaskSku customer_price_mask_sku = 1;
}

// 系统自动添加，请勿删除
message ListCustomerPriceMaskSkuRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"customer_price_mask_sku_id" compare:"in"
    repeated uint64 customer_price_mask_sku_ids = 1;

    bool need_deleted = 50; // 是否查询已删除的

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListCustomerPriceMaskSkuResponse {
    repeated CustomerPriceMaskSku customer_price_mask_skus = 1;
    ceres.common.PagingResult     paging                   = 2;
}

// 系统自动添加，请勿删除
message QueryCustomerPriceMaskSkuRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryCustomerPriceMaskSkuResponse {
    repeated CustomerPriceMaskSku customer_price_mask_skus = 1;
    ceres.common.PagingResult     paging                   = 100;
}

// 系统自动添加，请勿删除
message CreateCustomerPriceMaskSkuRequest {
    CustomerPriceMaskSku customer_price_mask_sku = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateCustomerPriceMaskSkuResponse {
    CustomerPriceMaskSku customer_price_mask_sku = 1;
}

// 系统自动添加，请勿删除
message UpdateCustomerPriceMaskSkuRequest {
    CustomerPriceMaskSku customer_price_mask_sku = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateCustomerPriceMaskSkuResponse {
    CustomerPriceMaskSku customer_price_mask_sku = 1;
}

// 系统自动添加，请勿删除
message DeleteCustomerPriceMaskSkuRequest {
    // @inject_tag: field:"customer_price_mask_sku_id" compare:"in"
    repeated uint64 customer_price_mask_sku_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteCustomerPriceMaskSkuResponse {
    repeated CustomerPriceMaskSku customer_price_mask_skus = 1;
}

// 系统自动添加，请勿删除
message ListCustomerQuotationRelationRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"customer_quotation_relation_id" compare:"in"
    repeated uint64 customer_quotation_relation_ids = 1;

    bool need_deleted = 50; // 是否查询已删除的

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListCustomerQuotationRelationResponse {
    repeated CustomerQuotationRelation customer_quotation_relations = 1;
    ceres.common.PagingResult          paging                       = 2;
}

// 系统自动添加，请勿删除
message QueryCustomerQuotationRelationRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryCustomerQuotationRelationResponse {
    repeated CustomerQuotationRelation customer_quotation_relations = 1;
    ceres.common.PagingResult          paging                       = 100;
}

// 系统自动添加，请勿删除
message CreateCustomerQuotationRelationRequest {
    CustomerQuotationRelation customer_quotation_relation = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateCustomerQuotationRelationResponse {
    CustomerQuotationRelation customer_quotation_relation = 1;
}

// 系统自动添加，请勿删除
message UpdateCustomerQuotationRelationRequest {
    CustomerQuotationRelation customer_quotation_relation = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateCustomerQuotationRelationResponse {
    CustomerQuotationRelation customer_quotation_relation = 1;
}

// 系统自动添加，请勿删除
message QueryMenuRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryMenuResponse {
    repeated Menu             menus  = 1;
    ceres.common.PagingResult paging = 100;
}

// 系统自动添加，请勿删除
message QueryCustomerMenuRelationRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryCustomerMenuRelationResponse {
    repeated CustomerMenuRelation customer_menu_relations = 1;
    ceres.common.PagingResult     paging                  = 100;
}

// 系统自动添加，请勿删除
message CreateCustomerMenuRelationRequest {
    CustomerMenuRelation customer_menu_relation = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateCustomerMenuRelationResponse {
    CustomerMenuRelation customer_menu_relation = 1;
}

// 系统自动添加，请勿删除
message UpdateCustomerMenuRelationRequest {
    CustomerMenuRelation customer_menu_relation = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateCustomerMenuRelationResponse {
    CustomerMenuRelation customer_menu_relation = 1;
}

// 系统自动添加，请勿删除
message DeleteCustomerMenuRelationRequest {
    // @inject_tag: field:"customer_menu_relation_id" compare:"in"
    repeated uint64 customer_menu_relation_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteCustomerMenuRelationResponse {
    repeated CustomerMenuRelation customer_menu_relations = 1;
}

// 系统自动添加，请勿删除
message GetMenuDetailRequest {
    uint64 menu_detail_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

// 系统自动添加，请勿删除
message QueryMenuDetailRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryMenuDetailResponse {
    repeated MenuDetail       menu_details = 1;
    ceres.common.PagingResult paging       = 100;
}

// 系统自动添加，请勿删除
message DeleteMenuDetailRequest {
    // @inject_tag: field:"menu_detail_id" compare:"in"
    repeated uint64 menu_detail_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteMenuDetailResponse {
    repeated MenuDetail menu_details = 1;
}

// 系统自动添加，请勿删除
message QueryMenuDetailSkuRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryMenuDetailSkuResponse {
    repeated MenuDetailSku    menu_detail_skus = 1;
    ceres.common.PagingResult paging           = 100;
}

// 系统自动添加，请勿删除
message GetMenuPeriodGroupRequest {
    uint64 menu_period_group_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetMenuPeriodGroupResponse {
    MenuPeriodGroup menu_period_group = 1;
}

// 系统自动添加，请勿删除
message QueryMenuPeriodGroupRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryMenuPeriodGroupResponse {
    repeated MenuPeriodGroup  menu_period_groups = 1;
    ceres.common.PagingResult paging             = 100;
}

// 系统自动添加，请勿删除
message QueryBasicPriceRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryBasicPriceResponse {
    repeated BasicPrice       basic_prices = 1;
    ceres.common.PagingResult paging       = 100;
}

// 系统自动添加，请勿删除
message UpdateBasicPriceRequest {
    BasicPrice basic_price = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateBasicPriceResponse {
    BasicPrice basic_price = 1;
}

// 系统自动添加，请勿删除
message DeleteBasicPriceRequest {
    // @inject_tag: field:"basic_price_id" compare:"in"
    repeated uint64 basic_price_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteBasicPriceResponse {
    repeated BasicPrice basic_prices = 1;
}

// 系统自动添加，请勿删除
message GetBasicPriceDetailRequest {
    uint64 basic_price_detail_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetBasicPriceDetailResponse {
    BasicPriceDetail basic_price_detail = 1;
}

// 系统自动添加，请勿删除
message QueryBasicPriceDetailRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryBasicPriceDetailResponse {
    repeated BasicPriceDetail basic_price_details = 1;
    ceres.common.PagingResult paging              = 100;
}

// 系统自动添加，请勿删除
message CreateBasicPriceDetailRequest {
    BasicPriceDetail basic_price_detail = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateBasicPriceDetailResponse {
    BasicPriceDetail basic_price_detail = 1;
}

// 系统自动添加，请勿删除
message UpdateBasicPriceDetailRequest {
    BasicPriceDetail basic_price_detail = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateBasicPriceDetailResponse {
    BasicPriceDetail basic_price_detail = 1;
}

// 系统自动添加，请勿删除
message DeleteBasicPriceDetailRequest {
    // @inject_tag: field:"basic_price_detail_id" compare:"in"
    repeated uint64 basic_price_detail_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteBasicPriceDetailResponse {
    repeated BasicPriceDetail basic_price_details = 1;
}

// 系统自动添加，请勿删除
message GetMealCalendarRequest {
    uint64 meal_calendar_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetMealCalendarResponse {
    MealCalendar meal_calendar = 1;
}

// 系统自动添加，请勿删除
message ListMealCalendarRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"meal_calendar_id" compare:"in"
    repeated uint64 meal_calendar_ids = 1;

    bool need_deleted = 50; // 是否查询已删除的

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListMealCalendarResponse {
    repeated MealCalendar     meal_calendars = 1;
    ceres.common.PagingResult paging         = 2;
}

// 系统自动添加，请勿删除
message QueryMealCalendarRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryMealCalendarResponse {
    repeated MealCalendar     meal_calendars = 1;
    ceres.common.PagingResult paging         = 100;
}

// 系统自动添加，请勿删除
message CreateMealCalendarRequest {
    MealCalendar meal_calendar = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateMealCalendarResponse {
    MealCalendar meal_calendar = 1;
}

// 系统自动添加，请勿删除
message UpdateMealCalendarRequest {
    MealCalendar meal_calendar = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateMealCalendarResponse {
    MealCalendar meal_calendar = 1;
}

// 系统自动添加，请勿删除
message DeleteMealCalendarRequest {
    // @inject_tag: field:"meal_calendar_id" compare:"in"
    repeated uint64 meal_calendar_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteMealCalendarResponse {
    repeated MealCalendar meal_calendars = 1;
}

// 系统自动添加，请勿删除
message GetFavoriteResponse {
    Favorite favorite = 1;
}

// 系统自动添加，请勿删除
message QueryFavoriteRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryFavoriteResponse {
    repeated Favorite         favorites = 1;
    ceres.common.PagingResult paging    = 100;
}

// 系统自动添加，请勿删除
message GetFavoriteSkuRequest {
    uint64 favorite_sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetFavoriteSkuResponse {
    FavoriteSku favorite_sku = 1;
}

// 系统自动添加，请勿删除
message ListFavoriteSkuRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"favorite_sku_id" compare:"in"
    repeated uint64 favorite_sku_ids = 1;

    bool need_deleted = 50; // 是否查询已删除的

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListFavoriteSkuResponse {
    repeated FavoriteSku      favorite_skus = 1;
    ceres.common.PagingResult paging        = 2;
}

// 系统自动添加，请勿删除
message QueryFavoriteSkuRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryFavoriteSkuResponse {
    repeated FavoriteSku      favorite_skus = 1;
    ceres.common.PagingResult paging        = 100;
}

// 系统自动添加，请勿删除
message CreateFavoriteSkuRequest {
    FavoriteSku favorite_sku = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateFavoriteSkuResponse {
    FavoriteSku favorite_sku = 1;
}

// 系统自动添加，请勿删除
message UpdateFavoriteSkuRequest {
    FavoriteSku favorite_sku = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateFavoriteSkuResponse {
    FavoriteSku favorite_sku = 1;
}

// 系统自动添加，请勿删除
message DeleteFavoriteSkuRequest {
    // @inject_tag: field:"favorite_sku_id" compare:"in"
    repeated uint64 favorite_sku_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteFavoriteSkuResponse {
    repeated FavoriteSku favorite_skus = 1;
}

// 系统自动添加，请勿删除
message QueryRuleSetRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryRuleSetResponse {
    repeated RuleSet          rule_sets = 1;
    ceres.common.PagingResult paging    = 100;
}

// 系统自动添加，请勿删除
message GetCategoryImageRequest {
    uint64 category_image_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetCategoryImageResponse {
    CategoryImage category_image = 1;
}

// 系统自动添加，请勿删除
message QueryCategoryImageRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryCategoryImageResponse {
    repeated CategoryImage    category_images = 1;
    ceres.common.PagingResult paging          = 100;
}

// 系统自动添加，请勿删除
message CreateCategoryImageRequest {
    CategoryImage category_image = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateCategoryImageResponse {
    CategoryImage category_image = 1;
}

// 系统自动添加，请勿删除
message UpdateCategoryImageRequest {
    CategoryImage category_image = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateCategoryImageResponse {
    CategoryImage category_image = 1;
}

// 系统自动添加，请勿删除
message QueryReferencePriceRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryReferencePriceResponse {
    repeated ReferencePrice   reference_prices = 1;
    ceres.common.PagingResult paging           = 100;
}

// 系统自动添加，请勿删除
message CreateReferencePriceRequest {
    ReferencePrice reference_price = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateReferencePriceResponse {
    ReferencePrice reference_price = 1;
}

// 系统自动添加，请勿删除
message GetMarketDataRequest {
    uint64 market_data_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetMarketDataResponse {
    MarketData market_data = 1;
}

// 系统自动添加，请勿删除
message QueryMarketDataRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QueryMarketDataResponse {
    repeated MarketData       market_datas = 1;
    ceres.common.PagingResult paging       = 100;
}

// 系统自动添加，请勿删除
message CreateMarketDataRequest {
    MarketData market_data = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateMarketDataResponse {
    MarketData market_data = 1;
}

// 系统自动添加，请勿删除
message UpdateMarketDataRequest {
    MarketData market_data = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateMarketDataResponse {
    MarketData market_data = 1;
}

// 系统自动添加，请勿删除
message DeleteMarketDataRequest {
    // @inject_tag: field:"market_data_id" compare:"in"
    repeated uint64 market_data_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteMarketDataResponse {
    repeated MarketData market_datas = 1;
}

// 系统自动添加，请勿删除
message GetSkuAcceptanceCriteriaRequest {
    uint64 sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetSkuAcceptanceCriteriaResponse {
    SkuAcceptanceCriteria sku_acceptance_criteria = 1;
}

// 系统自动添加，请勿删除
message ListSkuAcceptanceCriteriaRequest {
    enum PagingField {
        UNSPECIFIED = 0;
    }

    // @inject_tag: field:"sku_acceptance_criteria_id" compare:"in"
    repeated uint64 sku_acceptance_criteria_ids = 1;
    // @inject_tag: field:"sku_id" compare:"in"
    repeated uint64 sku_ids = 2;

    ceres.common.PagingParams paging    = 1000;
    repeated ceres.common.SortBy sortby = 1001;
}

// 系统自动添加，请勿删除
message ListSkuAcceptanceCriteriaResponse {
    repeated SkuAcceptanceCriteria sku_acceptance_criterias = 1;
    ceres.common.PagingResult      paging                   = 2;
}

// 系统自动添加，请勿删除
message QuerySkuAcceptanceCriteriaRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams       paging     = 101;                                              // 分页条件
    repeated ceres.common.SortBy sort_by = 102;                                              // 排序条件
}

// 系统自动添加，请勿删除
message QuerySkuAcceptanceCriteriaResponse {
    repeated SkuAcceptanceCriteria sku_acceptance_criterias = 1;
    ceres.common.PagingResult      paging                   = 100;
}

// 系统自动添加，请勿删除
message CreateSkuAcceptanceCriteriaRequest {
    SkuAcceptanceCriteria sku_acceptance_criteria = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreateSkuAcceptanceCriteriaResponse {
    SkuAcceptanceCriteria sku_acceptance_criteria = 1;
}

// 系统自动添加，请勿删除
message UpdateSkuAcceptanceCriteriaRequest {
    SkuAcceptanceCriteria sku_acceptance_criteria = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdateSkuAcceptanceCriteriaResponse {
    SkuAcceptanceCriteria sku_acceptance_criteria = 1;
}

message SaveSkuAcceptanceCriteriaRequest {
    SkuAcceptanceCriteria sku_acceptance_criteria = 1 [ (validate.rules).message.required = true ];
}
message SaveSkuAcceptanceCriteriaResponse {
    SkuAcceptanceCriteria sku_acceptance_criteria = 1;
}

// 系统自动添加，请勿删除
message DeleteSkuAcceptanceCriteriaRequest {
    // @inject_tag: field:"sku_acceptance_criteria_id" compare:"in"
    repeated uint64 sku_acceptance_criteria_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeleteSkuAcceptanceCriteriaResponse {
    repeated SkuAcceptanceCriteria sku_acceptance_criterias = 1;
}

message SyncQuotationBasicPriceByImportRequest {
    uint64 supplier_id = 1; // 供应商
    uint64 start_time  = 2;
    uint64 end_time    = 3;
    // repeated BasicPrice basic_prices = 2 [ (validate.rules).repeated = {min_items : 0, max_items : 400} ];
    BasicPrice basic_price = 4; // 只支持一条详情,如果要创建多个详情,需多次调用
}

message SyncQuotationBasicPriceByImportResponse {
    Quotation  quotation   = 1;
    BasicPrice basic_price = 2;
}
// 系统自动添加，请勿删除
message GetPackUnitRequest {
    uint64 pack_unit_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

// 系统自动添加，请勿删除
message GetPackUnitResponse {
    PackUnit pack_unit = 1;
}

// 系统自动添加，请勿删除
message QueryPackUnitRequest {
    common.QueryCriteriaGroup query      = 100 [ (validate.rules).message.required = true ]; // 查询条件
    common.PagingParams paging           = 101; // 分页条件
    repeated ceres.common.SortBy sort_by = 102; // 排序条件
}

// 系统自动添加，请勿删除
message QueryPackUnitResponse {
    repeated PackUnit pack_units = 1;
    ceres.common.PagingResult paging = 100;
}

// 系统自动添加，请勿删除
message CreatePackUnitRequest {
    PackUnit pack_unit = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message CreatePackUnitResponse {
    PackUnit pack_unit = 1;
}

// 系统自动添加，请勿删除
message UpdatePackUnitRequest {
    PackUnit pack_unit = 1 [ (validate.rules).message.required = true ];
}

// 系统自动添加，请勿删除
message UpdatePackUnitResponse {
    PackUnit pack_unit = 1;
}

// 系统自动添加，请勿删除
message DeletePackUnitRequest {
    // @inject_tag: field:"pack_unit_id" compare:"in"
    repeated uint64 pack_unit_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

// 系统自动添加，请勿删除
message DeletePackUnitResponse {
    repeated PackUnit pack_units = 1;
}
//-------------基础资料同步管理域----------------

message AsyncManagebaseSkuEventListenerRequest {
    string           event_type  = 1;
    repeated uint64  sku_ids     = 2;
    map<uint64, Sku> old_sku_map = 3;
}
message AsyncManagebaseSkuEventListenerResponse {
}

message AsyncManagebaseSkuCategoryEventListenerRequest {
    string           event_type  = 1;
    repeated uint64  sku_category_ids     = 2;
    map<uint64, Sku> old_sku_map = 3;
}
message AsyncManagebaseSkuCategoryEventListenerResponse {
}

message AsyncManagebaseSkuUnitEventListenerRequest {
    string           event_type  = 1;
    repeated uint64  sku_unit_ids     = 2;
}
message AsyncManagebaseSkuUnitEventListenerResponse {
}